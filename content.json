{"meta":{"title":"Limoer的记事小本","subtitle":null,"description":null,"author":"Limoer","url":"http://yoursite.com"},"pages":[{"title":"","date":"2018-08-26T02:12:55.757Z","updated":"2017-02-09T09:22:58.000Z","comments":true,"path":"googlee22a7e1de18f983c.html","permalink":"http://yoursite.com/googlee22a7e1de18f983c.html","excerpt":"","text":"google-site-verification: googlee22a7e1de18f983c.html"},{"title":"","date":"2018-08-26T02:12:55.892Z","updated":"2017-04-15T08:48:24.000Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"Nickname: Limoer Profession: software engineering Profile: I’m a student from SDU. I’m focusing on browser side developing. I like the amazing and ridiculous language - JavaScript!"}],"posts":[{"title":"每周一记(中秋)","slug":"week-record-0922","date":"2018-09-22T03:16:41.000Z","updated":"2018-09-24T13:02:26.643Z","comments":true,"path":"2018/09/22/week-record-0922/","link":"","permalink":"http://yoursite.com/2018/09/22/week-record-0922/","excerpt":"","text":"放假第一天(上周六)，打篮球，用力过猛戳到手指，又肿又痛的，键盘都没法敲，两天过去了，现在是这个样子的。肿是消了，但是只要按压就痛的不行，所以每周一记推迟了。 如果真要写的话，可能手指受伤的这几天，受最大影响的莫过于我的“电竞事业”了😂。 再补上。","categories":[],"tags":[{"name":"周记","slug":"周记","permalink":"http://yoursite.com/tags/周记/"}]},{"title":"每周一记(发工资日)","slug":"week-record-0915","date":"2018-09-15T03:09:56.000Z","updated":"2018-09-15T06:05:50.355Z","comments":true,"path":"2018/09/15/week-record-0915/","link":"","permalink":"http://yoursite.com/2018/09/15/week-record-0915/","excerpt":"","text":"上周说前段时间进行的的前端资格考试挂了，等待补考，其实不然，我莫名其妙的就过了。 工作之外昨天晚上和大学舍友聊天，聊到近况，发现大家都有落差但也随遇而安，无论是传说中的996还是节假日加班，抑或是我这种相对较为轻松的工作。现在大家都明白了，当初被听信企业画大饼，总觉得自己壮志未酬能够好好干一番，结果总结起来，就是我们太年轻。 我的作息时间一般为晚上12点睡觉，早上7点起，8点到公司，这样的话我就可以早点下班并且保持一个较高的所谓战斗力了。可是这个平衡还是被打破了，每天到了12点睡不着，早上还是7点起，睡眠时间不到7个小时，再配合上高强度的工作，担心身体真的吃不消。而这种担忧在昨天显现了，下午1点例常开发报表，开始头痛，我不得不停下来休息，喝喝水洗把脸什么的；到了三点半开完会，头痛反而加剧了，趴了好一阵，又去江边溜达了一圈，透透气，这才缓解，差不多到五点。前段时间看一个视频，程序员因为劳累倒在工作岗位上，我庆幸自己没事，但是为了健康着想，以后得早点睡了。 工作最近一段时间得任务都是开发报表，手头上报表大概有40张，按照每天开发3个得进度，得三周，并且每一张报表都不一样，遇到的问题也不一样，所以进度有可能被搁置。 例如本周在开发过程中就遇到很多有意思的问题，具体的业务是我需要使用一个下拉选择框，每次选择后会请求不同的数据，问题就出在我根本不知道每个选择项具体的值是什么，因为我们能够获取信息的方式只有Delphi代码，而恰巧这份代码中所有涉及到的中文的地方都被编码过了，并且这种编码方式是公司独有的，且我暂时不能通过沟通的方式来解码，所以一切都得靠自己咯。编码方式看起来像#23398#39#19876这样，是不是很熟悉？如果稍微变化&amp;#23398;&amp;#39;现在知道了吧，所以这就是一种去掉了&amp;和;的unicode啊。那么这就很好解决了，写脚本转就可以了，至此，问题搞定。 还有很有趣的事情，比如接口返回的数据有一个字段本该是_mainColumn却写成了_mainColmn,或者干脆在一个有四十多个字段的接口中使用了columnX的命名方式，这种毫无意义的字段名称，给到对我来说完全黑盒的接口，简直是灾难😂。 学习这周仍然只有恨碎片化的时间来学习，并且随着内心变得浮躁，碎片化的时间也被消耗殆尽了。 SPA性能优化。tree shaking打包时将无用的代码删除掉；代码分割，分离三方库等；动态导入（按需加载，预加载等）；利用缓存，打包成runtimeChunk等。 TypeScript 学习。在TS官网上看了好几章文档，主要包括数据类型，类型断言，接口等。 块级格式化上下文（BFC），老生常谈的问题了，看文章温习温习。 其它 安利一款游戏：《NBA2K OL2》,可以看作《2K17》的阉割版，目前能玩的模式只有王朝和街头，对于我这种不花钱也不是很想变得很强的玩家，偶尔玩玩还是不错的。 一款叫做PDFelement6 Pro的软件，也许是我用过能够看PDF和编辑PDF最好的一款了，这不是免费的，当然在天朝想免费还是能够办到。 都2018了JetBrains全家桶仍然可以通过修改系统时间的方式无限期使用，所以我想学Fluter，求打醒，小程序还没眉目呢！ 尾巴上午说发工资了，怎么也得请吃顿好的吧。好，肯德基怎么样？好啊，请。帮我叫外卖吧，外面太热了，不想出去。怎么可能，已经点好了，出去取吧。晕。穿好鞋，飞奔。走到一半，电话响起。您好，你的外卖到了，门口拿一下。飞奔回去，衣服湿透了。 吃着三十多一顿的午餐，真香。","categories":[],"tags":[{"name":"周记","slug":"周记","permalink":"http://yoursite.com/tags/周记/"}]},{"title":"每周一记（9月来了）","slug":"week-record-0908","date":"2018-09-08T02:31:05.000Z","updated":"2018-09-08T03:25:16.992Z","comments":true,"path":"2018/09/08/week-record-0908/","link":"","permalink":"http://yoursite.com/2018/09/08/week-record-0908/","excerpt":"","text":"我真是一个坐不住的人。 工作 我以前总以为在别人搭好的架子下写代码是体力活，而现在这个观念的的确确需要改变了。 我的这周的前三天我都在开发新的报表，周四被安排了一天“轮休”仔仔细细检查了已经开发的报表，周五由于没有安排活所以还是开发报表。我一直以为开发报表是一件实打实的体力活，我们不需要知道报表/图表组件具体实现的方式，我们甚至不需要关心页面布局，因为用于布局容器组件都写好了，我只需要读懂把Delphi代码，然后把对应的数据传入到props中就可以了。这当然有难点，理解Delphi需要花上一些时间，细节也要想方设法去实现。可是当大多数报表实现十分类似，熟练过后基本没什么难度，那么这项任务也就对我来说就成了不折不扣的体力活了。 真的是这样吗？ 刚开始开发的时候，其实犯了很多错，这些错误都来自对项目的不理解和粗心大意。甚至我在很长一段时间内并没有发掘，直到阴差阳错这些隐含着错误的报表被纳入到发布版本，测试检测出错误的那一刻。 这中间还有一个小插曲，前面说到阴差阳错的报表就上线了，其实是因为配置文件被更改了。因为这个事情在晨会上我还和leader争了几句，当然到最后谁都没有再追究。把这件事讲给小伙伴，所有人都说我情商低，可我总是这样，我会忍气吞声，当然如果三番两次，总会忍不了，我是来写代码，可不是来背锅的。 回到正题，修复了很早以前开发留下的bug外，在“轮休”那天，我好好检查了那些后来开发的报表，虽然没有了功能上的bug，但还是由于粗心大意，比如字段描述中的文字写错，数字格式化不正确等。好在这些报表都没上线，不然这个就真得我背锅了。 周五开发了一个十分复杂的报表，它让我意识到，这不仅仅是一份体力活。我差不多花了5个小时来完成这张表，除了非常难懂Delphi代码外，限制条件也十分多，因为需要实现具体的功能，发现已经封装好的组件并不能满足需求的时候，又需要去沟通增加需求，并且在开发的过程中，因为实在架子下工作，反而为了实现某些功能，需要额外的想办法。 好吧，说了这么多，我承认我现在做的工作不仅仅是体力活，当然就算是体力活，我也要把任务做到极致。 学习 这周大块大块空余的时间并不多，在闲散的时间里，我主要通过在掘金和github看文章来学习。 文件获取和上传 使用input[type=&#39;file&#39;]模拟点击上传 使用拖动/放置事件来上传drag/drop 剪切板的粘贴事件 高阶函数(HOC)函数作为参数传入/作为返回值返回。 AOP面向切面编程。把与业务无关的模块抽离出来，然后动态织入到业务中去。 柯里化(部分求值)。函数并不会立即求值，而是返回一个另一个函数，已经传入的参数活因为形成的闭包而得以保留。 函数节流与分时函数。 惰性加载函数。 其它 有关于getBoundingClientRect的学习。 哈希碰撞与生日攻击。 框架/库/工具 store.js 多浏览器实现的本地存储库。 pica 一个很好用的图片压缩工具 tween Vue.js 基础知识重温 尾巴周五的前端资格考试已挂，期待下周补考。 最近绝地暖暖开挂的人太多了，把把都有大哥，快要弃游了。 最后：无糖全麦麦片真好吃🤮","categories":[],"tags":[{"name":"周记","slug":"周记","permalink":"http://yoursite.com/tags/周记/"}]},{"title":"每周一记（8月的尾巴）","slug":"week-record-0901","date":"2018-09-01T02:12:54.000Z","updated":"2018-09-01T03:20:01.394Z","comments":true,"path":"2018/09/01/week-record-0901/","link":"","permalink":"http://yoursite.com/2018/09/01/week-record-0901/","excerpt":"","text":"从万般抵触到欣然接受，没想到会这么快。 工作我被转岗了，并且是在没有通知的情况下。 上周五，老大让我去看某度统计的源代码，花了好长的时间，想了好多办法才拿到这份经过babel转译过的源码，可读性又差，我硬着头皮看了个大概。这大概若不是工作需要我可能永远不会去读的代码。 周一，前去汇报，听说要做一个类似的项目，私底下用什么技术，如何去实现我都想好了，只等开工。 周二，打开邮箱，转岗的邮件发过来了，在毫不知情的情况下，我因为业务需要被调岗了，甚至这次调岗老大都不知道。刚看到这份邮件的时候，我最开始的心情竟然是有点开心，因为在我们部门简直不要太闲，并且首页代码真的让人提不起兴趣。再者，我要去的部门是公司的核心部门，用公司前段时间说的，我这是从第一曲线往第二曲线上跨越。 周三，在搬过去之前，我把首页的代码又仔细检查了一遍，确保所有生涩难懂的代码段都有注释，又解决了几个潜在的bug，最后提交一把，并交给小伙伴。晚上，下班，我一个人默默的搬了好几趟，心里说不出的难受。和小伙伴一起回家，路上我在吐槽，好不容易熟悉了一个环境，又要去一个陌生的环境，对于不善人情世故的我，真的是煎熬哎。 周四，新部门的第一次晨会，我完全打消了心中的顾虑，我想我能够很好的融入这个集体。等拿到项目代码，又回到了React了，复杂的实现逻辑，理解起来真的让人头疼，但也让我欣喜，我喜欢挑战，虽然看起来这更多会是体力活。 周五，在新的环境里，一切又回归平静。带上耳机，新的一天又开始了，这让我想起上学的时候，带上耳机听着音乐，脑子无比清醒，总能够很快的完成任务。 学习 React 既然又入坑了，对于好几个月都没怎么用的技术了，当然需要花一些时间来温习下了。 微信小程序 源于在掘金上看到的一个沸点，我决定把开发小程序加入自己的技能树了，这可能需要花上很长的一段时间才能达到写demo的阶段，平时忙得不可开交，周末玩玩游戏健健身，学习的时间又少了，哎…电子书已下载好，写完周记就启动！ SSR 上周花了很多时间去学习React服务端渲染，Demo也是写了毫无异常，昨天下班后尝试把以前做过的idea转到服务端渲染上，却怎么都不成功，也不报错，所以这才是周末的优先级，当然除了游戏时间外。 吐槽虽然吐槽公司不怎么好，但是继收回所有开发的管理员权限后，公司又在网络上为大家着想了，原本每天只有200MB的流量可挥霍，下个稍大的软件都要开工单，现在工作机器要断网了，想上网查资料，滚去虚拟机去查！所以啊，机器本身配置一般般，以后虚拟机又要常驻内存了，开发体验在差的基础上，变成了如果不是为了生活… 尾巴虽然刚上大学不久就接触到了Web开发，接触Web前端开发也有好几年，毕业来公司作为前端也两个月了，React项目国际化，首页数万行祖传代码重构(重写)到几千行，但是我在下周还要参加公司的前端资格考试，只有考核成功，你才能正式成为前端搬砖师。 我想的是，需不需要准备啊什么的，要是到时候考试没通过，要被转去后端写C#，我肯定是不愿意，那就只有另谋高就了。 刚来公司上培训课的那段时间，公司前端新人十几个，竟然只有两个人是有经验的，其中有一个只是停留在使用过jQuery的阶段，那么问题来了。我排第几？ 我觉得，虽然那些没有接触过前端开发的小伙伴能够在最近好好学习，但是作为一个几年了还在浑水摸鱼的前端，我我觉硬要排名的话，前五还是稳的。 考试前的准备，学生时代尚且没做好，不在乎早已根深蒂固。 结果如何，下周便知。 这次把尾巴也写成了吐槽😂","categories":[],"tags":[{"name":"周记","slug":"周记","permalink":"http://yoursite.com/tags/周记/"}]},{"title":"每周一记（8月末）","slug":"week-record-0826","date":"2018-08-26T02:17:20.000Z","updated":"2018-08-26T04:03:43.166Z","comments":true,"path":"2018/08/26/week-record-0826/","link":"","permalink":"http://yoursite.com/2018/08/26/week-record-0826/","excerpt":"","text":"找不到能形容这一周生活的词，除了愚蠢。 照例谈工作我觉得我现阶段的工作和大学里上自习没什么区别，没有人约束，仅凭自己的意愿，随心所欲。除了偶尔还需要补救盲目的重构带来的bug，偶尔需要切下图制作个广告页，剩下的时间就自己安排。 看书 自从知道在github上clone电子书可能会被关小黑屋后，在公司电脑上的电子书就只有当初年少无知下载下来的《你不知道的JavaScript》系列了，这也是我最喜欢的JavaScript开源电子书了。还是在学生时代，就完完整整的将整个系列看过一遍，如今一两个月的时间，差不多又看完一遍了，真的是有一种温故知新的感觉。在阅读整个电子书的过程中，有唯二不那么愉快的地方，第一，作者使用Markdown格式编写的，并且每一章单独成一个文件，有时候一章内容太多，断断续续需要一天才能读完，尤其是午后，读太久了犯困。第二，公司屏幕尺寸和素质不能让人满意，尤其是没有管理员权限去安装Markdown阅读器，只好在VS Code中打开并且使用分屏的预览，结果可读区域面积太小，读久了眼睛又受不了。 React SSR 关于SSR（服务端渲染），我一直想纳入技能包，好在这周有充分的时间去学习。在掘金上看了两篇相关的入门文章，然后把大名鼎鼎的Next.js文档看过一遍。现在回顾一下，差不多只能记住rendertoString和getInitialProps? 大概还在也许会写Demo的阶段吧。所以说呢，学习尚未成功，还要继续努力。 源码 看源码对于现阶段的我来说是奢侈的，如果加上通过各种途径去获得不容易获得的源码，再加上可读性为0，那就让人头疼了。 潜在的业务需要，我需要读一段某某公司开发的页面统计的代码，首先这些代码不是开源的，也不仅仅就通过引入这段JS路径就可以得到源码，并且其是不可读的，有多少不可读呢，举个例子吧，代码2000行左右，使用IIFE分成好几段，对于变量的命名，是没有规律可循的，都使用了A-Z a-z随机组合的方式，并且嵌套极深。例如af.c.cb.hcp。 如何获取到源码这里不过多叙述，反正花的时间多余读源码的时间。 源码如果不可读，那就只读能够理解的地方，所以这么多代码，大概花了2个小时梳理了一下，大概知道了了其工作方式，需要记录的各种数据，至于实现，那是不可能梳理得清楚的。 看完一遍，发现该份源码写得十分规范，给大厂点个赞！ 吐槽周四，例行的下班后健身。结果坐电梯的时候发现五楼摁不了了，坐到三楼服务员告诉我，健身房倒闭了。WTF，两天前来还好好的，现在就倒闭啦？器材都被搬空，怕不是跑路了吧。我才买的的补剂呢！我才办的卡呢！ 周五晚打完篮球，骑车回来，又路过那条街，发现有人在发办健身卡的传单，虽然不是开在一个地方。一想，真快哎，又为下一次跑路做准备了？ 经过这次被跑路的经历，我是不可能再办健身卡了，民工挣点钱不容易，怕不是要被城市的套路消耗殆尽？但是呢，健身还得继续。 写在最后换了电脑，把博客迁到PC上，试了各种网络上的办法，遇到各种各样的问题。结果我用最简单粗暴的方法，直接把目录拷贝过来，再安装依赖，就OK了。 刚买了新电脑，有点兴奋，每天下班后总会在快睡觉之前玩两把，玩完又睡不着觉，结果到了公司，第二天是真的困。要不得，要不得。 前端三连是：太复杂 看不懂 不会做。下次面试还有自以为是的面试官，直接就怼过去了。","categories":[],"tags":[{"name":"周记","slug":"周记","permalink":"http://yoursite.com/tags/周记/"}]},{"title":"每周一记（18年8月中）","slug":"周记2018mid","date":"2018-08-18T09:19:22.000Z","updated":"2018-08-26T03:42:07.388Z","comments":true,"path":"2018/08/18/周记2018mid/","link":"","permalink":"http://yoursite.com/2018/08/18/周记2018mid/","excerpt":"","text":"8月16号刚凌晨，伴随着手机提示音，工资卡中终于有了第一个月的工资。然后，那个晚上，竟然失眠了，整晚上我都在想，除去房租和必要的生活资金，我该如何花掉剩下的钱呢。周四，忙碌的一天，晚上下着大雨，从健身房中回来，有了最初的想法，既然健身是为数不多的爱好，那么补剂还是要买的，无聊的时候想玩玩游戏去网吧简直不要太贵，主机嘛，当然是要攒的。再加上每月固定的花呗，好了，花光了，期待下月… 谈工作 本周的工作总体来说是很轻松的，但是出现了很多问题，我应该反思。 在掘金上看到一个沸点，说的是新人总喜欢抱着满腔热血去重构祖传代码，然后碰壁。这点恰是\b\b说中了我\b。来到公司的这一个月，我也是在按照我的想法，重构一块很重要的代码。一段名副其实的祖传代码。无论从项目目录结构，还是代码本身，我只想说一句，烂透了或者是我从没见过这么烂的代码。但是，抛开性能和开发体验上的问题，这段代码却很好用。借用罗老师的一句话“又不是不能用”来形容是最好不过的了。 当然吐槽归吐槽，重构还是要继续。\b\b准确来说，是重写。在检测过ES6支持程度后，我使用ES6\b重写了业务逻辑，并且抛弃了\b依然好用的表格布局，引入和AMD规范，并且在易用性和可扩展性上下了很大的功夫。 请注意，这一切都是我想到的，没有经过评审，我花了两周的时间，就重构完了。 然后，上线了，BUG铺天盖地。真的，除了失落和灰心，我想不到其它的词来形容我的心情。 极为不规范的成千上万行祖传代码怎么可能在很短时间内弄懂；不熟悉业务逻辑，很多隐藏的业务功能都没有实现；引入模块化是\b好，业务逻辑解耦也好，但是过多的模板，导致现有的\b项目太过臃肿，要是只有一个版本还好，多版本多语言简直就是灾难。 除了修BUG，我也在思考，然后并且了模块化，\b一下子少了四十多个入口文件，通过工具\b把配置文件整合在一个文件中，并且在实际部署的时候压缩配置文件，\b配置文件从24个到如今的一个，体积从300KB到现在的70KB。当然，改变还有很多，\b使用localStorage缓存文件，合并压缩样式文件，减少页面请求等。重构未完成，还得努力。 还能说什么呢，学到了，真是学到了。 吐槽本周的某一天，我回到家，\b打开iTerm准备大干一场，突然，一道灵光闪过，我CTMD，iTerm换图标了，上面那个白条是什么鬼，真是逼死强逼症的节奏哎。直到现在，好几天过去了，还是不习惯\b！ \b某天晚上十一点，看了将军的\b直播，我一口气花完了攒了好久的3700尘，合了一套法术猎，结果被治疗术吊打，被各种德吊打，被电影萨打到哭，\b甚至打不赢沙包战你信？在这里，\b说一句：炉石传说真\b**好玩！ 今天快到中午的时候，和小伙伴健完身去那边买网线，问了好多家杂货店和五金店，基本上都没有，然后一老大爷给我找了个三米长的竟然要收我十五块，忍住了没买。后来买了十米十二块，价格稍微能够接收。关键是拿回家一试，房间里根本没接网，去起居室接又不可能。白瞎了我的十二块哎，无线网卡走一波，了事。 其它如果说还要有其它就要算追了很久的美剧《地球百子第五季》完结啦，想看第六季明年再说咯。第五季追下来整体无感，感觉和前几季比起来剧情是真的无聊。今天看了第十三集，贝拉米他们重新上了飞船，休眠了125年，蒙迪留下的视频，感动！超级期待第六季地球百子与外星人的故事啦。 其它的其它，大概还有学习。每天给自己留下足够的时间，去好好的回顾和学习新的知识，趁自己还学得动。","categories":[],"tags":[{"name":"周记","slug":"周记","permalink":"http://yoursite.com/tags/周记/"}]},{"title":"开端","slug":"第一个月","date":"2018-07-31T13:10:23.000Z","updated":"2018-08-18T15:11:08.000Z","comments":true,"path":"2018/07/31/第一个月/","link":"","permalink":"http://yoursite.com/2018/07/31/第一个月/","excerpt":"","text":"时间过得真快，搬砖快一个月了。 第一周现在对搬砖的要求真高，培训后才能上岗。按照惯例，进了工地就要开始培训了，谁知有工友要下周才到，所以我们这些先一批就得等着了，第一周工头又不安排工作，只有无所事事了。那五天的上班时间啊，幸好带了本《论如何在搬砖过程中学习挖掘技术》，一边学习搬砖技巧，一边偷偷干私活。总的来说，工作环境还是不错的，就是给我们的工具有点不顺手，哎，就这样呢，还要什么自行车呢！ 这里要说一下食堂，虽然菜品是少了点，但味道还是不错的，比我在蓝翔好吃多了，就是这个价格…放在我住那边的工棚小店，这个价两荤一素再来瓶冰啤，岂不是美滋滋。哎，说多了都泪啊。 第二、三周终于开始进行培训了。我们这些粗人，就仗着体力好，干得久，才能勉强得到这份工作。谁知第二周培训的内容竟然与我们的工作不是那么相关，金融知识，股票、债券、基金、期货搞得头都大了，最后做了个测试，发现自己是板砖型。妈哟，这辈子和砖怕是接下来缘分了啊。 培训的时候上面要求我们分成小组拍电影。是的，你没听错，是拍电影！妈哟，我们除了搬砖特长，哪还会啥子文艺哦，长得还丑，演技又捉急，真想找个地缝钻下去。 没办法啊，上面发话了，不但要拍，还要搞评比，那也得硬着头皮拍了啊。平时又没时间，搬砖时间又长，好不容易的周六，洗白了。 再说说我理了个大圆头，好像招谁惹谁了。那个搞培训的人说最不爱打理的就是我。WTF，我剪了个大圆头就认定我不爱打理了吗，那要是我留一头长发，再烫个卷卷头，岂不是你要说我是最帅的那个😂。 就因为我的这个大光头和不经意间透露出来自己会玩吃鸡，我TM也成了个头。那自然是要写剧本，当导演了啊。幸好以本人当前的造型，恐怕只能演打手。所以自然是不能亲自参演，幸好组里有演技派，要是有最正经奖，我们就获奖了。 第三周，没什么好说的，技能培训嘛。对于我们这种搬砖熟练手来说，食之无味，弃之不可惜，奈何上头说了算，还要考核，那是必须要去听了。工头布置了我些简单的任务，练练手还是不错的，所以这一周也就那样，还行。 如今上岗了上岗了，满心欢喜啊。有个工友调走了，他的任务我就接手了呗。工头说了，先熟悉熟悉，随便干，追随自己的灵感。我呸，O98K，干就干啊。 是时候切换一下风格了。 磨炼新人最好的办法是把前人的代码给他看，让他绝望。我拿到那份有年代感的代码，还好把持住了，不然可能需要尿不湿。 我一眼望穿，这份代码深藏功与名啊。关于表格布局、eval、html外写JS、注释、命名什么的不想再多说。借用罗老师的一句话：又不是不能用。 改啊，那就好好改咯。 想起了，最开始想到的是： 重写DOM结构，代替表格布局。 重写JS，除了那些没有头绪的黑箱。 基于配置的形式，一定程度解耦合。 基于86.375%的ES6支持率，引入安全的ES6写法。 后来随着重构的深入，又有了新的想法： 引入AMD规范，前端模块化。 运行时构建DOM以及性能测试对比。 单元测试。 做完这些，第一步的改造计划就差不多了，用了一周的时间完成了这些工作。最大的收获大概是，DOM操作更加熟练了，VS Code的快捷键终于可以Mac和Windows无缝切换了。 接下来的项目是基于React的，还是老项目，做国际化的改造，以前没有做过类似的功能，还蛮期待的。 如果硬要打分的话： 加班程度：⭐️新鲜度：⭐️⭐️⭐️难度：⭐️⭐️收获：⭐️⭐️⭐️⭐️ 这里特别指出，最近利用上班的时间，看了很多书，真的收获很大的。每天翻书，手都翻痛了。 尾巴又到了尾巴时间，一般灌点鸡汤什么的在这里再合适不过了。鉴于我们可是搬砖工程师，那就讲讲和搬砖相关的故事吧。 我的父亲，多年前从事过搬砖行业。现在虽然没搬砖了，可是也是相关行业。其实搬砖这个行业，真的很累，五十岁不到的人，明显看起来比一般人看起来更老。我父亲没什么文化，但多的是力气，所以他就靠这个把我和姐姐都供到大学毕业，然后啊，他还不稍微停下一点，又得考虑下一步了。 我想像父亲一样，能够独挡一面。 所以啊，有些时候负能量爆棚，总有些乱七八糟的想法，想想自己的家人，最后，既来之，则安之，也挺好的。 我们这种除了会点技术，还真是不会什么了。这是事实，但除此之外，做到更多只有靠你自己。 鸡汤灌输完毕，溜了溜了。","categories":[],"tags":[{"name":"About","slug":"About","permalink":"http://yoursite.com/tags/About/"}]},{"title":"尾巴","slug":"尾巴","date":"2018-06-30T06:37:02.000Z","updated":"2018-07-29T05:35:28.000Z","comments":true,"path":"2018/06/30/尾巴/","link":"","permalink":"http://yoursite.com/2018/06/30/尾巴/","excerpt":"","text":"这是故事的结局，我把它叫做尾巴。 是尾巴但也有开头尾巴起源于我一个不敢想但是蓄谋已久的想法。22岁，我大学毕业，来到了梦想中的城市，找了一份自认为还不错的工作，然后开始奋斗。这几乎是每个大学毕业生的剧本，我也不例外。22岁总会带来点什么，或是我们应该下意识改变些什么。而22岁的我，决定付诸行动，虽然已经蓄谋很久了。 见老朋友啊。 这就是尾巴，但尾巴也有开头。 旅程毫不夸张的讲，这是一趟漫长的旅程。即使我生活的地点一直向南在变化，就算我们可以选择的交通工具既方便又快捷，虽说没有千里之隔，但就像是回趟家一样。漫长，但充满期待。 路途开始那天就下起了雨，虽说都快七月了，但是上海就像梅雨天一样，几乎每天都会下会儿小雨，或者是太阳雨。傍晚时分，刚坐上火车，雨又开始沥沥淅淅下起来了，我把脸贴在玻璃上，甚至可以感受到火车车轮与钢轨摩擦发出的吱吱声，随着火车越开越快，这种感觉就越发强烈，直到到了忍耐的极限。在火车上的六个小时不长，但却够拿来回忆很多年的故事呢！好在六个小时不长，不然陷入回忆这种事就要发生在我身上了。可又为何会这样，也许是因为除了回忆，什么都不剩下了。 晚上10点，顺利到达目的地，一走出火车站，潮湿的热空气像我袭来，就像在冬季里吸入冷空气一样，吸入这样的空气也会让人顿时提起神来，它仿佛在告诉，你活着。是啊，活着真好！ 第二天，很早就起，赶上清晨的前几班公交，离目的地还有很远，换乘，再步行，差不多两小时才到。穿过菜市场，湿漉漉的街道和发出的鱼腥味让我想起了和妈妈为数不多买菜的情景。眼前是一个有点年头的小区，旁边有高架桥，不远处还在绿化施工，这虽然是一片住宅，的的确确和D描述的一样，吵死了！ 我环顾四周，茫然写在脸上。我开始打电话，又等了几分钟，一个阿姨向我走来，我认出来了，她是来接我的，旁边还跟着一个小女孩。我赶忙上去打招呼，阿姨看见我也很开心，好久没见到这样的笑容挂在一个中年妇女脸上了，上一个还是半年前的寒假，那个人是我妈。 就这样，我上了楼，一口气爬了六层，到了她家。房子从外面看真不怎么样，但走进真觉得精致啊，客厅厨房都挺宽敞的，这点和我合租的房子真是天壤之别。阿姨问我吃早餐了没，我碍于情面不好说自己饥肠辘辘，上一顿还是在昨天下午吃的，就说自己吃了，阿姨也没多问。 我坐在客厅的沙发上，环顾四周，却没有发现记忆里的东西，心里不禁失落，四年的时间里，也许什么都在发生改变。我和阿姨坐下来聊天，她以为我是D的高中同学，我说不是呢，我是D最好的朋友也是D小学同学，在远在千里的家乡，小学三年级的时候，我们还做过半年多同桌呢！阿姨的震惊完全写在脸上，又有谁能想到，眼前的这个人，竟然是D的小学同学！说道这里，毕竟是同乡人，我们用家乡的方言开始交流。我给阿姨讲我和D的故事，记忆深刻的。这样的桥段在我的脑海里不知过了几遍，语言斟酌了多少次，却没想到，直到真的要说出去的时候，是如此的困难。 好在时间冲淡了这一切，我们都没有太动情。阿姨带我去看了D的房间，这间房子我还是很熟悉的，虽然房间的主人不在了，陈设也变了，但是透过那窗台，望过去就是外面齐平的高架桥。D曾告诉过我，当她无聊的时候，还可以数过往车辆，数到自己不无聊为止。 我问阿姨有没有老照片。 她拿出了一本相册，整整满满的一个相册都贴满了，有多年的老照片，有全家福，还有很多有关D的照片。阿姨在和我一起翻看这些照片，去给我讲有关D的故事。 至始至终我脸上都没有表现出悲伤，直到离开。我谢绝了留下来吃中午饭的好意，阿姨也陪着我下楼，在最后的时间里，我给阿姨说，如果D没离开，可能我们早就见面了。 阿姨叫我以后多来家做客，可是就像是四年前那样，我又有什么理由再来这座城市呢！经过那条菜市场街，我拐了好几道弯，终于走出了小区。一路上，我在想，真的走出来了吧，不然小萝莉都快3岁了！我很欣慰，前所未有的释然。 是尾巴但终究还是结局了回到新的大本营，迫不及待的开始写这个结局。今天下了好久的雨，肯定积了好多水坑，我打开窗呼吸着还算清爽的空气，听到蛙鸣，一切都是那么安静。我想，是时候让故事告一段落了。 我的这22年来，对我影响最大的三个女性是妈妈，老姐和D。妈妈在我童年的那段时间教会了我太多，善恶美丑，做人准则；有一个姐姐真的很棒，总会收到各种各样的礼物，在最无法沟通的时候，同龄人的姐姐却可以懂我；D，我们在小学就已经相识，到了高中，如果不是有D，恐怕我已经荒废那段最宝贵的时光，然后浑浑噩噩过着日子。 我走不出D离开给我带来的阴影，看似只有在电视剧上才会发生的剧情，发生在了我头上，并且没有一个好的结局。 五年可以忘掉什么？那些看似很有用的高中知识点，我忘了；不常用的邮箱密码，也搞忘了；可是，D的离开，快五年了，我以为我忘记了，可是一旦记起，唯独耿耿于怀。 这一次，我依然没法忘记这一切，毕竟真实存在过，亲生经历过；正是因为忘不掉，才证明我们真正的活着啊，并且要好好活着。我没法忘掉这一切，但我看开了，这就是结局。","categories":[],"tags":[{"name":"心灵记事","slug":"心灵记事","permalink":"http://yoursite.com/tags/心灵记事/"}]},{"title":"Hello Goodbye & Hello","slug":"Hello-Goodbye-Hello","date":"2018-05-01T13:12:22.000Z","updated":"2018-07-29T05:39:04.000Z","comments":true,"path":"2018/05/01/Hello-Goodbye-Hello/","link":"","permalink":"http://yoursite.com/2018/05/01/Hello-Goodbye-Hello/","excerpt":"","text":"5月1日，阴天，雾霾挺严重的。下午，戴着耳机，出门；傍晚，下起了雨，躲进快餐店；点了宫保鸡丁和土豆豆角，开始狼吞虎咽，然后，等着雨伞送到；离学校最后的一公里路程，需要十分钟。直到现在，12时，雨还在下，伴随着风。 小长假的最后一天，也是五月的第一天。对啊，五月已经来了。 打开网易云音乐，点开日推，第一首歌就是《Hello Goodbye &amp; Hello》，很早以前看过的番剧《追逐繁星的孩子》ED。此刻我正苦于构思一个标题，所以就用了这个歌名“你好，再见，再也不见”。 在为数众多的看过的动画中，《追逐繁星的孩子》故事讲得不算好，但那句原来是我太孤独直戳内心深处。我想，我何尝不是这样呢，虽然性格不内向，容易和人打成一片，但我还是习惯一个人呆，去健身，躲在网吧打游戏。可我也挺怕一个人的，会因为一个人吃饭吃得特别快，走路也走得特别快，久而久之，给别人留下了不可接近的印象。 五月带给我的印象里就是忙吧，无论是高中还是上了大学，所有的事情都会在五月变得忙碌起来。而这个五月，也就是现在，我却过得非常的悠闲，甚至有点百无聊赖。早早的做完毕业设计，我有很多时间去做很多做感兴趣的事。这样的日子，还会持续两个月。不知道是好是坏。 我的生日一般都在六月，这个时候我呆都在学校，所以这么多年来，我都没怎么过过生日。高中的时候，有时候学习特别忙，都忘记了哪天是五月初三，每次都是妈妈打电话提醒我，让我吃顿好的；上了大学，我更不想让同学们知道我过生日，所以那天我很早就出门，找个自习室好好的学习一天。如果说要有什么不同，那一定是17岁那年，端午节。 至于为什么不同，因为我收到了特别的礼物。为数不多的收到过的贺卡，学生时代追了个遍的小说，画得还算不错的画。 去年寒假回去叔叔家把遗留在那里的高中记忆都翻了个遍，很可惜的是，贺卡不见了；而那本单行本也码在书堆中早已泛黄，我拿走了那本书，把它带在身边，就像那幅画一样。 对于只会画条条框框的我，无法描述那幅画的内容，但站在一个观赏者的角度，还算可以把，仅此而已了。 说起那幅画，我曾经给很多人看过，他们问我画的什么有什么含义，我总是说，我怎么知道啊，就是别人送的礼物而已。其实背后的故事我是知道的，那是我最珍贵的宝物，那是我的记忆啊。 其实记忆才是是每个人最珍贵的宝物。","categories":[],"tags":[{"name":"心灵记事","slug":"心灵记事","permalink":"http://yoursite.com/tags/心灵记事/"}]},{"title":"前端路由拦截和http响应拦截","slug":"前端路由拦截和http响应拦截","date":"2018-04-05T05:12:41.000Z","updated":"2018-04-05T06:08:28.000Z","comments":true,"path":"2018/04/05/前端路由拦截和http响应拦截/","link":"","permalink":"http://yoursite.com/2018/04/05/前端路由拦截和http响应拦截/","excerpt":"","text":"问题由来最近在制作毕业设计的时候，遇到一个问题，那就是用户的访问控制。简单点来说，就是未登录用户只能访问某些特定的页面、API。最初我的想法是用户登录后返回一个凭证，用户以后的每次http请求都带上该凭证，进行验证，只有验证成功才能继续请求。然后在每个页面进行判断，如果用户是未登录或者凭证失效，则进行相应的提示和路由跳转。刚开始的时候，这个方法是完全可行的，但是在开发过程中，随着业务逻辑变得复杂、页面增多，重复代码太多，这样的方式也许并不合适。 如何解决首先是后端，我使用了jsonwebtoken，用户登录成功都会生成一个具有一定时效的 token，这个token会发回到客户端，并且接下来每次发起http请求，都在http头的authorization字段带上这个token。我这里使用了axios这个http请求库，只需要在拿到token后：1axios.defaults.headers.common.authorization = `Bearer $&#123;token&#125;`; 就可以了。 由于在开发过程中涉及到跨域，这里我使用CORS来解决：通过设置一系列Access-Control-Allow-*响应头进行访问控制，上面提到了在请求头的authorization字段中设置token，因此发出的请求都不是简单请求，所以注意在每次发起http请求时，就会自动发起一个OPTIONS请求。 我服务器端用的是Express框架，我们需要写一个中间件来处理每一个请求。处理逻辑为：针对每个OPTIONS请求，直接放行；对于某些请求，如果在白名单中(例如登录、注册等不需要验证的路由)，放行；对于其他请求，我们拿到其携带的token，并且进行验证，如果验证通过，放行，否则结束请求，返回未授权。具体的代码如下，这里我使用jsonwebtoken这个package，用于生成token和进行token验证。 123456789101112131415161718192021222324252627282930313233app.use((req, res, next) =&gt; &#123; console.log('methods' ,req.method); if( req.method === 'OPTIONS' ) &#123; console.log('option请求直接通过'); next(); &#125;else &#123; // 除去某些特定的API，其余的都做token的验证 let &#123; path &#125; = req; if(path === '/api/users/auth' || path === '/api/users/auth_vc' || path === '/api/users/check_id_validation' || path === '/api/users/regist' || path === '/api/users/send_reset_email' || path === '/api/users/reset_password' ) &#123; console.log('本次请求不需要验证权限'); next(); &#125;else &#123; const token = req.headers.authorization ? req.headers.authorization.split(' ')[1] : ''; req.token = token; jwt.verify(token, KEY, (err, decoded) =&gt; &#123; if(err) &#123; res.status(401).json(&#123; status: 3, error: '用户认证失败', data: '' &#125;) &#125;else &#123; console.log('验证权限通过'); req.decoded = decoded; next(); &#125; &#125;) &#125; &#125;&#125;) 然后是前端，我想如果能像后端拦截每个请求一样，写一个逻辑拦截所有的相应，并进行处理，信号，axios自带拦截器，我们只需要写我们的逻辑就可以了。我的想法是，拦截每一个相应，如果其状态码是401，那么久提示token失效，并且进行路由跳转。以vue-cli构建的应用为例，在main.js中，下面是实现： 1234567891011121314axios.interceptors.response.use(data =&gt; data, (error) =&gt; &#123; if(error.response) &#123; switch(error.response.status) &#123; case 401: &#123; localStorage.removeItem('token'); router.replace(&#123; path: '/auth', query: &#123;redirect: router.currentRoute.fullPath&#125; &#125;) &#125; &#125; &#125; return Promise.reject(error);&#125;) 值得说明的是，如果我们在某个访问的过程中，token失效，我们需要跳转到登录页面，但是想登录过后再跳转回来，所以这里在进行路由跳转的时候，我设置了一个参数, redirect，表示传入当前的路径，当我们登录成功后，在跳转回来即可。 最后是路由拦截，这里我使用了vue-router，其实vue-router的路由对象提供一个钩子函数beforeEach，其会在每一次路由跳转之前，执行这个函数，我们就在这里进行路由拦截。原理很简单，使用一个标志位标明每个路由是否需要用户权限，如果需要的话，我们检查保存在本地的凭证，一般存在localStorage中，如果不含凭证就直接跳转到登录页面。 好了，找到根路由文件，添加： router.beforeEach((to, from , next) =&gt; { if(to.matched.some(res =&gt; res.meta.requireAuth)) { if(localStorage.getItem('token')) { next(); }else { next({ path: '/auth', query: { redirect: to.fullPath } }) } }else { next(); } }) 这里要注意的是，res.meta.requireAuth是你自己在声明路由的时候自定义的。 总结差不多，这算是一个比较好的解决方案了。但是有这样一个情况：如果用户凭证有效期是1小时，那么如果我浏览网页超过一个小时了，凭证还是保存在本地的，当我们进行路由跳转的时候，并没有验证凭证是否失效，所以还是会进行路由跳转。这里不用担心，因为进入进入了一个路由后，一旦发起http请求，token失效，http相应拦截就会生效，进而跳转到登录页面。 加油！","categories":[],"tags":[{"name":"Vue","slug":"Vue","permalink":"http://yoursite.com/tags/Vue/"}]},{"title":"最近这段时间","slug":"最近这段时间","date":"2018-02-24T03:58:57.000Z","updated":"2018-07-29T05:38:18.000Z","comments":true,"path":"2018/02/24/最近这段时间/","link":"","permalink":"http://yoursite.com/2018/02/24/最近这段时间/","excerpt":"","text":"不知不觉，大学里最长也是最后的一个寒假就快要过完了，而学生生涯也要画上一个句号了，真的好快啊！ 还记得寒假带回来几本书，现在才开始翻看；本着要掌握的\b目标去学习Vue，然后现在才刚刚入门；信誓旦旦说要在家好好健身，\b\b\b虽说不规律，可总算是去做了，收效甚微；寒假总共“吃鸡”40小时，可总算成功吃鸡了。总之，最近(这个寒假)做了很多事，也下定\b了决心\b将要去做一些事。 那些做\b过的事 \b学习Vue及其技术栈，为毕业设计做准备 \b\b\b继续完善自己的Project \b钓鱼！钓鱼！！钓鱼！！！说三遍~ \b\b有些事情，向前迈出一步 不懈努力，成功\b“吃鸡” “吃鸡”与“吃到鸡”作为一名\b\b“吃鸡”萌新\b，标配夕阳红枪法，又是\b老年人\b视力，那肯定是\b行走的盒子精无疑啦。可是萌新也有大梦想，那就是吃一把鸡，\b为了\b这个目标，\b一直苦练\b枪法，\b终于吃鸡。\b既然如此，下一步目标是，\b\b\b打上2000分！就看时间允许不允许了😂 学习Vue毕竟一年多React经验的自信，所以毕设直接选了使用Vue来实现的一个App，那么理所当然的就要在寒假“补课”啦，\b官方教程半小时过一遍，\b再花1小时细细过一遍，OK不OK?ojbk！\b看完\b教程连个脚手架都搭建不出来！既然如此，\b还是视频大法好啊，看了\b差不过2\b个小时时间的基础教程，再配合上github上的开源项目，\b\b\b\b差不多get了吧。\b现在才感叹，\b当初学React的时候，真是费了好大的\b\b劲啊，光是Redux都够你喝一壶的了，最后悟出一个道理：珍爱生命，远离React😂 \b钓鱼，第一等大事\b\b\b我\b为什么那么喜欢钓鱼到现在还是一个未解之谜。我几岁的时候就开始钓鱼了\b，\b各种水域，各种鱼类都\b钓过，毫不夸张的说，我钓过的与鱼少说也是成千上万了吧。\b寒假一回来没有回老家就在农家乐钓过几次，\b\b\b太好钓了反而无聊。\b回老家的一个星期\b\b\b也钓了几次，\b总算\b过瘾了。\b以后夏天基本上没机会回家乡想想都可怕，\b只寄希望于春节少德可怜的假期能够撑起一个\b钓鱼爱好者的心啦~ 我的\b项目其实一直有在写\b一些简单的项目，脑子\b里想到的\b就要去\b试着实现，在学校一直在断断续续做一个关于想法的App，寒假无聊的时候也会一个点一个点\b去完善。\b但是\b\b倒霉的是，某个\b电脑管家竟然\b在清理垃圾的\b时候把这个\bproj删了，我还没提交到远程仓库呢，真是气死一个人，果断卸载！所以呢，找个时间\b得重新起航，也许到时候\b又会有新的点子呢~ 有些事情\b，得迈出一步其实这个故事是这样的：你一直暗恋一个女孩很久，\b\b\b\b在后来的某个\b时候，你向她表白，她接受了，可是后来由于各种原因虽不说天各一方但也\b没能走到一起。很多年过去了，你总会在某些特定的时候想起她，你还是忘不掉她。你\b决心不留遗憾，\b在某次\b很愉快的聊天的时候，话题突然一转，你问她：你有男朋友吗？她说：你猜~ 你\b回答\b：也许有，也许没有，一半一半吧。她沉默了好一会\b儿，才憋出几个字：有的哦，都出来上班那么久啦。外面的花花世界，不比得你学校。\b听到这个\b\b意料之中的答案，男孩心中说不出的感觉，\b对她说了最后一句：打扰了。其实男孩心中从最开始就知道，如果\b可以把\b\b人\b分类的话，他们从来都不是一类人，从最开始\b他们就走向\b了不同的十字路口。至于为什么\b时常回想起，他也不知道。\b他迈出了一步，解开了自己的心结。 那些将要做的事被逼无奈，我要学车\b今年回家过年，七大姑八大姨除了问你：找到工作了\b吗、有女朋友吗、成绩\b\b怎么\b样呢这样的问题以外，\b学没学车竟然也\b加入了进来，在他们看来，不会开车的人好像就不能生存以外，所以为了不被念叨，\b我决心\b要学车啦，就在\b\b接下来的三个月时间里\b搞定！ \b\b对，我要增重在外人眼里，我172\b\b的身高配上快140的体重是再好不过了的，不过我还是要增重，\b直到长到145，当然，这不是简单的增重而是增肌。所以，是时候努力了。 补课，然后大补考补一门大二未上的实验课，然后\b大补考挂掉的《形势政策》，然后毕业！ 技术上，\b继续除了继续在web开发领域继续摸索深耕以外，还有\b扩展自己的技术栈，\b接下来要把\b大数据、数据挖掘纳入我的技术栈。 其它比如\b一定要吃早饭、好好睡觉这种是肯定要做的，无论什么时候。 \b\b本来挺喜欢玩《炉石传说》的，可是这个版本\b快攻横行，打不过术士又没尘加入他们，所以暂时要放弃啦。最近在看两部番剧《紫罗兰永恒花园》和《比宇宙更远的地方》。\b最近在读一本书叫做《24个 比利》\b。就这样。","categories":[],"tags":[{"name":"杂谈","slug":"杂谈","permalink":"http://yoursite.com/tags/杂谈/"}]},{"title":"SQL参数化查询","slug":"SQL参数化查询","date":"2017-10-23T02:08:27.000Z","updated":"2017-10-23T05:34:10.000Z","comments":true,"path":"2017/10/23/SQL参数化查询/","link":"","permalink":"http://yoursite.com/2017/10/23/SQL参数化查询/","excerpt":"","text":"SQL注入想必是每个人都听过，其原理和XSS攻击很相似，都是把用户的输入当做程序去执行。防御办法也很类似，就是对用户的输入进行转义，但是同样转义十分麻烦，因为SQL注入攻击的方式和变种实在太多，转义需要考虑到的情况也复杂多变；而另外一种方式就是使用参数化查询–Prepared Statements。 SQL注入在先介绍参数化查询的时候我们先复习一下SQL注入，上面提到其原理是把用户的输入当做了SQL语句程序的一部分去执行，因为我们经常使用字符串拼接来构建SQL语句。 在这里开始演示一下(使用MySQL): 在我的数据库中我数据库中我建立了一个名为urls的表，其结构和数据如下： 123456789101112131415161718mysql&gt; desc urls;+-------------+------------------+------+-----+-------------------+----------------+| Field | Type | Null | Key | Default | Extra |+-------------+------------------+------+-----+-------------------+----------------+| id | int(11) unsigned | NO | PRI | NULL | auto_increment || url | varchar(255) | NO | | | || insert_time | timestamp | NO | | CURRENT_TIMESTAMP | || tid | bigint(20) | YES | | NULL | |+-------------+------------------+------+-----+-------------------+----------------+mysql&gt; select * from urls;+----+-----------------------+---------------------+------+| id | url | insert_time | tid |+----+-----------------------+---------------------+------+| 1 | http://www.limoer.cc | 0000-00-00 00:00:00 | NULL || 2 | http://baidu.com/news | 0000-00-00 00:00:00 | NULL || 3 | http://do.io | 0000-00-00 00:00:00 | NULL || 5 | http://github.iod | 0000-00-00 00:00:00 | NULL |+----+-----------------------+---------------------+------+ 该表有4字段并且有4条记录，现在我们如果想要查询id=1的那条记录，应该这样写:select * from urls where id=1。执行该条语句，正确返回结果，现在我们修改一下这条语句，改成：select * from urls where id=1 and 1=1,执行这条语句，同样没问题，返回结果正常；我们接下来再把and 改成 or再执行，结果出乎我们的意料，我们把所有的记录都查询了出来，id=1的限定条件失效了。至于如何导致其失效，是因为or后面的条件1=1是恒等的，所以前面的限定条件已经不重要了，and也是如此，我们想要获取正确的结果，那么and后面的限定条件必须要正确才可以。 说到这里，其实我们就已经进行了一次SQL注入的攻击，并且窃取了数据库的所有记录(更严重的删库、窃取管理员密码也很easy)！ 其实不光是上面演示到的使用and or来进行SQL注入，还有很多神奇的SQL语法让SQL注入有了可乘之机，例如我们常用的union等等。 解决办法如果我们把上面情景放在实际开发过程中，我们可能现在有一个输入框，用户可以输入任意一个数据来查看某条记录，服务端的SQL语句也许是这样的：select * from urls where id=${userInput}。如果某个淘气的用户不遵守约定输入了非数字，例如10 or 1=1，SQL语句拼接过后就成了这样:select * from urls where id=10 or 1=1，表中的信息一次被完全暴露！ 针对上面的情况，我最想想到的不是转义输入也不是使用参数化查询，而是针对本问题，我们直接对其进行输入验证即可，既然其必须限定用户输入数字，那么在进行SQL拼接之前，对用户输入进行验证即可！ 例如，在Node.js环境下，我们可以使用parseInt(userInput)就可以完成对用户输入进行强制性的验证。 第二种也就是最常用的解决办法就是转义，和防御XSS攻击一样，我们需要构建用于转义的函数，对用户的输入进行转义，还是上面的那个例子：1select * from urls where `id`= $&#123;id&#125;; 如果用户输入1 or 1=1，那么毫无疑问将会导致一次非常严重的SQL注入攻击，现在假设我们已经写好了我们的转义函数escape，我们只需要在进行字符串拼接之前，做一次转义即可。 例如对于用户的输入1 or 1=1经过转义后变成了&#39;1 or 1=1&#39;，经过SQL拼接过后则变成了:1select * from urls where `id`='1 or 1=1'; 不出意外，我们得到了正确的结果。 关于转义函数escape如何实现，这里就不不再多说，很多数据库的驱动工具都带有相应的工具函数，我们在实际开发过程中一定要注意对用户的输入进行转义，来避免SQL注入攻击；当然，如果你使用参数化查询的话，就完全没有必要了。 参数化查询最开始提到参数化查询的时候，我提到了Prepared Statements也就是预处理语句，其实我们可以把参数化查询理解为预处理，我们把完整的一次SQL查询分成两部分，第一步是预先查询，第二步使用参数得到结果。具体该怎么理解呢，还是接着上面的那个例子，现在我们使用参数化查询执行select * from urls where id=1。其分为两步，第一步执行select * from urls where id=?，注意这里的?，其实代表了未来将要传入的参数；第二步，传入用户的输入作为具体的id值，并且输出结果。这里要注意，因为执行完第一步的时候期待第二步传入的是一个用户的id(这里必须是数字)，这时候用户传入的非法输入就不会生效，这也就从根本上杜绝了了SQL注入攻击。 好了，参数化查询(预处理)可以完全避免SQL注入，其还有其他的优点例如更加可读(相比于字符串拼接)，多次查询性能会有提升(因为会对预处理语句进行缓存再利用)等。 说了这么多，那么如何使用参数化查询呢？很简单，使用一个支持该特性的数据库连接工具就可以了，比如我们下面要演示的Node环境下MySQL的参数化查询。 Demo我们在Node环境下进行演示，首先通过npm install mysql2命令安装数据库连接工具，这里是mysql2,能够支持参数化查询。 如下： 12345678910111213141516171819202122232425262728293031const mysql2 = require('mysql2');const conn = mysql2.createConnection(&#123; host: 'localhost', user: 'admin', password: '123', database: 'news'&#125;);// 不使用任何防护手段(将导致SQL注入攻击)const userInput = '1 or 1=1';conn.query( `select * from urls where id=$&#123;userInput&#125;`, (err, result) =&gt; &#123; console.log(result); &#125;);// 使用转义(这里默认进行了转义)conn.query( 'select * from urls where `id`=?', ['1 or 1=1'], (err, result) =&gt; &#123; console.log(result); &#125;);// 使用参数化查询conn.execute( 'select * from urls where `id`=?', ['1 or 1=1'], (err, result, fields) =&gt; &#123; console.log(result); &#125;); 尾巴关于SQL注入和参数化查询就介绍到这里，如果你觉得参数化查询两步走我说得并不明确，你可以使用抓包工具来加深理解；还有最后的Demo，其实query和execute的区别就是一个支持了参数化查询而另外一个不支持；如果你运行Demo，仔细看，区别就藏在里面(Tips：B &amp; T)；最后，请总是使用参数化查询！","categories":[],"tags":[]},{"title":"我的应聘经历(不断更新中...)","slug":"我的应聘经历-不断更新中","date":"2017-09-20T08:28:15.000Z","updated":"2018-07-29T05:36:46.000Z","comments":true,"path":"2017/09/20/我的应聘经历-不断更新中/","link":"","permalink":"http://yoursite.com/2017/09/20/我的应聘经历-不断更新中/","excerpt":"","text":"只有在写简历的时候才会明白，真后悔自己平凡的大学四年，没有拔尖的学习成绩、没有丰富的实践经历、也没有牛X的技术，对于大牛而言，自己就是简历收割机，而对于我而言…好吧，如果谁能看得上我，管吃管住就行！可是，时间没有倒带，不会从头再来/感慨。 概括 从8月开始到如今一个多月过去了，简历虽不是海投但还是投了有数十家，除去没有参加笔试的，剩下通过笔试拿到面试的就更少了，接下来我好好回顾一下，算是一个小小的总结吧，虽然到目前还没有找到工作… 某测(通信测试行业)经历： 这是校招来学校宣讲的第一家企业，很小型的宣讲会，参会人数不多；在简单的介绍企业过后，就直接现场笔试。吐槽下笔试题，融合了C++/前端/智力测试的一张综合试卷，难度不大，我花15分钟做完了试卷上前端相关的试题就离开了，一个小时后就收到通知当天下午面试得通知。 面试(时间50分钟)： 面试也安排的特别简单，二面一，连自我介绍都没有(害得我准备好久…)。问题主要有以下几个： 你了解通信测试行业吗？ 你觉得本公司适合你吗？ 这里的时候我直接问了他几个问题然后做出判断，我们都觉得不适合 你期待的工作方式？ 构思以下结合公司实际谈了谈数据可视化 数据挖掘相关知识。 基本的分类、聚类算法，分词等。 给我的建议。 推荐我要有自己的想法，最好选择互联网公司，并且赞了我字写得比较好(谢谢！)。 某某网络(初创互联网公司)经历： 来自于知乎大牛的推荐，一家自认为小而美的公司！投递简历差不多一个月才进行电话面试。面试时间也真是会挑，早上8点过就打来电话(幸好每天都早起！)，大概谈了超过一个小时，到目前为止仍然在等结果。 面试： 面试官大概是在上班路上给我打的电话，电话那头有点吵。面试流程也比较常规，自我介绍，介绍项目，目前在做的事，有关于React及其技术栈。当然还包括面试官对公司的介绍，要求我谈对公司发展的看法；后面又聊了前端开发的潮流；有关于SSR、SPA等。最后告诉了我他们公司前端开发团队的现状(规模很小！)，问我如何看待，特别是如何快速的融入和承担起相应的责任。 总结： 当了解了他们正在做的事情的时候，我觉得这就是我想要加入的公司。我喜欢小而美的公司！面试过程十分愉快，虽说是等通知但是都快一周了还是没有音讯，大概是挂了吧~ 某家网(卖房的？)经历： 就在中午临时决定去试一试，幸好赶上校车去了宣讲现场。宣讲过程中真的能够感受到这是一家非常了不起和大牛聚集的地方。宣讲完直接笔试，笔试后就等面试通知咯。晚上接到面试通知，第二天在某某咖啡馆参加了面试，最终是倒在终面前。 笔试： 难度四星，10题全算法，对于数据结构和算法没掌握好的同学就是煎熬，我花了一个半小时做完了自己会做的题目，然后还是错过了一家不错企业面试的机会/哭。 面试： 一面一上来就是自我介绍，随便问问。然后十题算法挨个回顾，并且面试官对每道题进行打分(自己得了好多零！)，然后一面结束，等通知。 二面已经是下午了，前端方向就我一个人，所以聊了比较久，一个半小时。面试过程中主要聊了： Java和JavaScript的特性(被我引入了我喜欢JS而不喜欢Java的怪圈…) 做过最酷的项目(介绍了一下正在开发的视频编辑器) 从架构角度谈某个数据平台(简历上提到)的建立和开发过程 如何做情感分析(数据挖掘方面) 提问环节 吐槽： 在面完二面后又是等通知，十分钟后我去问通过了吗，然后HR小姐姐告诉了过了，等待三面，我当时的那颗心啊，真的高兴，以为自己就要进入这家感觉十分良好的企业了！结果过了几分钟，HR姐姐给我说我没过，然后这就尴尬了😓。总的来说，本次面试的体验还是不错的(主要是中午管饭了！)。 某有(b2b)经历： 很早很早就投了简历，并且做完测评等着来软件园宣讲。真的到了那一天去现场一看，人真的多！短暂的企业介绍后，就开始了笔试(分前端、Java、基础三套试卷)。结果由于弄错试卷做了前端、基础两套。试卷难度不大，但都是十分容易出错的地方。晚上收到通知，第二天面试。面试过程非常愉快，上午面完下午HR就打来电话说通过了，然后我说考虑一下，最终开始放弃了到手的offer(说好的就去第一家能看上你的公司呢！)，到现在好几天了，我有点后悔自己做的决定。 面试： 面试官应该是管理层，年龄40+，基本不问技术方面，谈谈项目，谈谈个人经历，再结合职业测评问问就完了。二面HR问了问家庭状况，是否考研，以及如何看待将要在工作中遇到的一些问题，后面又问道期待薪资(最大的败笔)，然后就结束了。 总结：后悔 X N!!! 还有很多…但是…不知不觉半个月又过去了，期间不间断的参加过很多公司的招聘，但始终没能更进一步。有些时候晚上睡不着觉，就在想，到底是哪里出了问题，没抓住机遇？实力不够？表现不好？… 我不知道。 可是，就在今天，我暂时不用去为自己的将来而担忧，能够有时间去做自己想要去做的事，能够静下心来提升自己。所以，我愉快的做了决定，好比平时做决定那样–洒脱？。 我打电话通知了家人，以往不想让我离家太远的母亲也很高兴，至少无论他们口头上怎么反对我去外地工作，可真当找到工作后，无论在哪里，只有一如既往的支持。 我认为我就是一个平庸(凡？)的人，我每天会花时间在打游戏娱乐上，我也会时不时睡睡懒觉，天气冷了我可能更多的会宅在宿舍。 尾巴里面提到我不会错过第二家看上我的公司，但是我也食言了，可是我真的不会再错过这一个机会了。我准备好来年在人生的下一站，开启我的程序猿人生了。","categories":[],"tags":[{"name":"杂谈","slug":"杂谈","permalink":"http://yoursite.com/tags/杂谈/"}]},{"title":"使用react-transition-group实现路由切换动画","slug":"使用react-transition-group实现路由切换动画","date":"2017-09-01T01:14:52.000Z","updated":"2017-09-01T02:35:14.000Z","comments":true,"path":"2017/09/01/使用react-transition-group实现路由切换动画/","link":"","permalink":"http://yoursite.com/2017/09/01/使用react-transition-group实现路由切换动画/","excerpt":"","text":"我们在使用React开发SPA的时候，使用react-router可以完成路由切换，但是这样路由切换是非常生硬的。有什么解决办法呢？我们可以使用react-transition-group来实现自定义的路由切换效果。 需要注意的是react-transition-group目前有两个版本，v1和v2版本的差距十分巨大，本教程使用的是最新的V2版本，你可以使用npm install --save react-transition-group来安装，如果想安装v1版本，则只需使用npm install --save react-transition-group@1.x命令即可。 react-transition-group主要提供三个组件Transition、TransitionGroup、CSSTransition。从名字当中我们知道TransitionGroup作为一个容器组件，而其它两个组件才是实现动画的关键。这里我只介绍CSSTransition如何使用以及其注意的点。如需了解更多react-transition-group,请查看官方文档。 CSSTransition这个组件主要是使用css来控制组件的转场。它使用了在缓动中appear、enter、exit的三个状态，并且提供钩子类让我们自定义效果。 我们常用到的类有： .className-enter .className-enter.className-enter-active .className-exit .className-exit.className-exit-active 这里className是你自定义动画的名称，和V1版本大体相同的钩子类，只不过把leave改成了更加语义化的exit，这里需要注意。 CSSTransition有多个十分重要的属性： classNames属性接收一个字符串类名，注意这里是classNames而不是className。 timeout用于规定动画执行的时间，如果enter和exit的持续时间相同的话可以使用timeout={number}即可，如果持续时间不一样，则timeout接收一个字典,两个键分别是enter和exit。 其他参数例如onEnter、onExit你可以自定义逻辑在动画进行到某个阶段后触发。 动画进行的阶段：enter-&gt;entering-&gt;entered-&gt;exit-&gt;exiting-&gt;exited。 例子123456789101112131415161718192021222324252627282930let App = () =&gt; ( &lt;BrowserRouter&gt; &lt;Route render=&#123;(&#123;location&#125;) =&gt; &#123; return &lt;div&gt; &lt;Route exact path=\"/\" render=&#123;() =&gt; ( &lt;Redirect to=\"/home\"/&gt; )&#125;/&gt; &lt;TransitionGroup&gt; &lt;CSSTransition key=&#123;location.pathname.split('/')[1]&#125; classNames=\"transitionWrapper\" // 这里一定要注意的是：classNames 而不是className timeout=&#123;400&#125; mountOnEnter=&#123;true&#125; unmountOnExit=&#123;true&#125; &gt; &lt;div className=\"wrapper\"&gt; &lt;Switch location=&#123;location&#125;&gt; &lt;Route exact path=\"/home\" component=&#123;Home&#125;/&gt; &lt;Route path=\"/inspiration\" render=&#123;() =&gt;&lt;NavLink style=&#123;&#123;marginRight: '20px', marginLeft: '20px'&#125;&#125; to=\"/home\"&gt;HOME&lt;/NavLink&gt; &#125;/&gt; &lt;Route path=\"/mood\" render=&#123;() =&gt; &lt;h1&gt;this is page3 mood!&lt;/h1&gt;&#125;/&gt; &lt;/Switch&gt; &lt;/div&gt; &lt;/CSSTransition&gt; &lt;/TransitionGroup&gt; &lt;/div&gt; &#125;&#125;/&gt; &lt;/BrowserRouter&gt;);","categories":[],"tags":[{"name":"React","slug":"React","permalink":"http://yoursite.com/tags/React/"}]},{"title":"使用antd和css-modules冲突的解决办法","slug":"使用antd和css-modules冲突的解决办法","date":"2017-08-28T13:29:03.000Z","updated":"2017-11-04T14:15:48.000Z","comments":true,"path":"2017/08/28/使用antd和css-modules冲突的解决办法/","link":"","permalink":"http://yoursite.com/2017/08/28/使用antd和css-modules冲突的解决办法/","excerpt":"","text":"在暑假做项目实训的时候前端就使用到React构建并且使用了Ant Design作为组件库，当时就使用了extract-text-webpack-plugin把css单独抽离出来成为一个单独的css文件并引入，当时就遇到一个问题，当我使用css-loader来处理css时，并不能处理自定义的css，但是我把CSS直接写进组件中是可行的，由于当时项目比较小并且时间比较赶，就直接使用了这种方式，在开发过程中也有苦说不清，但总算是完成了。 最近想写一点东西，又用到antd了，当然是相同的问题，只不过时过境迁，我有足够多的时间来处理这个遗留下来的问题。可是即使有那么多的时间，可是还是踩坑无数，最终还是完成了。相信遇到这个问题的并不止我一个人，这里就先记录下来，希望能对你有所帮助。 解决办法经过查询和思考，解决这样的问题最好是单独处理antdCSS和自定义的CSS。好了问题解决办法已经很明显了，我们需要些两个不同的规则来出来css，就像这样：12345678910111213141516...&#123; test: /\\.css$/, use: ExtractTextPlugin.extract(&#123; use: 'css-loader' &#125;)&#125;,&#123; test: /\\.css$/, exclude: /node_modules/, use: 'css-loader'&#125;,...plugins: [ new ExtractTextPlugin('style.css')] 上面的代码我建立了两规则分别处理自定义css和antd 预定义css，我们可以正常的使用import &#39;./style.css&#39;的形式引入css，但是我们查看页面，并没有加载我们自定义的css。 好吧，既然这样再试试css-modules的方式算了，我们把第二个规则改成下面这样：123456789101112...&#123; test: /\\.css$/, exclude: /node_modules/, use: [ loader:'css-loader', options: &#123; modules: true, localIndentName: '[local]--[hash:base64:5]' &#125; ]&#125; 现在我们可以通过import style from &#39;./style.css&#39;的形式引入自定义css，并且通过style.className的形式给元素设置类。这次倒好，直接build不成功了，我一气之下索性不搞了；为了继续捣鼓下去，我直接又把CSS写在组件中了，直到我要使用react-transition-group来做路由切换动画，不得不倒回来解决。这次比以往更加冷静，我仔细阅读了extract-text-webpack-plugin的readme过后，恍然大悟，原来我们可以在一个项目中使用多个ExtractTextPlugin实例来生成多个css文件！好了，这次还是通过两个规则处理css，并且构建两个css文件，一个是自定义的css，一个是antd css，问题迎刃而解，又可以开心的捣鼓了！ 好了，show you the code!:1234567891011121314151617181920212223242526272829303132333435363738394041const ExtractTextPlugin = require('extract-text-webpack-plugin');const extractANTDCSS = new ExtractTextPlugin('[name]-antd.css');const extractNormalCSS = new ExtractTextPlugin('[name]-normal.css');module.exports = &#123; ... module:&#123; rules: [ &#123; test: /\\.css$/, include: /node_modules/, loader: extractANTDCSS.extract(&#123; fallback: 'style-loader', use: [&#123; loader: 'css-loader', options: &#123;modules: false&#125; &#125;] &#125;) &#125;, &#123; test: /\\.css$/, exclude: /node_modules/, use: extractNormalCSS.extract(&#123; fallback: 'style-loader', use: [&#123; loader: 'css-loader', options: &#123; modules: true, localIndentName: '[local]--[hash:base64:5]' &#125; &#125;] &#125;) &#125; ] &#125;, plugins: [ extractANTDCSS, extractNormalCSS, ... ]&#125; 以上的两个loader会生成两个css文件，分别是vendor-antd.css和main-normal.css，我们只需要在正确的位置引入这两个css文件就好了！ 尾巴我在前面提到我把CSS直接写在元素/组件的style标签中，其实这种方式实不可取的，它会让你在编码和代码review中苦不堪言，因为一旦项目变得很大，当你想修改某个样式的时候，花在定位CSS的时间是非常多的；并且，可读性和可复用性也会大打折扣；而且我们经常在写样式的过程中使用的各种选择器、伪类、伪元素都无法发挥其灵活的作用。所以，无论你是以何种方式写前端，请尽量不以这种方式写CSS。 当然，我们也要从性能上去考虑。因为css是在页面解析正式前就加载好了的(写在header)里面，在我们再解析页面的时候，加载速度就会变得更快；再有，如果我们使用把CSS写在组件中后，无可避免的会产生更多的重绘和回流，这会严重影响渲染性能。比如我们使用JS修改我们在style属性中标明的样式，那么必然会触发一次repaint。 好了，到此打住！如果你想学习reflow和repaint，点击这里，也许会帮助你！","categories":[],"tags":[{"name":"React","slug":"React","permalink":"http://yoursite.com/tags/React/"}]},{"title":"Three.js","slug":"three-js","date":"2017-08-24T07:44:03.000Z","updated":"2017-11-04T14:29:02.000Z","comments":true,"path":"2017/08/24/three-js/","link":"","permalink":"http://yoursite.com/2017/08/24/three-js/","excerpt":"","text":"最近貌似Node又有了新的fork ayo.js(怎么读！哎呦？)，加之前端一不留神就出框架的节奏，在2016年就开始用Next(wtf！你能看出来其是一个前端框架？)来命名，以后恐怕就得future.js、plus.js的节奏…贵圈真乱啊！ 当然当然，这和我们今天的主角three.js并没有太大的关系，比起这些看了名字不知所云的xxx.js，Three.js这个就和明显了，其是一个3d JavaScript库，更准确的说是用JavaScript编写的WebGL三方库，那么什么是WebGL呢？这个我不解释，有兴趣的小伙伴可以去探索。 作为我最想学却一直学不会的技术之一，WebGL的确对于大部分的前端猿们来说有些复杂和繁琐了，早些时候我花了大量的时间去啃API，学习如何使用，可到目前脑子还是一团乱麻。既然这样的话，我们得另辟蹊径，不能因为有困难就放弃学习不是！所以我了解到了Three.js，其化繁为简，做同样的事，其只需要少于1/5的代码量就可以完成，并且API也十分通俗易懂，学习难度降低了不少，可以让我们关注使用WebGL创造而不是痛苦的学习和编码。 如果你还不理解WebGL是什么，这是官方文档上的原话： WebGL (Web Graphics Library) is a JavaScript API for rendering interactive 3D and 2D graphics within any compatible web browser without the use of plug-ins. WebGL does so by introducing an API that closely conforms to OpenGL ES 2.0 that can be used in HTML5 canvas elements. 如果你对Three.js比较有兴趣的话可以直接进去官网，其中首页展示了很多featured projects，个人比较喜欢这个Paper Planes。 你也可以去gayhub把Three.js代码download下来，里面有很多很多(大约几百个例子)可供学习，当然如果你想学习Three.js，来百度云下载，这是目前少有的全方面介绍Three.js的书籍。 好了，差不多介绍完该跑了。但是我好想发现了我竟然连副标题都没取，好吧，还是再多讲一会儿，为了彰显Three.js的简单易用的特性，我讲决定再写一个全面但是简单的例子，并且配上必要的讲解。 例子？不存在的！这是一个很小的例子，它将会展示Three.js使用流程，并且是经过测试没有错误(也许有！)，请放心食用。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf8\"&gt; &lt;title&gt;使用Three.js&lt;/title&gt; &lt;script src='./three.js'&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=\"three-container\"&gt;&lt;/div&gt; &lt;script type='text/javascript'&gt; // three.js中有几个非常重要的知识点，为了构成一个3D程序，我们至少需要以下几部分。 // 1. Scene 场景，用于承载一些必要元素 let scene = new THREE.Scene(); // 2. Camera 相机(此相机非你想的那个相机哦！) // Three.js中提供了两种相机，透视相机和正交相机，这里使用的是透视相机(类似于人眼看到的) let camera = new THREE.PerspectiveCamera(60, window.innerWidth/window.innerWidth, 1, 1000); camera.position.set(-20, 40, 20); // 3. renderer 渲染器， 也可以在canvas中渲染，但是复杂场景可能有性能问题 let renderer = new THREE.WebGLRenderer(); renderer.setClearColor(0x708090); renderer.setSize(window.innerWidth, window.innerHeight); renderer.shadowMapEnabled = true; // 4. 物体 let cubegeo = new THREE.CubeGeometry(10, 10, 10); // 5. 材质 用于物体表面，不同材质包含不同特性，可设置颜色等。 let material = new THREE.MeshLambertMaterial(&#123; color: 0xffffff &#125;); // 组合物体与材质成为一个网格 let cube = new THREE.Mesh(cubegeo, material); // 设置物体能够产生光源阴影 cube.castShadow = true; scene.add(cube); // 6. 光源 Three.js中存在多种光源 let light = new THREE.SpotLight(0xfffff); light.position.set(-30, 40, -20); light.castShadow = true; scene.add(light); // 设置相机看向场景远点(空间坐标系原点) camera.lookAt(scene.position); // 添加到HTML中 document.getElementById('three-container').appendChild(renderer.domElement); // 为了更加直观，这里设置一下空间坐标系 let axes = new THREE.AxisHelper(30); scene.add(axes); // 动起来吧！添加动画 function animation() &#123; // 比如移动转动方块， 这里设置在x、y轴转动平面 cube.rotation.x += 0.1; cube.rotation.y += 0.1; requestAnimationFrame(animation); renderer.render(scene, camera); &#125; requestAnimationFrame(animation); &lt;/script&gt; &lt;/body&gt;&lt;/html&gt; 尾巴即使是这样一个简单的例子，我如今也没有办法在不参考官方文档的情况下一口气写下来，原因无非在于，虽然其简化了开发，但是概念还是偏多并且需要记住每个API也是在有难度。 但是，如果我们能够十分清楚的理解制作3D应用的流程，至少是使用Three.js的流程，按照流程十分有条理的写下去，代码总归是十分清晰的。 time waiting for no one，这是我最近在看《穿越时空的少女》看到的。对啊，时间不等人，珍惜好为说不多的’自由’而’枯燥’的时间吧！","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://yoursite.com/tags/JavaScript/"}]},{"title":"从Decorator到Mobx","slug":"从decorator到Mobx","date":"2017-08-02T06:03:25.000Z","updated":"2017-08-07T02:13:56.000Z","comments":true,"path":"2017/08/02/从decorator到Mobx/","link":"","permalink":"http://yoursite.com/2017/08/02/从decorator到Mobx/","excerpt":"","text":"最近在开发一款视频编辑器，其中就用到了Mobx作为状态管理工具。Mobx中很重要的概念例如可观察(observable)的状态，可计算(computed)的值都用到了decorator(当然在使用Mobx时可以不用)。Decorator作为ES7引入的新特性，用于给类/属性添加新行为。对于不少初学者而言，可能对其并不是很了解，所以在这里从装饰器开始，聊聊我对Decorator和Mobx的理解。如果你正在学习Mobx，希望能对你快速上手Mobx能有所帮助。 先说装饰器(Decorator)装饰器是ES7中引入的，其目的在于修改类/方法的行为。例如我们可以在不修改“类”的情况下为其增加新的功能。 例如：我们定义了一个学生“类”，其中有name，age两个属性，以及showInfo一个方法。 123456789class Student &#123; constructor(name, age) &#123; this.name = name; this.age = age; &#125; showInfo = () =&gt; &#123; console.log(`name:$&#123;this.name&#125;, age: $&#123;this.age&#125;`) &#125;&#125; 如果此时我们想为这个类添加一个属性school用于标明学校，，在不修改“类”的情况下，我们可以使用装饰器这么做： 1234567891011121314151617function addSchool(target) &#123; target.prototype.school = 'SDU';&#125;@addIdclass Student &#123; // ...&#125;/** @decorator class A&#123;&#125; 等价于 A = decorator(A);*/let limoer = new Student('limoer', 21);console.log(limoer.school); // &gt; SDU addSchool()给Student“类”的原型对象上添加了一个属性，现在所有实例都可以取到school这个属性。 更深入一步，上面看到用于装饰的函数只接收一个目标“类”作为参数，如果我们有多个参数的话，可以写成高阶函数的形式(即返回一个函数)。同样是上面的例子，现在学校由参数指定，我们可以这样写： 12345678910111213function addSchool(school_name) &#123; return function(target) &#123; target.prototype.school = school_name; &#125;&#125; @addSchool('CQMU')class Student &#123; // ...&#125;let lin = new Student('lin', 20);console.log(lin.school); // &gt; CQMU 装饰器不但可以装饰“类”，也可以对方法(…属性)进行修饰，使用的方式类似于对“类”的修饰，不过用于修饰的函数接收三个参数,target将要被修饰的对象, name被修饰的属性名, descriptor被修饰的属性的描述对象(ES5中详细介绍过)。 写一个简单的例子： 12345678910111213141516171819202122function showCount(target, name, descriptor) &#123; let prev = descriptor.value; descriptor.value = function() &#123; console.log('count:' + StudentList.list.length); prev.call(null, arguments); &#125; return descriptor;&#125;class StudentList &#123; static list = ['limoer', 'lin']; @showCount showNames () &#123; console.log(StudentList.list.join(' ')); &#125;&#125;let list = new StudentList();list.showNames(); // count:2 \\n limoer lin 上面的代码给StudentList类的showNames方法添加了打印数量的功能，并且是在不改变原有“类”结构的情况下。 说明，在现有的浏览器环境和Node都不能运行上面的代码(暂不支持装饰器)，如果想运行的话，可以借用babel 并且使用相关插件(babel-plugin-transform-decorators-legacy)的前提下进行compile，之后就可以进行了。推荐开发过程中webpack和babel结合使用，效果更佳！ 好了，关于Decorator简单介绍到此到一段落，更多的相关知识请自行发掘和学习。接下来，是时候了解并使用Mobx了！ Mobx？想说爱你不容易！在文章最开头谈到我在最近的学习开发中使用了Mobx作为状态管理工具，最主要的原因是其相比Redux，学习和快速上手成本的确消了很多，并且它足够简单。但是在后来的开发过程中，虽然其可以没有redux中action，也不存在reducer，更是告别了单一而庞大的store，我们可以定义多个state用于保存状态，让每个状态或者是每个类属性添加注解，让其编程可观察的状态，而为了能够自动的更新值，我们可以通过使用computed这个装饰器或者autorun函数来完成。可是，在使用过程中，定义多少个状态，每个状态的结构又是如何，等等等等，都困扰着我，远没有使用redux来得清晰和直观。这也许是因为我对mobx目前刚好达到基本使用的程度，并没有深入的了解。基于此，接下来，我只谈谈Mobx入门，至于该如何优雅的使用，请自行摸索。 几个概念 可观察的状态 这也许是Mobx最基础也是最重要的概念了。我们可以使用Mobx提供的observable装饰器，让基本的数据结构(数组、对象、原始值等)变成可观察的。使用的方式如下： 12345678910let TimeState = observable(&#123; currentTime: Date.now()&#125;)TimeState.set(\"currentTime\", new Date().toString());class AppState &#123; @observable list = ['limoer', 'lin'];&#125;let state = new AppState();console.log(state.list.length); // &gt; 2 好了，最简单的例子就是这样，我们使用ES5和ES6 decorator的方式分别创建了两个state，第一个state我们适应装饰器让一个对象(Map)变得可观察，而第二个我们则是对一个“类”属性(为一个数组)进行了修饰，让其变成可观察的。 这里值得注意的是，如果一个数据结构变得可观察，那么其类型也会发生改变，例如我们让一个数据变得可观察，此时其已经变成了一个 Observable Array， 这是一种Mobx定义的数据结构，拥有其独特的API，此时使用Array.isArray(state.list)讲返回false，因为Observable Array 并不是一种数组类型。 好了，当看到这里，你是否有这样一个疑问：让一个数据结构变得可观察，其作用到底在哪里呢？其实很简单，我们都知道Mobx是React的小伙伴，其目的是在于替换React本身的state，我们都知道对于React而言，如果一旦state发生改变，就将导致页面更新并且重新渲染，基于此，让数据结构变得可观察，其目的是在于当被观察的数据发生改变，React也能做出相应的更新和重绘操作等，并且，这样的重绘是经过Mobx优化的，只进行必要的重绘来增加性能！ 可计算值 可计算值是通过现有状态和其它可计算值派生出来的值。这很好理解，我们在使用React的时候，往往要通过state衍生出很多的值，例如如果state的一部分是一个数组，那么我们通过衍生得到的数组长度就是一个计算值，并且在Mobx中，一旦可观察的state或者其他computed value 发生改变，可计算值就会重新计算。其实，在实际的React项目中，我们在很多地方都使用到了计算值。 还是上面AppState的例子，现在我们给其增加一个计算值， 12345678910class AppState &#123; @observable list = ['limoer', 'lin']; @computed get count() &#123; return this.list.length; &#125;&#125;let state = new AppState();console.log(state.count); // &gt; 2state.list.push('lindo');console.log(state.count); // &gt; 3 count是一个计算值，一旦list发生变化，其就会自动重新计算，可以保证，count的值每次都是最新的，并且都是等于list数组的长度。 autorun 其作用和函数名一样好理解，其会自动执行；autorun其本身是一个响应式函数，其使用到的依赖关系state/computed value等一旦发生改变，其就会自动执行一次，效果和计算值类似，但是计算值和autorun的应用场景是不一样的，computed value通常会产生一个新值而autorun达到某种目的而不产生新值，例如生成日志，处理网络请求等。还是上面的例子，我们继续扩展： 1234class AppState &#123; // ...省略前面的代码 let logcount = autorun(() =&gt; &#123;console.log('count: ' + this.count)&#125;);&#125; 这里我们在autorun中使用了computed value， 一旦发生count改变，就会自动打印出新的count值；当然，初始化state实例对象的时候，就会先执行一次。 action 动作是用来修改状态的。并且只应该对修改状态的函数使用action，要使用动作很简单，使用@action修饰一个函数或者使用action(fn)，把要修饰的函数作为参数即可。继续上面的例子：12345678910111213class AppState &#123; // 省略上面的代码 @action.bound addOne(name) &#123; this.list.push(name); &#125; // 或者 @action addOne = (name) =&gt; &#123; this.list.push(name); &#125;&#125; 上面我们定义了一个函数，用于向列表中添加一个姓名。请注意，ES6 class的写法无法自动绑定到对象，所以使用`@action.bound` 或者是使用ES6中引入的箭头函数(推荐)。 与React使用 observerobserver是由mobx-react包(需独立安装)提供的用于让组件变成响应式组件的decorator。官方文档中写到：它用 mobx.autorun 包装了组件的 render 函数以确保任何组件渲染中使用的数据变化时都可以强制刷新组件。 123456789101112131415161718192021222324252627282930313233import React, &#123; Component &#125; from 'react';import &#123; render &#125; from 'react-dom';// 其余依赖省略@observerclass NameList extends Component &#123; addUser = (e) =&gt; &#123; e.preventDefault(); if(this.uname.value)&#123; this.props.appstate.addOne(this.uname.value); &#125;else&#123; console.log('must input user name!'); &#125; &#125; render() &#123; return &lt;div&gt; &lt;ul&gt; &#123; this.props.appstate.list.map((index, name) =&gt; &#123; return &lt;li key=&#123;index + 10&#125;&gt;&#123;name&#125;&lt;/li&gt; &#125;) &#125; &lt;/ul&gt; &lt;div&gt; &lt;p&gt;当前用户人数：&#123;this.props.appstate.count&#125;&lt;/p&gt; &lt;label for=\"uname\"&gt;姓名&lt;/label&gt; &lt;input type=\"text\" name=\"uname\" ref=&#123;(ref) =&gt; this.uname = ref&#125;/&gt; &lt;button onClick=&#123;this.addUser&#125;&gt;+&lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &#125;&#125;render(&lt;NameList appstate=&#123;appstate&#125; /&gt;, document.getElementById('app')); 上面是一个响应式组件的例子，结合了上面定义的状态，我们可以查看所有的姓名、数量，并且可以通过点击按钮来改变state。其实observer对非响应式组件仍然有效，同样是上面的例子： 1234567const List = observer((&#123;appstate&#125;) =&gt; &#123; return &lt;ul&gt; appstate.list.map((index, name) =&gt; &#123; return &lt;li key=&#123;index + 19&#125;&gt;&#123;name&#125;&lt;/li&gt; &#125;) &lt;/ul&gt;&#125;) 好了，对于observer的介绍就告一段落，更多的Mobx和React连接的方式，以及Mobx提供的生命钩子函数等相关知识你可以查看官方文档来了解。 尾巴 自从放了暑假回了家，效率下降特别多，在学校的时候以为回家可以安心学习，到了家才知道一切都变了，该做的事情还没做，还有更多的知识要学习。所以，早早回学校也许是一个不错的选择！所以再过几天，就要启程回学校了，在最后一年里，期待所有的努力都没有白费，期待一个新(好)的开始！","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://yoursite.com/tags/JavaScript/"}]},{"title":"响应式布局的那些事","slug":"响应式布局的那些事","date":"2017-07-31T10:16:53.000Z","updated":"2017-07-31T13:14:00.000Z","comments":true,"path":"2017/07/31/响应式布局的那些事/","link":"","permalink":"http://yoursite.com/2017/07/31/响应式布局的那些事/","excerpt":"","text":"响应式设计在如今的web开发过程中已经是必不可少，它可以针对不同的设备环境对页面进行调整，并且可以在PC端和移动端达到很好效果的情况下，不用开发多套页面，可以提升开发速度，可维护性打打增强。 响应式布局响应式布局的一种实现方式的原理是使用CSS3新引入的Media Query来调整元素在不同分辨率下的显示效果，并且通过JavaScript进行交互。总结起来，响应式布局有以下几个需要注意的点： 设置Viewport 我们知道，在移动设备中，页面被放置在虚拟的窗口中，这个窗口也称作视口(Viewport),对于未进行移动端适配或者是未进行响应式设计的页面，往往页面的宽高都会大于移动设备的宽高，所以为了能够在移动设备上进行页面交互，缩放是不可避免的，但是频繁的放大缩小带来的浏览体验肯定不会好。所以，在响应式设计的第一步，就是要禁止移动设备的缩放，这很容易实现，我们只需要在html页面中的head元素下添加一个meta标签用于规定禁止缩放就可以了： 1&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no, maxinum-scale=1.0\" /&gt; 使用Media Query 媒介查询才是响应式布局的关键所在，我们使用Media Query 来实现在不同尺寸下使用不同的样式。Media Query的规则有很多，例如@media screen and (max-width: 980px){...}就表示了在980px下的屏幕下使用在此定义的各种样式，同样还有min-width、orientation(设备方向)等属性，我们需要按需进行设置。 使用JavaScript 如果能做到上面的两点，在一般情况下，响应式布局是可以实现的。但是如果在布局的过程中需要改变交互，那么JavaScript久必须派上用场了。例如一个菜单栏，在十分小的屏幕下需要折叠，那么就需要用到JavaScript。 Code上面是我能够想到的响应式布局的一些要点，在实际学习过程中，我并没有在一些项目中使用相应式设计的方式(貌似很悲哀…)。在目前移动为先的时代，为移动端做更好的优化是不可避免的，无论是使用重新写一套移动端页面，还是使用响应式布局，或者使用其他的例如Flex Box来进行布局。作为一个工作在浏览器端的🐒，这都是我们必须具备的素质。 好了，写一个简单的小例子吧。如果你从未接触过响应式布局，那么希望接下来的code会帮助你更快地了解并应用它。 我们来写一个菜单栏，其HTML结构‍如下：123456789&lt;div id=\"nav\"&gt; &lt;ul id=\"nav-list\"&gt; &lt;li&gt;&lt;a href=\"#\" id=\"home\"&gt;Home&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\" id=\"topic\"&gt;Topic&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\" id=\"today\"&gt;Today&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\" id=\"about\"&gt;About&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\" id=\"concat\"&gt;Concat&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;&lt;/div&gt; CSS如下： 12345678910111213141516171819202122232425262728293031323334353637* &#123; margin: 0; padding: 0; &#125;#nav &#123; position: relative;&#125;#nav-list ul li &#123; list-style: none; box-sizing: border-box; width: 20%;&#125;#nav-list ul li a &#123; display: block; text-align: center; text-decoration: none; color: #FFF; line-height: 4em; font-size: 1.4em;&#125;#nav-list ul li:nth-child(1) a &#123; background-color: #bcbcbc;&#125;#nav-list ul li:nth-child(2) a &#123; ... /*添加背景色*/&#125;#nav-list ul li:nth-child(1) a:hover &#123; background-color: rgba(188, 188, 188, .8); /*添加鼠标移上去的样式*/&#125;#nav-list ul li:nth-child(1) a::before &#123; content: '' /*使用伪类来添加图标字体等*/&#125; 现在，我们来为屏幕宽度小于768px写一个样式： 12345678910111213141516@media screen and (max-width: 768px) &#123; ul li a::before &#123; font-size: 20px; line-height: 60px; &#125; ul li a &#123; font-size: 0; height: 60px; &#125; /* 上面的的样式指明了再768px宽度及以下，我们设置a标签的font-size为0，不显示字体。 设置伪元素所在的图标字体的行高等于a标签的宽度，使其垂直居中。 通过上面的简单设置，我们在小于768px跨度的屏幕下，对于该菜单就只能看到图标了。 */&#125; 接着，我们可以为更窄的屏幕设置折叠菜单，我们通过css来绘制折菜单，使用JS来显示和隐藏。具体的实现这里就不贴出来了。 ok，到此为止，我们已经写好了一个响应式菜单栏了(虽然…)。","categories":[],"tags":[{"name":"CSS","slug":"CSS","permalink":"http://yoursite.com/tags/CSS/"}]},{"title":"孩子","slug":"孩子","date":"2017-07-24T23:14:01.000Z","updated":"2017-07-25T00:44:56.000Z","comments":true,"path":"2017/07/25/孩子/","link":"","permalink":"http://yoursite.com/2017/07/25/孩子/","excerpt":"","text":"对于大多数家庭来说，孩子就是未来、是未来的希望和精神寄托；我们的父母总是不予余力的帮助我们的成长；可是当一个孩子成为家庭的负担呢？看看下面这个家庭的故事(这是一个真实的故事)。 写在前面2017年7月23日，我从济南出发回家“享受”也许是学生时代的最后一个暑假，同往常的匆忙不一样，这一次来到火车站才离火车发车还有1小时，一切都有条不紊的进行，取票、进站、候车…除了在检票的时候闸机不能识别我的车票外、上车、找到座位、驶离济南。故事当然发生在火车上，我的邻座–一位高大的面黄精瘦的头花花白的中年妇女。 为了度过12小时的车程，我一般会准备两部电影用于消遣，食物则是两瓶纯水一个大面包和少许便捷的水果。和往常一样，我在整一上午的时间看完了一部电影，此时已经到了午饭点，火车上的人都开始拿起自己带的食物开始吃起来。我从我的书包拿出大面包，开始啃起来，对两口面包一口水的节奏。我邻座的那位中年妇女也吃面包，可是连水都不要，对，也许她就没带水。出于此，我把书包里剩下的一瓶水给了她，她起先推诿不好意思接受，后来我告诉她我还有她才收下。后来的一段时间，我们有过一段时间的交流，而这故事就包含在短暂的交流中。 侧脸经过短暂的聊天，我知道了她来自湖北恩施州，地地道道的农民，来到济南照顾自己生病的孩子。一开始，我并没有问她孩子的具体情况。我打量着她，个头估摸着超过175CM，而身体廋弱得像竹竿，估摸着和自己父母相近的年龄，头发却花白。一眼望过去，正好是侧脸，廋高的颧骨、满脸的雀斑、偏黑的肤色，哇，是经历过怎样事情的人才会在这样的年龄变成这样一个样子。 这个时候，她打了一个电话，我一直在旁听她说话，可是方言的确让人很难懂，唯一知道的就是打给她女儿的。时间很短，更多的像是嘱咐，她挂了电话。看我一副饶有兴致的样子，她给我讲了她打给的是自己的13岁女儿，正在济南住院治疗。她随后的话让我觉得十分震惊：女儿从5岁开始开始患病治疗，直到现在已经治疗了8年，得的是世界罕见的baihua病(这里真的记不住了，根据她的病情描述大概是一种血液病)，中国第一例！8年花掉了超过100万元。如今女孩病情恶化，医院不再收取任何费用，开始进行实验性治疗。她每一个月济南待半个月，回家半个月，连往返车费都是医院帮忙。说完这些，我分明看到她眼角产生着泪花。其实此时不仅仅是我对此时感兴趣，旁边前后排的都有在关注她说的，有人问她这么些年有没有得到社会帮助，她说当地电视台报道了这件事，收到了部分爱心捐助，但是绝大部分的治疗费用还是自己承担。还有人问为什么选择在济南治疗，她说只有那个主治医生能够稍微有效，所以那个医生在哪她们就跟着去哪。当然，还有其他问题，她都一一述说。期间她给我们看了她小孩的照片，看起来就像那种天生聪慧的孩子，可是因为病情没有上过学，不然这个年龄应该是一名初中生了吧。 这样的聊天持续到直到所有发问的人都沉默不语，恰好也快到她下车的站点了。我给她说，我在济南上学，我给她留个电话，如果需要任何我帮忙的，打电话给我。她匆匆忙忙的存下我的号码，拖着好大的行李箱，下车了。那拖着行李箱的背影，突然让我想起了我的母亲(/哭)。 每个人的母亲和作为孩子的我们在接下来3个小时的剩余车程中，我回想了我和母亲的一切回忆，由近及远。早上上车时，远在千里之外的母亲挂念着自己的儿子是否能够乘上火车；回家前一天，又千叮呤万嘱咐一定要带够食物；在学校的每个星期，短暂的通话过程中的叮嘱…还有最初母亲反对我去北方读书，在火车站送别抹眼泪的情景也是历历在目。时间一晃，那么些年过去了，母亲越来越老，我越来越成熟；母亲越来越唠叨，我越发能够理解。想起小时候，经常和母亲吵架，甚至伤了母亲的心。到后来高中远离父母，到大学更是相隔千里，见到她的时间从一年几次到现在一年一次，从以前因不想见到母亲想要离家出走，到现在即使回到家乡想见母亲一面，母亲却说，太远太热太折腾坚决不让我来。这就是我的母亲，而我是母亲的孩子。 我是从我家乡中为数不多走出的大学生，这一点让母亲十分骄傲。当别人问起孩子，母亲总会告诉他们孩子在XX大学上学，可能对大部分家乡人来说，XX大学如何，985，211这些是什么，他们都不在意，也不知道其中的含义。作为孩子的自己，我有幸能够在这样一个家庭中长大，虽然家庭不算特别贫苦，但是所有的环境都是父母通过自己的劳动带来的。我敬佩我的父母，也期待能早日独挡一面。从小到大，我的事情都是由我做主，大到选择大学选择专业，小到家庭琐事，父母从不干涉的我的决定，最多就是提提建议，并且从任何方面支持我。前段时间我放弃了去企业实习的机会，选择留在学校补修课程等待秋招，父母第一时间支持我，这让我很感动。我想，还有什么理由不努力呢！ 尾巴记得很多个第一次，但是最有感触的莫非第一次在济南生病，母亲得知我生病的消息从早到晚都很焦虑，反而自己生病了。后来的几年，我很少生病，但是只要我生病，我就会去第一时间就医，并且不告诉母亲。到此结束，共勉！","categories":[],"tags":[{"name":"心灵记事","slug":"心灵记事","permalink":"http://yoursite.com/tags/心灵记事/"}]},{"title":"Demo--Canvas with React","slug":"Demo-Canvas-with-React","date":"2017-05-27T12:34:19.000Z","updated":"2018-09-01T02:06:50.372Z","comments":true,"path":"2017/05/27/Demo-Canvas-with-React/","link":"","permalink":"http://yoursite.com/2017/05/27/Demo-Canvas-with-React/","excerpt":"","text":"一个使用Canvas处理图片的Demo，使用React + webpack + Redux 的技术栈，非常适合初学者，希望你喜欢！ 为什么学习canvas已经有一阵子了，忙完了计组课设，考完了数据挖掘，终于有时间来做一点小Demo来巩固自己所学的知识了。就像上面介绍的那样，这是一个使用Canvas进行图片处理的Demo，其可以选择本地图片，改变其R G B 以及透明度，然后可以选择保存到本地。并且为了重温很久没碰的React，前端使用了React，使用Redux进行数据的管理(虽然简单到没必要使用),并且使用了css modules 以便直接在组件中使用css。当然这一切都是在使用webpack进行编译打包的情况下。 这个Demo十分简单，特别适合React初学者食用，相信会对你的React学习有所帮助！ 如何运行 从我的github上clone到本地; 进入Demo根目录, 执行npm init 安装依赖; 安装完毕后，执行 npm run build 进行构建; 在Chrome浏览器(下载功能只能在Chrome中使用，所以…)中打开index.html。 至此，你可以体验这个简单的Demo了。 像什么如果你觉得在你的机器上run很麻烦，或者你只是想看看长得怎么样。 在浏览器器中打开，是这个样子的： 我承认的确很简单，简单到显得简陋了！接下来你可以选左下角的选择文件按钮来选择任何一张图片，比如我选择了一张图片后: 任何被选中的图片都会被居中显示，宽高都会适应600*400的图片操作区域。现在，可以对图片进行操作了： 我们选择对图片的R、G、B、以及透明度进行调整，实时调整的效果将会在左侧的图片区域实时显示出来。 第四步，点击图片区下的按钮，就可以吧处理过的图片下载到本地了，我们打开下载后的图片和处理的图片进行对比，就像这样： 至此，我已经演示完了所有的功能。 不足如果你细心一点的话，你会发现这个Demo还有很多问题： 我们导入任何宽高的图片，其都会被自适应到框中，所以处理后的图片品质会下降。 保存图片只能在Chrome浏览器中进行，已测试在Firfox中无法使用这个功能。 右侧的工具栏在选择新图片后不会被初始化。 功能单一。 界面简陋 … 你需要注意的是如果你想学习React和canvas，那么我希望我的这个Demo会对你有所帮助，这里提几个需要注意的点，这些点也是我在开发过程中遇到的问题： 如何使用input file来选择一张图片并绘制到canvas中。 如何保存图片。 图片在React中绘制的时机。 如何使用redux进行数据管理，特别是如何使用带参数的action。 你所关注的。 未来这虽然是一个很简单的Demo，但是我会在此基础上进行继续跟进，现在能想到的是解决上面提到的不足，比如设置两种模式，处理图片品质下降的问题；兼容主流浏览器；增添新功能；修改工具栏的状态初始化的bug；以及其它我以后能够想到并且我能够实现的。 以及…我目前有想法开发一个可交互的视频编辑器，有兴趣的同学可以关注下咯！ 写到后面还有不到3个小时我就21岁了，想想前面走过的20年，尤其是上大学的三年来，感慨颇多。谢天谢地，就算无论如何，我都完好无损的度过了。接下来的一岁中，我将面临人生中一个个重大的转折点，实习、毕业、工作、走向社会。从小到大，我对我所有的事情做出选择，接下来，也不例外。我做好准备了，并且一直在准备着！ 共勉！ 新！5.28日 解决了再次选择图片工具栏初始化的问题； 工具栏的调节精度下沉到0.01； 修改页面细节。 现在看起来长这样！ 6.3日 同样的功能，不同的界面和实现方式，采用react但是去除redux使用state进行状态管理； 操作更加主流和人性化； 已知BUG，下载某些图片的时候可能会失败，暂不知原因。 新版地址：https://github.com/xiaomoer/picture-editor-with-canvas 看起来是这样的：还有这样： 加油！","categories":[],"tags":[{"name":"React","slug":"React","permalink":"http://yoursite.com/tags/React/"}]},{"title":"初识 requestAnimationFrame","slug":"初识-requestAnimationFrame","date":"2017-05-12T10:22:39.000Z","updated":"2017-07-25T00:41:22.000Z","comments":true,"path":"2017/05/12/初识-requestAnimationFrame/","link":"","permalink":"http://yoursite.com/2017/05/12/初识-requestAnimationFrame/","excerpt":"","text":"事情的起因是这样的，前段时间面试的时候面试官问我会canvas不，作为一名未来的前端猿，我只有过一点了解，后来居然收到了offer，当然在闲暇之余是要学习一下canvas，并且在学习过程中首次接触到了本文的主角requestAnimationFrame。 web中实现动画老实说，如果有人问我如何在web开发中实现动画，我第一时间想到的就是使用定时器setTimeout()或者setTimeInterval()来实现。其实实现的方式远远不止这一种，在CSS3的时代，我们实现动画有了更多的选择，比如使用关键帧动画，使用transition，我们也可以在canvas上绘图来实现动画；当然，还有requestAnimationFrame。 使用setTimeout()/setInterval()实现的方式很简单，我前面有一篇文章就简要介绍了JS中的定时器。使用这种方式实现动画其实是有其性能瓶颈的，例如：1234function animation()&#123; // do something setTimeout(animation, 1000/60)&#125; 上面我们以60帧/秒的速度执行动画，但是如果浏览器不是60帧/秒，就会掉帧；并且由于JS单线程的特点，所有不能保证每一次执行回调都是1000/60毫秒；还有，当窗口处于非激活状态的时候，它同样可能会执行。 其实很好理解，作为定时器，setTimeout/setInterval并不是专门做动画的，存在各种各样的问题也是很好接受的，但是当我们认识到这种实现动画的方式的各种缺点时，我们也许会考虑另一种动画的实现方式，而requestAnimationFrame是一种更好的方案。 初识 requestAnimationFrame 当我们执行window.requestAnimationFrame(callback)的时候，浏览器会在下次重绘的时候执行回调函数，它会告诉浏览器马上就要执行动画了，而callback则是用于更新动画。 requestAnimationFrame使用起来很简单，通过递归不断来执行回调来更新画面从而让画面动起来，我们甚至不需为其指定动画执行的时间和帧率。其优点是：1）从名字上就可以看出这是一个专门用于实现动画的API，优化是自然少不了的；2）其如果处于非激活状态，会自动暂停执行，有效节省了CPU资源。 小实例我们在做动画的时候，有时希望背景移动起来，结合目前正在学习的canvas，我们可以很轻易的做到这点. 12345678910111213141516let j = 0;let image = document.querySelectorAll('img')[0];function moveBackground()&#123; ctx.clearRect(0, 0, canvas.width, canvas.height); ctx.translate(10, 0); ctx.drawImage(image, 0, 0); j++; if(j &lt; 20)&#123; requestAnimationFrame(moveBackground); &#125;&#125;let moveBtn = document.getElementById('move');moveBtn.onclick = function(e)&#123; e.preventDefault(); requestAnimationFrame(moveBackground);&#125; 上面我们点击button的时候，开始执行动画，通过不断的坐标变换和清除重绘，达到背景图片向右移的效果。 最后，请注意，不是所有浏览器都支持该方法，所以你可能需要一个polyfill，关于如何实现这个polyfill，网络上的资源比较多了，这里就不在赘述。","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://yoursite.com/tags/JavaScript/"}]},{"title":"实用的JavaScript技巧、经验总结","slug":"实用的JavaScript技巧、经验总结","date":"2017-04-21T06:00:42.000Z","updated":"2017-06-12T12:44:22.000Z","comments":true,"path":"2017/04/21/实用的JavaScript技巧、经验总结/","link":"","permalink":"http://yoursite.com/2017/04/21/实用的JavaScript技巧、经验总结/","excerpt":"","text":"避免给一个未申明变量赋值，因为这会直接创建一个全局变量。 总是使用 ‘===’ 而不是 ‘==’，’===’会直接比较，而’==’必要时会进行类型转换等造成错误。 使用typeof instanceof 应当小心。 1234typeof null // objectfunction A()&#123;&#125;new A() instanceof A // truenew A() instanceof Object // true arguments 对象转换成一个数组 12Array.ptototype.slice.call(arguments);Array.from(arguments) //ES6 验证一个参数是否是数组 1Array.prototype.toString.call(a) === '[object Array]' 取得一个数组中最大值与最小值 12Math.max.apply(Math, arr);Math.min.apply(Math, arr); 使用splice删除数组中某一个/一些元素，而不是使用delete，如果使用delete的话，相当于只是把原值变为undefined 使用for .. of来遍历数组，使用for .. in 要避免遍历到原型上面的可枚举属性，使用hasOwnProperty()来检测 不要扩展Object.prototype，因为这会给所有(?)对象增加属性/方法，从而产生很多意想不到的行为和错误！ 对于一个构造函数，总是使用 new进行构造函数调用，否则默认返回空(对象)。 arguments.callee() 可执行当前函数，不推荐使用。 认识 ‘+’运算符， 对于对象而言，会转换成字符串，对于其他运算符则会尝试转成数字。 在使用if语句是，如果需要在条件中赋值，需要加上括号：`javascriptif((x = y)){// do something}并且结果是否为真取决于y的真假。 判断一个数是否为NAN使用 x !== x,为true则该变量为NAN(NAN不等于自身)","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://yoursite.com/tags/JavaScript/"}]},{"title":"你","slug":"回忆录","date":"2017-04-17T12:11:52.000Z","updated":"2018-07-29T05:33:12.000Z","comments":true,"path":"2017/04/17/回忆录/","link":"","permalink":"http://yoursite.com/2017/04/17/回忆录/","excerpt":"","text":"偶然在网易云中听到《secret base》，耳边明明萦绕的是那么熟悉的旋律，可就是记不起！看评论竟然才发觉原来是《未闻花名》啊！看到评论区中提到的人名：面码、仁太，波波…我决定重温一遍这部有点虐的番，并且花了两天的时间断断续续的看完了一遍。我承认我是一个感性的人，在最后两集就开始抹眼泪，我想到了很多不再联系的人，想到了很少联系但特别亲近的人，想到了现在身边的人。记忆虽然很模糊，但是却不容易完全忘却，有些时候想下意识的忘掉一些事，可怎么都忘不掉… 我在微博上分享了这首歌，高中唯几要好的一个同学很快给我点了赞，好开心啊！后来我们在微信上聊天，高中的点点滴滴都被我们回顾了一遍，可就是这次普通的聊天，让我想起了那个不曾给人说过的故事，那个原本我想藏在心底一辈子的秘密。 虽然还没到情窦初开的年纪，但是我总相信每男孩的心里总住着女孩。把记忆倒回十年，我开始努力回想，小升初的后的那段日子，平淡无奇；再往回倒三年，模糊的忆力貌似写满了孤独，成长过程中总是略带苦涩；再往前的记忆就更加模糊了，只记得自己踩着泥泞的小路去上学，因雨靴被陷在淤泥里拔不出来哭了好久。能记得那么久以前发生的事，一部分功劳来自于每次回家妈妈都要提起自己小时候的事，而另外的事，那大概就是因为她了。 那一年，我8岁，她7岁。今年我21，她17； ***相识小时候的我，我不是仁太，不是“超和平Busters”的leader，没有那么多要好的朋友，肯愿意和我玩耍的就是外婆隔壁家的二傻子了；她也不是面码，独特招人喜欢，沉默寡言十分安静。故事的开头，是每周例行的换同桌活动了，每周移动一个位置的换位方式让每一个同学都能有两个同桌。在某次略显尴尬的换位过后，我和她被迫成为了同桌，并且绝对会在接下来一周时间说不上两句话的那种。小学的时候都很流行画“三八”线来分割桌子的使用区域，但是我们没有，我们两个都没提出来，真是一个沉默的女孩和一个胆小的我啊！最初我甚至不敢打量一下自己神秘的同桌，连她的名字都不知道。后来的某天，放学回家的路上，我被其他小伙伴怂恿，抓起一把沙子趁她不注意撒到了她的头上，沙子顺着脖子流了下去。她立马就哭了，是那种委屈的泪水四溢但是绝不哭出声的那种；后来一路上我给她道歉，她夹杂的哭声小声念到：”莫XX，我恨你！“。哦，她原来还知道我的名字！ 那件事过后一天，的确是因为她恨我，也许是害怕我了，主动向老师申请调换位置，结果她的位置没被调换，老师反而给我安排了特殊位置，一个没有同桌的位置！后来，我胆子大了起来，我发呆的时候甚至可以盯上她好一会儿，我还知道了她的名字。现在想来，也许就是那个时候，我的心里就住着她了吧！ 有意无意的我开始关注这个安静的女孩子，身材娇小，单马尾，可爱的脸蛋；成绩不好，但是特别努力；会画画，水彩笔起码有20只；字写得很漂亮。可惜我不是小林杨，不然她会成为朕的四皇妃？ ***相知很长的一段时间里，我们没说过一句话，她那么安静，我还是那么胆小。后来学校组织去水库春游，男孩女孩组队，带上食品和风筝，结果我们又被孤立了，所以又被迫成了一组。这一次，爸妈准备了好多食物让我带过去，并且做了好大的一只纸风筝；我们在水库下游的绿草地上，终于互相说了话，而且从这天开始，我们成了朋友，虽然有点最熟悉的陌生人的味道。 对，我喜欢这个女孩子！ 在后来一段很短暂的时间里，恰是我童年最美好的一段时光。我不再只有一个二傻子和我玩耍了，我不只有一到周末就去田间小溪中去摸小鱼小虾和螃蟹了，时不时她会造访我的世界，并画上浓墨重彩的一笔。 暑假过后，也就是我认识她一年以后，离别悄无声息降临。在她远房表格的口中，得知她走了，跟随着父母到外地上学去了。那时候的不像现在，没有电话，没有任何通讯工具，没有联系方式，我们根本没法联系。忘却的日子虽然很漫长，但除了用时间去冲淡一切，别无他择。后来很长一段日子里，我都没有她的消息，偶尔和他哥聊起，才知道她去了”XX省“，她哥问我，是不是喜欢她啊。我的回答虽和仁太的回答不太一致，但是也没有勇气去承认。后来，她哥升入了初中，我就没有任何关于他的消息。而我的世界里，却没有了空缺。 ***重逢和永远的离别碌碌无为的度过了初中三年，那个时候正值QQ聊天流行，我也有了自己的QQ号。会在空间里发上几条伤感的话，取一个非主流的网名和找一张特别炫酷的图片作为自己的头像，那段时光可真是不敢回忆啊！直到升入高中，我才有了自己的手机。阔别我好多年的她，又回到了我的记忆里，我赶紧从他哥那里要到了她的QQ号，并且加了她好友，可她却一直没同意。我在焦虑不安中度过了一周，直到，某天夜里，她同意了！我们刚开始就聊到凌晨，似乎有说不完的话。就这样，我觉得生活变得有趣起来，虽然那个时候我成绩一塌糊涂。 2013年7月8日，暑假，我发了一条微博，“无聊的时候想想我们的约定，想到自己马上高三了，期待一年后，我如愿考上福建的大学，远方相会吧！”； 2014年1月20日，寒假，我发了一条心情微博，”我回合川了“； 2014年2月4日，寒假，我发一条微博： ”我希望从没认识过你！/大哭“； 至此，我的世界再次丢失了你！而这一次，再也找不回来了。 2014年9月，原本是该相见的时刻，可真当这一刻来临时，我再也没有什么理由去福建上大学。 又是几年，每当想起，还是不住的抹眼泪。 10余年来，不曾亲眼见到你。 ***尾巴？？？今天是2018年3月22日，我删除了原尾巴。快一年过去了呢！还是无法忘怀，就在昨晚，微博，一个陌生人给我的好多微博点了赞啊！当然包括14年我说我希望从没认识她的微博。很晚，凌晨，本该是我睡觉之前的看小说时间，我翻看着以前写的微博，一个劲不停的删，直到最后忍不住在被窝里抹眼泪。都那么多年过去了，还是无法忘却啊。 我忘了告诉你，我是一个很感性的人，就是那种看稍微虐的番剧都会泪目的人。 虽然很容易哭出来，但是都是那种无声的哭泣，像喜极而泣，像极了你。 ***再回忆还记得最后那段日子吗？那时候我们都高三了呢！总会做一些疯狂的事情，比如去网吧上通宵，第二天还要屁颠屁颠面对苦逼的校园生活。深秋，有些冷了呢！手机上交，和你中断了联系，生活中暂时只有学习没有了你。某天，我还是伙同好多人去上通宵，因为最期待的事情，就是和你聊上很久，直到你蜷缩在被窝眼皮都睁不开的时候。 我们的聊天是这样的，一个人负责说话，一个人负责倾听。你告诉我你这个星期发生了什么、过得怎样、有哪些奇闻趣事，说完后我再告诉你我的这些天。文字异常冰冷，显示器屏幕是冰冷的，隔着屏幕的两个人竟然看着冰冷的文字，倍感温暖。我们可以就这样你一句我一句的，聊上一晚上；然后第二天在教室补觉而错过复习都不后悔。 更多的时候，我和你只有在我月假的那闲暇一天里，才可以好好的说上很多话，直到时间用完，盼望下一个月。 你第二次离开我的时候，我消沉了好一段日子呢！寒假还在家的时候我就出去上网打游戏，有些时候在网吧一呆就是一个白天，晚上回了家，我就把自己锁在屋子里，看我们互发的短信，看那长篇大论的邮件和翻不到尽头的QQ消息，可是，再也没法收到你的消息了呢！ 后来干脆删了你的任何联系方式，清空了收/发件箱，到现在看来，还的确有点作用呢，至少我忘记了你的手机号码了啊！ 寒假过后我来到学校还是消沉，白天可不能有那么多的时间去回想，可是一下了晚自习，我也不洗漱就蜷缩在床上，开始抱头痛哭。 其实后来慢慢就好了，时间还是会冲淡一切的。接下来好长的一段时间，我都没有想起了，哪怕一次。 可笑的是，我还是想起了你，是在高考语文开始我拿到试卷开始，对啊，为什么不写你我的故事呢！虽然作文题目是让我们写宽容、善良、责任、原则等。我还是写了你，你和我的故事。就这样，在最不能儿戏的地方，我选择了留点关于你的什么。 你的理综很差，我就给你写笔记，然后寄给你。那么多本笔记，也不知道你看完没有。我以前可是从不记笔记的哦，为了你我都改了。直到现在，我都会带上一本笔记的，记下想记住的东西。 时间会冲淡一切，包括记忆，可是我还是无法忘却。有人说，男孩的心里总是住着一个女孩，一个女孩离开，又会住进其他的女孩，直到你找到对的那一个人。对啊，以后的日子里，我的心里会住进女孩子，然后就再也容不下其他人了。但是至少，在十几年前，我的心里，就住了一个女孩，她小心翼翼，一住就是十几年。而在不久，她默默的离开了，匆忙得都忘记了带走她的东西。 不敢想象，如果你不曾离开，那又怎样。 我们年幼时曾并肩漫步 因些琐碎小事相视而笑 凝视着同一个梦想 侧耳倾听 如今依然听得见 你的声音 萦绕在 橘红色映衬的 街道 你不在的时候 真的很无聊呢 但若把寂寞说出口 你肯定会笑话我 你留下的印记 我会无数次确认 那是 未曾消逝的光芒 恰是雨后晴空般 又如心间放晴般 你的笑颜依犹记 每每忆起总不禁浮现笑颜 我们肯定依旧一如那日 依是当初那两个天真孩子 慢慢跑过轮回的季节 展望各自不同的明日 当我孤单一人 总会感到不安 毫无睡意的夜晚 我们就那么无尽畅谈 今后你会看到怎样的风景呢 而我又会 见证些什么呢 悄悄 收起了泪水 回想起 你就是你 无需担心 我们 终究长大成人 邂逅那个美好的人 若能在此处 在相逢就好了呢 2018.3.27 22：11 留 ***前夕今天是2018年6月25日，真是忙碌的一天！早上第一次穿上白寸衫去拍正装照，去图书馆还书；中午吃完饭就开始收拾东西，打包，然后搬下6楼去寄快递；下午拿到毕业证后，去打印店又是复印又是扫描弄了很久；傍晚下起了瓢泼大雨，打篮球的计划取消… 暴风雨来临之前必然会乌云密布，那么毕业的前夕是什么呢，我们又会做些什么呢？ 在没有你的世界四年之后，我决定做一件不敢想但蓄谋已久的事情，就像路明非回红井见小怪兽，师兄见小龙女一样，我也要去那个再也没有理由去的城市，在故事的结束前夕，再见你一次，然后，开始独挡一面。","categories":[],"tags":[{"name":"心灵记事","slug":"心灵记事","permalink":"http://yoursite.com/tags/心灵记事/"}]},{"title":"在Express中使用Cookie","slug":"在express中使用cookie","date":"2017-03-16T08:11:42.000Z","updated":"2017-03-20T13:21:42.000Z","comments":true,"path":"2017/03/16/在express中使用cookie/","link":"","permalink":"http://yoursite.com/2017/03/16/在express中使用cookie/","excerpt":"","text":"文章来自于我在express框架上使用cookie引发的一些问题，但在具体介绍cookie以及如何正确的使用cookie之前，我觉得我有必要说一说cookie到底是什么。 cookieCookie是服务器保存在浏览器中的一段小(一般而言size&lt;4KB)的文本信息，而浏览器每次想服务器发出请求，就会携带上这段信息。Cookie一般包含了key、value、到期时间、所属域名、所属路径等信息。 在浏览器中我们只需要使用document.cookie来得到当前页面所属的cookie。请注意，返回的cookie是以字符串形式存在的，不同的key-value之间通过’;’来分割，所以如果你想对齐进行进一步操作，需要相应的处理。 这里需要注意的是，document.cookie属性是可写的，这就意味着你可以手动添加cookie，使用document.cookie=&quot;name=value&quot;的形式。注意，这里是添加，而不产生覆盖。 好了，关于cookie的属性的具体含义和用法，大家可以自行去了解。 我的问题我在使用服务器端使用cookie的时候出现了问题，出现这样问题的原因很简单，首先我对cookie存在错误的理解，请务必注意，cookie是服务器发送给客户端，而客户端在发起请求的时候携带cookie而已。在正确认识cookie之后，并且成功的将cookie发送到浏览器过后，问题又来了，我在请求的时候，cookie却不能发送到服务端。我使用的是下面一段代码：12345678910fetch('/login?'+stringify_data, &#123; method: 'GET' &#125;).then(function(res) &#123; return res.json(); &#125;).then(function(json)&#123; console.log(json.status); &#125;).catch(function(err) &#123; console.log('oh ! error!') &#125;)&#125; 这里我使用了fetch API，在能够正确的发送请求的情况下，服务器无法读取到相应的cookie信息，同样在chrome开发者工具中查看请求头也发现请求并没有携带cookie信息。我想着一定是fetch API的问题，所以我赶快写了一个使用Ajax的请求，很显然，能够正确的发起携带cookie的请求。好吧，写到现在，我想的确是fetch API的问题了，阅读文档发现fetch API发送的请求默认是不带cookie的，必须手动设置(无论是出于什么样的考虑，但还是觉得坑)！好吧，问题迎刃而解，我们只需要在fetch函数第二个参数设置credentials: &#39;include&#39;就可以发送cookie了/无奈！ 在express中使用cookie在express中使用cookie是一件十分惬意的事情，因为如果你使用cookie-parser中间件的话，那么我们只需要使用res.cookie(name, value[,options])就可以设置cookie了，关于options相关的参数可以自行学习！ 如果想删除cookie，也很简单，使用res.clearCookie(name)就可以啦。 当然如果想获取请求头发过来的cookie，我们只需要使用req.cookies就可以了，这里返回的是一个JS对象，我们直接可以使用name来读取值，从而做进一步的操作。 在使用了cookie-parser中间件过后，在服务端操作cookie已经足够简单，并且cookie-parser不但提供了非签名使用的方式，还提供了签名的使用方式，具体使用是在使用中间件的时候添加一个secret，app.use(cookieParser(&#39;secret&#39;))即可，当然，在获取cookie的时候使用 req.signedCookies属性就好了。 好了，如果你不想使用cookie-parser，我们也能够通过req.headers.cookies(感到罪恶所以不推荐/无奈)访问到cookie，如果想写cookie的话，使用res.setHeader(name, value)(再次感到罪恶)或者res.writeHead(status[,options])就可以了… 尾巴一般情况下，文章末尾，我总会写一点鸡汤/无奈，这次也不例外。距离写上一篇博客已经过了很久了，起初有两篇想写的文章，一篇是在RN中使用Navigator，另外一篇则是介绍我自己正在学习的几种分类算法。可是当创建好文件准备开工时，我因为写一篇文章可能需要2-3个小时(我速度慢)或者是因为真的动笔写的时候反而觉得没什么要说的就放弃了。然后一段时间过后，或许是因为忙，或许是因为懒，或许是因为浮躁，就是没有去实践，没有去巩固，而把一切都抛之脑后，然后把前面学习到的忘得一干二净！ 嗯，这的确的真实的！仅此而已！ END","categories":[],"tags":[{"name":"Node.js","slug":"Node-js","permalink":"http://yoursite.com/tags/Node-js/"}]},{"title":"兑水的心灵鸡汤","slug":"兑水的心灵鸡汤","date":"2017-02-28T13:02:27.000Z","updated":"2017-02-28T14:31:52.000Z","comments":true,"path":"2017/02/28/兑水的心灵鸡汤/","link":"","permalink":"http://yoursite.com/2017/02/28/兑水的心灵鸡汤/","excerpt":"","text":"好久不逛简书！ 记不住曾经是以什么方式登录过简书，在我把QQ，微信，手机号，微博都试了一遍过后，我终于登录上去了。随便翻了翻首页，第一篇文章就是《心灵鸡汤是怎么忽悠我们的？》。匆忙看完，尚在回味之中，突然发现自己曾经也是一个鸡汤高手，生产过数十篇鸡汤软文，然后着急翻看，发现果真如此！ 总结下来，我熬的心灵鸡汤大概有这样的特点：写自己的故事，还算完美的结局，极高的迷惑性，不认真看或者不了解我的人根本意识不到他们已经喝了我的鸡汤。 丑小鸭都能变成白天鹅，所以一切都会变好的。可实际上，丑小鸭之所以能够成为白天鹅，并不仅仅是因为它努力，勤奋，而是他的父母本身就是白天鹅。 爱笑的女孩子运气都不会太差。可实际上，如果一个女孩运气一直不好，她怎么可能笑得出来？ 刚刚看完自己三年前的一篇鸡汤文，讲述的是一个不起眼的男孩的成长历程。这个故事就像丑小鸭的故事那样，那个男孩通过不懈的努力最终成为佼佼者。当然那个男孩就是我自己，而真实情况却是，整个高中三年，我因上课期间逃到校外上网不下10次，每个星期天唯一的半天假期我都在网吧度过；由于我对手机的痴狂，我甚至一个月会换好几个手机，所以绞尽脑汁想尽各种办法向并不富裕的家庭索要金钱；我足球水平也没有那么好，也没有过刻骨铭心的所谓的“爱情”。而至于我最终为什么能够考上大学，这个我真的不知道，也许我真有过刻苦和努力的那段时光吧。 我开始揣摩我当时的心理，可是依然没有任何头绪。我猜，我写文章的时候从来没想过让别人看见，我在给自己炖鸡汤，然后自己大口大口的喝下去。当刚刚喝完的时候可能我很解气，顿时觉得神清气爽有精神，可一段时间过后，我又感到烦躁无比，因为我又要面对摆在眼前那么真切的问题，我最终从自己幻想的那个世界中爬出来，面对强烈的反差，消极和怠慢丛生，然后开始耽误，一天，一周，一年，一辈子… 我继续看文章，有几篇是在我在外校做交流生的时候写的。不知道能不能算鸡汤文吧，但至少还是有一股鸡汤味。然后我又发现了一个共性，所有的文章都是我在遇到问题踌躇满怀的时候写的，比如刚来到陌生校园而找不到上课教室过后，和室友闹了小矛盾过后，离别的时候。这又能说明什么问题呢？当我开始把心中所有的烦躁和愤怒写出来过后，我的确好了很多，因为在构思一篇文章的时候，我出奇的冷静。当文章写完，消极和愤怒开始消退，短时间内信心爆棚，此时鸡汤的功效正在起作用；一段时间过后，我又开始烦躁，负能量急速增长，我想，我似乎得了鸡汤依赖症。所以不断的熬鸡汤，不断的喝自己熬的鸡汤，已经成为了我的常态。 做菜是我为数不过get到的技能，所以文章的最后讲讲我认为的好的熬鸡汤的方式。 材料：4-6个月母鸡，腌制萝卜整只多只，当归若干，枸杞少量，鲜竹笋数只，姜蒜，料酒，食盐若干。步骤： 在剔除多余的胸脯肉和鸡腿肉过后，切成小块洗净； 加入食盐，料酒搅拌均匀静置半小时； 使用60度热水清洗干净，放锅里炒干水汽备用(可适当加入油和盐)； 加入适当清水，片状的姜，整只蒜，以及大块的腌制萝卜，大火煮开； 倒入鸡肉，枸杞，小火炖上1小时； 加入切好的竹笋，再小火炖上1小时，鸡汤就可以出锅了，如果觉得不够鲜，还可以加入适当鸡精调味。 热腾腾的鸡汤，享用吧！ 曾经有人给我说过，做程序员写代码要开心，不然就不要写了。我想说，鸡汤要好好做，不然还不如不做。 共勉！ END","categories":[],"tags":[{"name":"心灵记事","slug":"心灵记事","permalink":"http://yoursite.com/tags/心灵记事/"}]},{"title":"Flex弹性布局","slug":"Flex弹性布局","date":"2017-02-22T08:09:48.000Z","updated":"2017-02-22T14:23:50.000Z","comments":true,"path":"2017/02/22/Flex弹性布局/","link":"","permalink":"http://yoursite.com/2017/02/22/Flex弹性布局/","excerpt":"","text":"说起布局，我脑子里一下就想到了DIV+CSS布局，毕竟曾经被那么多写着DIV+CSS网页开发的书籍洗过脑，然后到现在还不怎么会用这种大众的布局方式。当然了，其实页面还有其它的一些布局方式，比如表格布局，框架布局这样已经逐渐被淘汰的布局方式，也有今天的主角–一颗冉冉上升的新星，弹性盒子布局。 Flex是Flexible Box的简称，我们这里把其翻译为弹性布局，至于为什么不叫“灵活的盒子布局”。额，这个问题也许会在读完本篇文章找到答案。好吧，正式开始。 容器flex是display的一个属性，当然对于行内元素还有一个叫做flex-inline的属性，这里我们不多说，但是要注意的是，一旦对一个元素的display属性设为flex，那么它的子元素就不能使用“浮动(float)”这个神奇的属性，而这个元素将会一跃成为容器(container)，而其的子元素将会成为项目。好吧，先从容器说起。 一旦把一个元素的display属性设置成为’flex’，这个元素就成为一个容器，容器有几个比较重要的属性，学习和掌握这几个属性是学习弹性布局的关键。它们分别是： flex-direction: 决定子元素(项目)的排列方向。 justify-content: 指定子元素在主轴上的对齐方式。 flex-wrap: 指定多行显示以及显示形式。 align-items: 决定项目在交叉轴上的对齐方式。 align-content: 定义项目在多轴线上的对齐方式。 好吧，大概就是这几个了，我们注意到在上面解释的时候提到了主轴和交叉轴，这里我先简单解释一下：对于这个概念，我们可以很简单的在一个容器上画一个十字坐标轴，如果我们设置flex-direction为row(行)，那么横坐标就为主轴，纵坐标就是交叉轴，这里要注意坐标轴的指向，因为同样有一个属性为row-reverse，此时主轴的方向指向和设置为row的相反方向。 项目作为容器的子元素，项目同样有几个重要的属性： order: 控制项目的排列，默认为0，值越小则越靠前。 flex-grow: 用于定义Flex项目的放大比例，默认为0，即使存在剩余空间，也不放大。 flex-shrink: 用于定义Flex项目的缩小比例，默认为1，即空间不足，Flex项目将等比缩小。 align-self: 允许单个Flex项目有不同于其他Flex项目的对齐方式。 然后我并不会把每一个属性具体来讲，因为这样的文章在网络上的确太多了。我正在学习RN，所以在这里就写一个界面，其中的布局将会采用弹性布局，中途我会对布局进行简单的分析，以加深理解。当写到这里的时候我就开始布局这个简单的页面，然后到现在才布局好，时间用了那么长，感觉像是过了一年…好了，不多说了，最终的界面如下图所示。其实我也不知道自己写了啥，还是勉为其难的就叫其“登录页面”吧，现在我来分析一下这个页面哪些元素是容器和项目(当然都是项目啦)，又在什么地方使用了什么属性。 页面整体采用了弹性布局，所以从整体来看我们一定使用了flex-direction属性，并且其值是column，所以这里的主轴一定是Y轴并且是方向向上。并且我们能够观察到，页面上所有的元素都是居中的，我们于是想到了在交叉轴上的对齐方式是: align-items: ‘center’，而其主轴上的对齐方式则是默认的justify-content: ‘flex-start’。 接下来来看两个不明显的，页面上有两个输入框，每个输入框其实都是一个View组件包裹，那么在这个组件内部，我们仍然使用了弹性布局(竖轴为主轴)，为了让输入框上下居中，这里必须让justify-content: ‘center’；紧接着最后一行有两个按钮，这两个按钮同样在一个View组件中，并且这个View也是弹性布局，并且一定要设置flex-direction: ‘row’才能让这两个按钮排列在一行。我们同样可以给每个按钮赋予不同的order值，让其进行排序。 总结一下：我们是用弹性布局完成了一个基本页面的布局(虽然这真的很丑陋)，在这个简单的布局中我们使用到的属性并不多，但是的确比使用css+div布局来得更快，尤其是垂直上的居中，css是比较难以实现的。这里我们一共有四个容器，分别是最外层容器，每一个输入框外层容器，按钮组外层容器，当然，这里面所有的元素都能称为项目，这里就不在多说。 尾巴说了这么多，那么我对flex布局的态度到底是什么？一句话总结，学习它，了解它，使用它。弹性布局我在刚开始学习React的时候就有了解过，过了也快半年了吧，当时看着阮一峰老师的文章，感觉怎么都不明白，然后渐渐抛之脑后。直到学期开始，我开始学习RN，再一次接触到Flex布局，才想起来画一些时间去了解，然后试着使用，最后再让自己记忆下来。相比第一次我接触Flex布局，我做出了改变，而这种改变是在时间并不充裕的情况下，弥足珍贵的。希望自己能够加油，也希望和我有同样压力的同学加油！","categories":[],"tags":[{"name":"CSS","slug":"CSS","permalink":"http://yoursite.com/tags/CSS/"}]},{"title":"生成器","slug":"生成器","date":"2017-02-11T04:10:07.000Z","updated":"2017-02-14T04:15:56.000Z","comments":true,"path":"2017/02/11/生成器/","link":"","permalink":"http://yoursite.com/2017/02/11/生成器/","excerpt":"","text":"大家对于异步这个词想必都不陌生，看到异步我可能最先想到的就是使用回调，再者我会使用Promise，可是使用回调处理异步控制流是有缺陷的：第一，基于回调的异步方式实在不适合大脑对于任务的思考(这点我深有体会)；第二，存在控制反转的问题。而Promise链提供了我们以顺序的方式处理和表达异步流。而这篇文章的主角生成器(generator)也是一种顺序和看似同步的处理异步的方式，并且它比Promise更加优秀。 有关函数不知道大家有没有这样思考过，一个函数一旦执行，其是否能够中断，我也没有仔细想这个问题，并且当看到这个问题，我会经验判断函数在执行过程中不会中断。到底是否中断，我们先写一个例子：12345678910var a = 1;function foo()&#123; a++; bar(); console.log(a);&#125;function bar()&#123; a++;&#125;foo(); // 3 运行上面这个例子，最终的结果是3，这就意味着，当函数执行完a++后，函数foo从表面上来看被中断了，然后执行了bar函数，最后执行权交给foo，函数返回已经被修改的变量a的值。虽然通过上面的小例子，并且因为JS单线程的特性，我们似乎能够肯定JS是抢占式的，但实际情况是JS并不是抢占式的，虽然函数bar的执行打断了函数foo的执行，但这其实是一种“关联”(参考原型继承)。 初识生成器现在让我们来认识生成器表达式，同样是上面的例子：12345678910111213var a = 1;function *foo()&#123; a++; yield; console.log(a);&#125;function bar()&#123; a++; &#125;var iter = foo();iter.next();bar();iter.next(); // 3 分析一下：首先我们创建了一个生成器foo(注意*)，该函数里面多了一个yield，有过python经验的大概知道这是干什么的。然后创建了一个函数bar；再来看执行，这里var iter = foo()并没有执行生成器foo，而是构建了一个迭代器，然后使用next方法启动了迭代器foo，并且在碰到yield停止执行，此时已经执行了x++，然后执行函数bar，执行完后，x经过两轮自增，此时x的值为3；最后我们调用next方法，从上一次中断处继续执行，并且没有碰到yield表达式，一直执行到函数结束，打印变量x的值为3。 现在我们来回答什么是生成器，其是一个特殊的函数，在函数声明的时候函数名前面包含一个”*“，并且能够多次启动和暂停。好了，我认为仅此而已。 一些问题为了把生成器运用到异步流程控制中，我们还需要更深层次的了解生成器。 生成器仍然是一种函数既然说生成器其本质上还是一种函数，所以其仍然具备函数最基本的特性，能够传递参数，也能返回值。我们不妨写一个例子测试一下：123456789function *test(a, b)&#123; a++; yield; return a + b;&#125;var it = test(1,2);it.next();var res = it.next();console.log(res.value); // 4 其实生成器和普通函数的一个很大区别是在运行期间，它不会直接运行，而是创建了一个迭代器，然后每调用迭代器的next方法，便向下执行直到到碰到yield或者执行完成暂停。而我们注意到调用next方法返回的其实是一个对象，其包含一个value属性，如果生成器返回值的话，那么该属性的值就为生成器返回的值。总的来说，生成器的运行到目前为止完全是依托迭代器。 好了，继续。 继续来看例子：12345678910function *foo(a, b)&#123; a++; yield a; return a + b;&#125;var it = foo(1,2);var mid = it.next();console.log(mid.value); // 2var res = it.next();console.log(res.next); // 4 这个例子想表达的就是对于生成器而言，yield表达式总会返回一个值，而我们可以通过迭代器next方法生成的对象来得到。 继续来看一个更复杂的例子：123456789function *foo(a)&#123; var b = a + (yield 'ok return!'); return b;&#125;var it = foo(1);var res = it.next();console.log(res.value); // ok return!res = it.next(2);console.log(res.value); // 3 这个例子向我们展示了生成器是如何双向传递消息的，yield表达式可以发出消息响应next(…)的调用，而next(…)可以向暂停的yield表达式发送值。 多个迭代器一个生成器的多个实例可以并发执行，并且可以彼此交互。12345678910function *gen(a)&#123; var b = a + (yield) return b&#125;var it1 = gen(1);var it2 = gen(2);it1.next();var res = it1.next(3).value;it2.next();console.log(it2.next(res).value); // 6 这个例子想说明的是一个生成器的多个实例可以并发执行，并且是互不干扰的。","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://yoursite.com/tags/JavaScript/"}]},{"title":"Prototype","slug":"Prototype","date":"2017-02-03T13:30:39.000Z","updated":"2017-02-09T09:04:46.000Z","comments":true,"path":"2017/02/03/Prototype/","link":"","permalink":"http://yoursite.com/2017/02/03/Prototype/","excerpt":"","text":"JS为了模拟面向对象“类”的实现，为了模拟类的复制行为，可能会使用一种叫做“混入”的方法，当然，这种方法和我们今天要说的原型并没有多大的关系。使用mixin的方式来模拟“类”的实现不常见，当然为了模拟”类“所付出的代价也会让我们得不偿失，JS中不并存在”类”，而是存在一种叫做原型的东西，请容我细细说来。 Prototype我们直接来讲文章的主角Prototype，其实JavaScript中每个对象都有一个叫做[[prototype]]的属性，这个属性就是对其他对象的一个引用。基本上所有的对象在初始化时[[prototype]]都会被赋予一个值，关于这个值是什么以及如何访问这个[[prototype]]属性，我会在后面提到。 还是先看一个例子：12345var obj = &#123; a: 1&#125;var obj2 = Object.create(obj)console.log(obj2.a); //1 上面的代码我们创建了一个对象obj，其包含一个属性a，我使用Object.create(obj)创建了一个新的对象，并把该对象的[[prototype]]属性赋值为obj，最后我们打印obj2中并没有显式声明的变量a，令人惊奇的是，我们成功的访问到了变量a，并且该变量的值为[[prototype]]属性引用对象obj的属性a的值！ 我想解释下为什么要对这段代码写这么详细的解释，因为对于大多数接触过JS的童鞋而言，原型已经是见怪不怪了，可是当初我学习JS的时候，脑子里完全没有原型的概念，直到有一天我慢慢开始懂得原型，那个时刻，我的心情就像现在写这段解释的时候这么激动! 看完上面这段代码和冗长的解释，即使不了解JS的童鞋也对原型有了一定的认识。在这里我想再说一下，[[prototype]]到底有什么用，其实很简单，当我们试图引用某个对象的时候，在底层其实调用的是一个GET方法，而这个方法首先会查找对象本身存在这个属性与否，如果不存在则通过[[prototype]]访问其原型对象，如果还是不存在的话，则访问原型的原型对象(别忘了原型对象也是普通对象)，知道找到或者达到尽头(Object.prototype)。这个道理很简单，如果你使用for…in循环遍历一个数组的话，也许你得到的结果除了数组成员，还包含一些其它成员(不信你试试看)，这些成员就来自原型对象，并且是可枚举的，而对于in关键字，也会查找原型链上面属性。 类在说类的时候，也许更恰当的是给类打上一个引号，因为JS中根本就不存在”类”，JavaScript中只存在对象，我们不使用“类”创建对象，更多时候我们直接创建对象。可有些时候，我们使用new关键字来初始化一个对象，我们甚至在ES6后开始使用class，extend等属于类的关键字，这貌似和我前面说的矛盾了…接着看一个例子：123456function A()&#123;&#125;console.log(A.prototype);// &#123;&#125;var a = new A();console.log(typeof a); // object 我们创建了一个函数A，并且这个函数有一个属性prototype，如果没记错的话，这是本篇文章第一次访问原型，然后我们使用new初始化了一个对象，有传统面向对象语言基础的同学就知道，这简直像极了“类”！我再次强调，JS中不存在类，而且此new非彼new，这里函数A在new关键字的作用下，新建了一个空白对象，并让其prototype指向的对象赋值给新建对象a的[[prototype]]属性(关联)，当然这里面还会做一些其它的工作，不过大体上就这样了，很简单吧！ 在JavaScript中，并不存在类的复制，我们不能创建一个类的多个实例，只能创建过个对象，只不过通过new这种方式创建的对象，其内部的[[prototype]]属性关联到同一个对象，这里所说的关联是建立一个联系，并不存在复制。 构造函数既然不存在类了，这构造函数听着也很别扭，我们暂且给它打个引号吧。上面我们在说“类”的时候，我们就用到了”构造函数”，函数A就是所谓的“构造函数”，其本质上就是一普通函数，是JS的一等公民，要说真要有什么区别，函数名首字母大写算吗？也许是吧。 再来写一个例子：12345function B() &#123;&#125;console.log(B.prototype);console.log(B.prototype.constructor === B);var b = new B();console.log(b.constructor === B); 我感觉我放了一个大招，突然让自己迷惑起来，这里我要说明的是，B.prototype和对象b有一个叫做constructor的属性，并且默认指向函数B。这个属性的名字会让我们对JS的误解加深，四级没过的都知道，constructor翻译过来可叫做“构造器”啊，那么既然B.prototype.constructor指向了B，我们还有什么理由不说B不是“构造函数”？讲到这里，我很无奈… 其实呢，JS中根本不存在什么“构造函数”，其就是普普通通的函数，只不过一旦加上new关键字，这个函数调用再也不是普通的函数调用，我们把它叫做“构造函数调用”。 这里不想再说下去了，写个复杂点的例子先：123456789function Student(name, city)&#123; this.name = name; this.city = city;&#125;Student.prototype.showInfo = function()&#123; console.log(`name: $&#123;this.name&#125;, from: $&#123;this.city&#125;`);&#125;var stu = new Student('limoer', 'Chongqing');stu.showInfo(); // name: limoer, from: Chongqing 这里有两个值得注意的地方，每个通过”构造函数调用”而生成的对象都存在两个属性name和city；我们给Student.prototype上添加了一个“方法”，这样所有的新建对象都关联了这个对象，可以引用这个“方法”，关于this的使用，这里就不在提了。 在说了这么多过后，我想把“构造函数”称为“关联函数”，因为所谓的“构造函数”其实并不存在，或者说是，我们并不知道一个函数在创建好后是否是“构造函数”，而如果我们把它叫做“关联函数”，因为它本质上做的工作包含了建立对象和其原型对象的关联，当然，这个叫法是不恰当的。 再来看看constructor属性，一般情况下，任何一个普通对象都存在一个constructor属性，其实这个属性并不是其本身就有，而是当引用该属性的时候，其可以在该对象的原型链中找到。现在我急切的想写一个例子来表明一个问题：1234function C()&#123;&#125;C.prototype = &#123;&#125;var c = new C();console.log(c.constructor === C); // false 我不啰嗦了直接看问题，这里对象c的constructor属性竟然指向的不是创建它的那个函数C，这也侧面印证了我上面说的话，通过构造函数调用创建的对象不直接持有属性constructor而是从其原型链中“继承”而来，所以当我们想写一段包含继承的代码时，如果还想用constructor属性，需要做必要的修正。123456function Main()&#123;&#125;function Sub()&#123; Main.call(this)&#125;Sub.prototype = Object.create(Main);Sub.prototype.constructor = Sub; 在结束“构造函数”讨论的时候，提醒一句，尽量不要使用constructor属性，要问原因？我想我已经不那么直观的在前面说出来了。 如何关联我在上面提到把“构造函数”叫做“关联函数”，这虽然是不恰当的，但也不是一无是处，因为使用new关键字的“构造函数调用”，其在创建一个对象过后，也把该对象的[[prototype]]属性关联到该函数的prototype上。当然，如何关联不止这一种方法，这里介绍一种使用更为普遍的方法，Object.create(proto)。 还是例子为先吧：1234567var obj = &#123; info: function()&#123; console.log('info'); &#125;&#125;var obj1 = Object.create(obj)obj1.info(); // info 这里我们使用字面量的直接形式创建了一个对象obj，该对象包含一个方法info，然后使用Object.create()创建了一个新的对象，并且该对象内部的[[prototype]]属性指向obj，概括点来说，该方法创建了一个对象，并把其关联到指定的对象。 Object.create()是ES5才引进的，在这里我实现一个polyfill代码作为本篇的结束：1234567if(!Object.create)&#123; Object.create = function(obj)&#123; function Foo()&#123;&#125; Foo.prototype = obj; return new Foo(); &#125;&#125; 当然，这个版本的polyfill代码无法做到更复杂的功能，而Object.create第二个参数可以指定要添加到新建属性的属性名、值等。 尾巴我们如果要访问一个并不存在的属性，在内部将会使用[[GET]]方法，并且查找该对象[[prototype]]所关联的对象，该关联实际上定义了一条“原型链”，在查找属性的时候会遍历整个“原型链”。 关联两个对象的最常用的两种方法是：（1）使用new关键字进行“构造函数调用”，创建一个新对象并进行关联；(2)使用Object.create()，创建新的对象，并时期和传入对象关联。 最后再次强调，JavaScript并不存在类，所有继承的实现完全是基于原型链，不存在复制。 注：到底前面所说的原型链的尽头到底在哪里呢？答案是Object.prototype，对于一般的原型链而言，其最终都指向了Object.prototype，这个对象包含了许多对象通用的方法，例如obj.toString()&amp;obj.valueOf()等。","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://yoursite.com/tags/JavaScript/"}]},{"title":"this","slug":"this","date":"2017-02-01T02:35:23.000Z","updated":"2017-02-09T09:09:16.000Z","comments":true,"path":"2017/02/01/this/","link":"","permalink":"http://yoursite.com/2017/02/01/this/","excerpt":"","text":"JavaScript中的this关键字一直都是学习JS的一个难题，我们往往不能准确的理解this在上下文中的含义，往往导致一些问题的发生。对于this关键字，我们需要知道的是：this即不指向函数自身也不指向函数的词法作用域，this在函数调用时被绑定，也就是说，它指向什么完全取决于函数在哪里被调用。 绑定规则在探讨具体的绑定规则时，我们先来看一个函数调用位置的例子： 123456789101112function foo() &#123; console.log('call foo'); bar();&#125;function bar() &#123; console.log('call bar'); baz();&#125;function baz() &#123; console.log('call baz');&#125;foo(); 我们声明了三个函数，相互嵌套。现在来寻找各个函数的调用位置，foo在全局作用域中被调用，bar的调用位置则是12345678910&gt; 下面来看看几种一般性的绑定规则#### 默认绑定看一个例子：```javascriptvar name = &apos;limoer&apos;;function showName()&#123; console.log(this.name);&#125;showName(); //limoer 这里12345678910111213#### 隐式绑定隐式绑定的规则是调用位置是否有上下文对象，即是否被某个对象拥有或者包含。来看一个例子：```javascriptfunction showName()&#123; return this.name&#125;var obj = &#123; name: &apos;limoer&apos;, msg: showName&#125;obj.msg(); // limoer 对于函数showName而言，其在obj对象中被引用，即函数此时引用有上下文的对象，此时使用隐式规则，this将被绑定到这个上下文对象，所以12345678910111213141516两点注意：（1）属性引用链只有或则说是最后以层才会影响调用位置，修改下上面的例子：```javascriptfunction showName()&#123; return this.name&#125;var obj = &#123; name: &apos;limoer&apos;, msg: showName&#125;var obj2 = &#123; name: &apos;lindo&apos;, obj: obj&#125;obj2.obj.msg(); //limoer （2）this的绑定与函数的调用位置息息相关，一个常见的问题就是被隐式绑定的函数会丢失绑定对象，即应用了默认绑定规则。12345678910var name = 'lindo';function showName() &#123; console.log(this.name);&#125;var obj = &#123; name: 'limoer', msg: showName&#125;var show = obj.msg;show(); // lindo 函数show虽然函数showName的一个引用，但是由于其指向的是函数的本身，此时bar是一个不带任何修饰的函数调用，应用了默认绑定规则。 显式绑定和隐式绑定相反，显式绑定是一种“强制性”手段，把this绑定到某个对象上，JavaScript提供了这样的函数,call()&amp;apply()，这两个函数是如何使用的呢？它们的第一个参数是一个对象，它们会把这个对象绑定到 this，接着在调用函数时指定这个 this。1234567var obj = &#123; msg: 'inner'&#125;function showMsg()&#123; console.log(this.msg);&#125;showMsg.call(obj) call 和 apply方法的区别仅仅是参数上的问题，除了第一个参数外，apply可以使用数组来传入剩余参数，而call则是以多参数的形式写出来。除了call和apply以外，还有一个bind方法，它接收一个对象，返回绑定了该对象的这个函数，此种方法是硬绑定，也就意味着，绑定不可更改，这里不再多做介绍。 new 绑定这是最后一种绑定方式，即“构造函数绑定”。会在将new关键字的时候在阐述此种绑定。 小结如果要判断一个运行中函数的 this 绑定，就需要找到这个函数的直接调用位置。找到之后就可以顺序应用下面这四条规则来判断 this 的绑定对象。 由new调用?绑定到新创建的对象。 由call或者apply(或者bind)调用?绑定到指定的对象。 由上下文对象调用?绑定到那个上下文对象。 默认:在严格模式下绑定到undefined，否则绑定到全局对象。一定要注意，有些调用可能在无意中使用默认绑定规则。如果想“更安全”地忽略 this 绑 定，你可以使用一个DMZ对象，比如ø = Object.create(null)，以保护全局对象。ES6 中的箭头函数并不会使用四条标准的绑定规则，而是根据当前的词法作用域来决定 this，具体来说，箭头函数会继承外层函数调用的 this 绑定(无论 this 绑定到什么)。这 其实和ES6之前代码中的self = this机制一样。","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://yoursite.com/tags/JavaScript/"}]},{"title":"提升","slug":"提升","date":"2017-01-30T03:26:01.000Z","updated":"2017-01-30T06:21:04.000Z","comments":true,"path":"2017/01/30/提升/","link":"","permalink":"http://yoursite.com/2017/01/30/提升/","excerpt":"","text":"我们都知道对于任何声明在某个作用域内的变量，都将属于某个作用域。但是对于JS而言，变量的声明与作用域还存在一种微妙的联系，这种联系我们叫做提升。 首先来看一个例子：12345console.log(name); // undefinedvar name = 'limoer';age = 2;var age;console.log(age); // 2 这个例子很好的体现了提升，输出name的时候，由于变量的声明在输出语句之后，想当然的使用RHS查找，查找失败抛出错误。但实际情况却输出了undefined，这是因为对于变量name，其声明被提升了，但是赋值语句却没提前，所以输出undefined。而对于age变量，赋值在输出前，我们理所应当的认为前面的赋值会被覆盖，但是程序却出乎意料的输出了2，这同样是因为变量age的声明提升到了首部，然后再进行赋值，最后输出了结果2。 上面的例子可以改写成这样：123456var name;console.log(name);name = 'limoer';var age;age = 2;console.log(age); 其实，对于提升的讨论就是“先有蛋还是先有鸡”的讨论，通过上面的分析，显然我们可以得出“先有蛋（声明），后有鸡（赋值）”的结论。 继续看一个例子：12345678910foo(); // call foofunction foo()&#123; console.log('call foo'); console.log(a); var a = 1;&#125;bar(); // TypeErrorvar bar = function()&#123; console.log('call bar');&#125; 这个例子说明了三个问题：（1）函数声明存在提升；（2）函数表达式不存在提升；（3）每个作用域都会存在提升。这里我只想解释一下为什么上面运行bar() 抛出类型错误，由于变量声明存在提升，所以实际执行的是下面的代码：123var bar;bar();bar = function ()&#123;...&#125; 由于bar的提升，调用bar()的时候并没有发生赋值操作，此时bar为undefined，所以对undefined进行函数调用会抛出一个TypeError而不是ReferenceError。 那么问题来了，既然变量和函数声明都存在提升，那么当这两个同时出现的时候，谁的优先级更高呢？ 同样，写一个例子如下：12345678foo(); // call foo functionvar foo;function foo()&#123; console.log('call foo function');&#125;foo = function ()&#123; console.log('call foo expressions');&#125; 好了，我们得出的结论是：函数声明提升的优先级更高。 注意：这里尽管foo的声明在函数foo声明之前，但是由于存在这样的规则所以被当做重复声明被忽略了，但是如果是函数声明，照样可以覆盖前面的声明。 小结ES6引入的const和let关键字的一大特点就是使用这两个关键字声明的标识符不存在提升，这就意味着无法引用未声明的标识符，从而可以避免由提升带来的一些列问题。 对于var a = 1;这样常见的变量声明方式，我们应该把它想象成两个步骤：首先是在预编译阶段对变量a进行声明，接下来是执行阶段，对a进行赋值，而提升则是将所有的声明“移动”到作用域顶部的过程。加油！","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://yoursite.com/tags/JavaScript/"}]},{"title":"JS作用域浅析","slug":"JS作用域浅析","date":"2017-01-28T12:43:19.000Z","updated":"2017-01-28T13:37:22.000Z","comments":true,"path":"2017/01/28/JS作用域浅析/","link":"","permalink":"http://yoursite.com/2017/01/28/JS作用域浅析/","excerpt":"","text":"我们都知道，JS的作用域其实包含了一系列的气泡，这些气泡包含了标识符(函数和变量)的定义,而这些气泡相互嵌套并且整齐排列。而在JavaScript中，这种气泡指的是函数作用域和块级作用域。 函数作用域函数作用域是JS中最基本也是最常见的一种作用域。所谓函数作用域，指的是在函数声明的过程中产生的一个“气泡”，这个“气泡”可以包含标识符。 来看一个例子：123456789function foo()&#123; var a = 1; function bar()&#123; var b = 2; &#125;&#125;console.log(a); // 失败console.log(b); // 失败bar(); //失败 在上面的这段代码中，函数foo所形成的作用域包含了标识符变量a以及函数bar,而函数bar所形成的作用域包含了变量b。当然，全局作用域中也包含标识符函数foo。 当然，就像上面程序的运行结果一样，直接访问变量a，b，函数bar都将失败。因为在函数作用域中，其声明的变量和函数中能在其内部(包含嵌套的作用域)使用。 由于函数作用域的特性，将会带来很多优点，譬如函数作用域可以隐藏函数内部的实现(非常重要)，也可以避免变量在声明过程中产生的冲突以及覆盖。 块级作用域有Java学习经验的童鞋对块级作用域可谓是了解，然而在JS中，块级作用域可不是那么常见(至少是在ES6出现以前)。 在let和const关键字出现以前，如果想找到块作用域的影子，那么只有with和try…catch语句了。 with关键字是JS块作用域的一个典型，在该作用域的范围内声明的变量都只在with语句块中有效。 而块作用域的另一个应用则是在try…catch中，相信即使对JS不够了解的童鞋都知道异常处理，对于JS中的try…catch语句，在catch块中将会产生一个err对象，而这一个对象只能在catch块中才能使用。看下面一个例子：1234567891011function showName()&#123; console.log(name);&#125;try &#123; showName()&#125; catch (e) &#123; console.log(e);&#125; finally &#123; console.log('end');&#125;console.log(e); 上面的这个例子showName函数内部试图打印一个并不存在的变量name，这里将使用一个RHS查找，并且在失败后抛出一个引用错误，我们可以在catch捕获到这个错误对象，但是我们没法在全局作用域上使用这个错误对象。 好了，除了这两个使用块作用域的典型，在ES6标准中，还新增了let和const关键字来实现块作用域。这里简单介绍一下，对ES6感兴趣的的童鞋们可以点这里来进一步了解ES6。 let和const都是有别于var的另外两种声明方式，let用于声明变量，该变量将会被绑定在{…}中，也就是说使用let声明的变量具有块级作用域。使用let声明的变量不但具有块级作用域，同时变量也不会提升。而const则用于声明常量，同样具有块级作用域，并且也不存在提升。let可以很好的用于循环，防止变量对于环境的污染。 小结函数是JS中最常见的作用域，声明在函数内部的变量和函数将会被很好的隐藏起来，这是一种良好的设计原则。而在ES6中，块级作用域再次被人们所日常使用。块作用域到底是不是函数作用域的替代方案，我认为到目前为止，不是！我们应该自己选择使用何种作用域，如何结合使用这两种作用域，来创造更加可读和健壮的程序。","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://yoursite.com/tags/JavaScript/"}]},{"title":"词法作用域","slug":"词法作用域","date":"2017-01-27T06:54:05.000Z","updated":"2017-01-27T14:11:24.000Z","comments":true,"path":"2017/01/27/词法作用域/","link":"","permalink":"http://yoursite.com/2017/01/27/词法作用域/","excerpt":"","text":"作用域模式有两种，一种是词法作用域，另一种是动态作用域，JavaScript采用的是词法作用域。 大部分的编译器会在编译阶段把程序进行词法化，也就是会对源代码中的字符进行解析，并且赋予词语语义。简单来讲，词法作用域就是词法阶段的作用域，词法作用域是由你在写代码时讲变量和块写在哪里决定的，当词法分析器在处理代码时会保持作用域不变。 考虑下面的代码：1234567891011var name = 'limoer';function showNameAPI(name)&#123; var city = 'Chongqing'; function showCity()&#123; var cid = 'CN'; console.log(city + cid); &#125; showCity(); console.log(name);&#125;showNameAPI(name) 这个代码一共包含三个逐级嵌套的作用域，全局作用域中声明了变量name，全局函数showNameAPI,函数作用域中showNameAPI所创建的作用域，包含标识符city以及showCity，最后是showCity创建的作用域,包含了标识符cid。 作用域查找会在找到第一个匹配的标识符时停止。这里的查找是由内而外的，并且在多级嵌套的作用域内可以定义同名的标识符，但是会产生覆盖。因为作用域查找的规则就是找到第一个匹配的标识符后停止。 无论函数在哪里被调用，也无论其是怎么被调用的，其词法作用域只与其被声明的位置有关。 欺骗词法上面说到词法作用域是在是完全在书写代码是就已经决定，但是也可以通过下面的两种方式在运行时来改变词法作用域。 当然，不出意外的，这两种方式会是不那么讨人喜欢的eval()和with。 我们首先来回顾一下eval()，这个函数接收一个字符串作为参数，这个字符串好像是运行时写在这里的代码一样。这明显是一种词法欺骗，其假装是在书写期间就在那里，而在运行时修改词法作用域。但是引擎对此并不知情，所以其依旧照常按照词法作用域进行查找。看一个例子：123456var name = 'limoer';function showName(str)&#123; eval(str); console.log(name);&#125;showName(\"var name = 'lindo'\") // lindo eval(‘name=”lindo”‘)会被引擎误认为在书写时就在那里，由于执行了上面的语句，此时name的值已经被修改了，并且产生了覆盖，遮蔽了外部同名的变量name。 在默认的情况下，如果eval中所执行代码中存在一个或者多个申明，其就会对eval()所处的作用域进行修改。无论何情况，eval(..) 都可以在运行期修改书写期的词法作用域。 再来谈with关键字，我们都知道with关键字用于重复引用一个对象的多个属性的快捷方式，而不需要重复引用对象本身。看下面的代码：1234567891011121314var obj = &#123; name: 'limoer', age: 20, city: 'Chongqing'&#125;console.log(obj.name)console.log(obj.age)console.log(obj.city)// 重复with(obj)&#123; console.log(name); console.log(age); console.log(city);&#125; 上面的这段代码突出了with关键字优点，它可以简化我们的代码，但是我们这里谈的是with关键字的词法欺骗，看下面一个例子：12345678910111213141516function info(obj)&#123; with(obj)&#123; name = 'lindo' &#125;&#125;var p1 = &#123; name: 'limoer'&#125;var p2 = &#123; city: 'Jinan'&#125;info(p1)console.log(p1.name) // 'lindo'info(p2)console.log(p2.name) // undefinedconsole.log(name) //lindo! 上面的这个例子很好的展示了with关键字的词法欺骗，这里创建了两个对象p1和p2，并通过info函数执行with(obj){…}，这里进行了简单的LHS查找，并将新值赋给name属性。但是请注意，这里p2对象并不存在name属性，也不会创建name属性，所以p2.name为undefined；这里很好理解，但是为什么神奇的是竟然多出了一个全局变量name呢!？ 这里执行with(obj){…}的时候，执行的LHS查找，所以当查找不成功时自动隐式创建一个全局变量，如果这样考虑，那么出乎意料的name属性就不难理解了。 总结JavaScript拥有的是词法作用域，所谓的词法作用域就是在进行词法分析时的作用域，也就是说，JS的作用域在代码一旦书写完成就能确定(靠书写位置来确定)。词法作用域的理解很简单，但是我们还是需要注意使用eval()和with语句带来的词法欺骗的原因。也许有人会说，在运行时修改词法作用域有利于实现复杂的功能，又利于扩展，何乐而不为呢？可我们在前面提到，在进行编译的时候，JS引擎会对代码进行优化，而这个优化则是根据代码的词法作用域，预先确定变量和函数的位置，才能在执行过程中快速找到标识符。而eval()和with的出现则有可能打破这样的格局，因为引擎在词法分析阶段并不能知道传入的代码到底是什么，会对词法作用域造成怎样的影响。所以，一切优化都是徒劳的，因为在运行时谁都不能确定此时此法作用域到底是怎么样的，所以JS引擎并不会进行优化，导致代码运行缓慢，性能并不好。所以，尽量不要使用它们。","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://yoursite.com/tags/JavaScript/"}]},{"title":"理解作用域","slug":"理解作用域","date":"2017-01-27T05:49:20.000Z","updated":"2017-01-27T13:56:32.000Z","comments":true,"path":"2017/01/27/理解作用域/","link":"","permalink":"http://yoursite.com/2017/01/27/理解作用域/","excerpt":"","text":"JS作用域的问题是老生常谈的问题了，我们都知道JS是不存在块级作用域的(ES6以前，try…catch是一个例外)，可是仍然实际编程过程中由于对作用域的理解不够深刻，踩坑无数，苦不堪言，恰逢寒假，又到了充(wan)电(shuai)的时间，所以把学习的重点放在认识JS语言本身上面。参考了资料《你不知道的JavaScript》。 实例为先首先，我们以var a = 1;这一个语句为例，看看这个过程JS到底干了什么。 毫无疑问JS是一门编译型的语言，但它的编译不是提前编译的，编译过程一般发生在语句执行前几个微秒。并且其和其它典型的编译语言一样，编译的步骤是相似的。首先编译器会把语句进行分词，分成单个的代码块，这些代码块被称为词法单元；接下来编译器会把词法单元流转换成一个由元素逐级嵌套所组成的代表了程序语法结构的树，这棵树被称为”抽象语法树AST”；最后一步，代码生成，该过程会把AST转换成可执行代码(机器指令)。 当然，JS的编译过程不会如此简单，其也会包含性能优化等。但这些所有的工作都在执行前几个微秒的时间内完成，并且立即执行它。 在正式的开始了解作用域之前，我们首先认识一下代码在执行时所需要的工具。 引擎：负责代码编译到执行过程 编译器：负责词法分析和可执行代码的生成等 作用域：负责收集并维护由所有声明的标识符(变量)组成的一列查询，并实施一套非常严格的规则，确定当前执行的代码对这些标识符的访问权限 现在开始对var a = 1的执行进行分解： 首先编译器会把这段程序分成词法单元，并且构建AST，当遇到var a的时候，首选编译器会询问作用域，是否已经已经有一个同名的变量存在于这个作用域集合中，如果存在则忽略该语句，否则在该作用域申明一个变量，命名为a；接下来，编译器会为引擎生成可执行代码，用于处理a=1这个赋值操作，引擎会询问当前的作用域是否存在一个名字为a的变量，如果存在，则使用这个变量，否则继续操作。最终，如果找到变量a，则给其赋值为1，否则将抛出错误。 总结：在对变量赋值时会存在两个步骤：首先编译器会在作用域中生成一个变量；然后引擎在运行时查找该变量，如果存在就赋值，否则抛出错误。 作用域1.嵌套作用域：作用域嵌套这个概念是很好理解的，当一个块嵌套在另一个块或函数中的时候，就会发生作用域的嵌套。当在当前作用域无法找到某个变量的时候，引擎就会在外层的嵌套作用域中寻找，知道抵达到最外层作用域或者找到了该变量为止。 考虑以下代码：12345var a = 1;function add(b)&#123; console.log(a + b)&#125;add(2) // 3 对变量a的查找是无法在add函数内部完成的，所以引擎会向上层作用域中查找，并且在外层作用域中找到。 LHS &amp;&amp; RHS引擎查找变量时常用的两种查找方式，这里需要注意的，如果执行右侧查找，无法找到该变量则会抛出引用错误。而进行左侧查找的时候，如果不成功，则会自动的隐式创建一个全局变量(都是在非严格模式下) 小结简单来说，作用域就是一系列的规则，这套规则用于管理引擎如何在当前作用域以及嵌套的子域中根据标识(zhi)符名称进行变量的查找。 下一篇，将深入的学习词法作用域","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://yoursite.com/tags/JavaScript/"}]},{"title":"我们的世界","slug":"我们的世界","date":"2017-01-26T13:40:17.000Z","updated":"2017-01-27T05:52:20.000Z","comments":true,"path":"2017/01/26/我们的世界/","link":"","permalink":"http://yoursite.com/2017/01/26/我们的世界/","excerpt":"","text":"最近看了一部叫做《我们的世界》的韩国剧情片，讲的是这样一个故事： 主人公李善被人孤立，没人愿意和她组队玩集体游戏，她总是最后一个被无奈选中，也不出意料的第一个被淘汰，然后孤苦伶仃的站在一旁，不知道是不是要离开。她在学期末结识了转校生韩智雅，不知道这是不是她结交的第一个朋友，但的确度过了一个快乐的假期。智雅父母离异，却在李善家中看到了温诺的家，于是心生情愫，逐渐远离李善，结交了新的朋友。从好朋友到最熟悉的陌生人，李善就这样在新学期开始，再次被孤立。而韩智雅为了不被大家孤立，不但选择装作不认识李善，反而和班上同学一起排挤她，这让李善儿感到很苦恼。父母的不知情以及后面的一系列的事，让她们两个的关系越来越糟糕。韩智雅成为班上的学霸，而李善也成为了以宝拉为首的小团体利用攻击智雅的工具。最终两人走上了互相伤害的道路，智雅说善儿的父亲是酒鬼，而李善儿反击，把自己知道的智雅撒谎的真相公之于众。最后的最后，一直被孤立的李善还是继续被孤立，而韩智雅也成为那个被孤立的人。故事的最后，班上又开始玩丢球游戏，这次大家不想和两个人玩游戏，李善率先被淘汰，站在一边，韩智雅被诬蔑，李善主动站出来为她说话，避免了僵持不下的尴尬和无助。最后两人站在场边，不时偷望对方。我不禁有这般假设，假如没有选择离开，如今又会怎样？可惜小孩子的思想太过复杂，捉摸不透。电影戛然而止，关于她们两个最终和好的画面留给观众去想。 好了，故事讲完了。李善儿和韩智雅最终还是被孤立，成为了校园冷暴力的受害者。回到现实，我也像她们俩一样，成了受害者，并且顺利的长大了。 故事是这样的过了这么多年，对小学和初中那段时光的记忆很微弱了。直到前些日子，小学群里面，有人发了一张毕业照照片，照片中的我站在人群的中央，探出一个脑袋，不注意真还发现不了这个瘦小的孩子。而到了快过年的时间，这个群就特别活跃，我却发现，我根本插不上一句话，好不容易找到一个机会发了一条消息，却被无视了，我开始回想，那段小学的日子里，我也经常这样被忽视，也许到现在，他们根本不记得了我了。 我开始回想上小学的那段时光。低年级的时候，我是班上再平常不过的，个子矮小，学习成绩一般，零花钱少，还特别闷。在我的印象中，那个时候我经常中午要去外婆家吃饭，来回的路上会有很多的孩子，但是没人愿意和我一起走，如果我走过去主动和他们说话他们就跑，或者打我。直到后来，我来回的路上终于有了一个伴，那是外婆村子里读小学的一个半傻子(我也不知道该怎么形容)，我们一起在小河沟捉鱼，玩弹珠，可也因为这样，其他孩子更不愿与我玩。那时候的我，却没有如电影里两个女孩子那样琢磨不透的小心思，只好选择沉默。 好吧，最终我还是有了第二个(第一个是外婆村子里的傻子)好朋友，在我三年级的时候，我和安静的同桌成为了好朋友，我们很多时候会在放学时候一起回家(貌似还不顺路)，开始的时候，我们都不怎么说话，可我发现一个人的字可以写得那么工整，一个人的画可以画得那么漂亮，我开始主动找她说话，后来我们两个人之间似乎有说不完的话，每到下课，我们才不会去和其他同学一样，逛零食店，打乒乓球，玩跳绳。可这段时间没过多久，我的第二个朋友一年后转校离开了。我又开始了被孤立的时光，知道逐渐的适应这样的生活。 这种情况直到小学六年级才得到转机，我的学习成绩也越来越好，我的一个亲戚成了我的班主任，他也很关照我。我虽然依然很闷，但是还是想逃离被孤立。为了融入坏孩子团体，我也开始变‘坏’，我开始在学校小卖店赊账，大部分都是请同学吃了零食；我开始和他们放学不回家跑到网吧去玩，这也是我最开始接触到网络的时候。可即便是这样，我仍然无法摆脱不了被孤立，我能够打很好的乒乓球但是没人愿意加我一个，我也能玩弹珠，但是又有人和我玩？ 后来，大家都升入了初中，整个初中我都是在极力的融入这个环境，总在坏孩子和好学生的角色切换，这样的生活我过了三年。初中毕业后，我只身一人去了一个陌生的学校读书，也就和当初的坏孩子军团失去了联系，也许他们也不记得了，那个曾经总是在帮他们跑腿和揽责(背锅？)的我，这个坏孩子。 我的那段故事讲到这个就要画上一个句号了，因为我在高中结识了最要好的几个朋友，我再也是那个被孤立的对象。虽然在不熟识我的人眼里，我仍然很闷，就像刺猬一样，让人不得接近，可现实中的我，不是这样😂 那么，我到底想说什么我相信在小时候的学生时代，被迫承受孤独的还有很多人。他们是多么渴望有个人成为他们的朋友，玩伴。可奈何无论怎么努力，却还是一再的被孤立。大概是因为差异，微小的差异让我们成为了受伤害的对象。也许是因为我矮小，抑或是我长得丑，家庭条件不好，甚至因为我成绩好…这些都成为了我们被排挤的理由。我们在任何时间段都会受到这样的伤害，成人学会了忍耐，而对于小孩子，他们很多就像李善和韩智雅一样，最终互相伤害。当我们还小时，因该是我们率真的时候，我们的小心思却伤害了我们。当然，这一切的一切，学校和家长并不知情，这样的伤害也许就会持续下去，伴我们成长。 小尾巴我是先看完简介的时候再看电影的，整个过程我心情很失落，我看到了我的小时候，我并没有被无尽的孤立的所吞噬，我也没有反抗去伤害他人，反而我适应了这样的生活，逐渐的我习惯了过一个人的生活。直到现在，当独处的时候，我会回想，如果如曾经厌倦了无尽的孤立选择伤害反抗，抑或是我本身就是孤立别人的’坏孩子’，如今我又怎样。奈何时间没有倒带，人生不会从头再来。","categories":[],"tags":[{"name":"心灵记事","slug":"心灵记事","permalink":"http://yoursite.com/tags/心灵记事/"}]},{"title":"给自己立个寒假计划吧","slug":"给自己立个寒假计划吧","date":"2017-01-11T12:37:52.000Z","updated":"2017-02-11T04:09:26.000Z","comments":true,"path":"2017/01/11/给自己立个寒假计划吧/","link":"","permalink":"http://yoursite.com/2017/01/11/给自己立个寒假计划吧/","excerpt":"","text":"从坐错公交，打不到车，取不出票，到最后如期上了回家的车；再到火车晚点，冒雨给人指路，凌晨等车回家；最后，谢天谢地，我安全的回来了，时间刚好定格在凌晨一点；又饿又冷度过了一夜，醒来已经是8点半了，我的寒假生活正式开始。说实话，一到放假懒散病加拖延症又犯了，就拿这第一天来说吧，早上起床吃完饭，就开始守在电脑前闲逛，打开炉石刷完任务，用150金币开了竞技场，抓牌太烂扔掉开出金橙；以为成功脱非怒买40包检验血统，结果只有一橙5紫，非洲血统无疑！血统验完吃了中午饭，分掉金卡，做了血法和墨水大师，组了一套宇宙无敌超级垃圾的宇宙法，直接试天梯，被龙牧和海盗战吊起来摩擦，打了一个半小时竟然还是18级。这时才想到寒假的第一天不是应该有一个好的开始吗，然后开始打开慕课网到处闲逛，在为数不多的React课程中看了几则短教程，虽然这些基本的知识都有了解。晚上吃完饭已经8点半了，打开某鱼直播288010房间，听着某丸唱歌，我开始想给自己写一个计划，对!就是关于这个寒假我该怎样度过的。不出意外，我会在十点半写完，然后继续看直播网络闲逛到12点睡觉，然后眼睛一闭一睁就又过了一天啦。 额，好吧，用这么欢快的语气写了一段过后，我觉得有必要再严肃一点。毕竟碰见就有人问，明年考研还是就业呢。而我，不知道… 我从学校带了三本书回来，因为我将有很长一段寒假时间会断绝网络所以实在没事做的时候还是可以看看书打发时间的。这三本书包含了数据结构和简单的算法(python)版本，JS设计模式，以及我急需的JS知识要点巩固。由于回家的旅途太过煎熬，所以并没办法呆很多书，并且我不认为我能够在寒假看很多书，而且我喜欢看电子版的。 下学期期末过后，不出意外的话我就要开始找实习工作了，虽然作为一个软件工程数据科学方向的同学，当初选数据科学竟然是为了能够在课堂上学习非关系型数据库！好吧，我的兴趣当然在前端，我毫不掩饰表达出我对前端的喜爱，虽然我到现在能力有限，还处在非常非常初始的阶段。 我想总结一下自己目前学习前端的状态，HTML和CSS没有系统的学习过，只能说能用；JS接触不到一年时间，期间也是断断续续的在学习，总的来说还是有所掌握的，ES6有匆匆忙忙看过一本书，花了在学校的三个月时间断断续续的学习了React和了解了其全家桶，目前处于遗忘的状态。Node一直在关注，但是没开发过实际的项目。总的来说，系统学习JS和React，做过小的课设，但是就没有了其它应用。基本水平还是处在能够照着DEMO写DEMO的水平。 寒假是一个很好的时间用在学习上，并且我给自己的目标是打好基础。 除了好好学习看书以外，当然还有其它的。比如每天坚持锻炼，早睡早起。如果要落实在每天的话,我想计划也许是这样的： 每天早上8点起床， 吃完早饭看会NBA(如果有直播的话)学习一会， 中午吃完饭休息一会，下午是看书学习时间, 晚上是一个绝佳的时间用在回顾整理并时间， 睡觉 当然，也可以有意外，比如我会和同学出去玩，我会选择一个好天气出去钓鱼，或者打篮球也是一个不错的选择。当然，也许会有很多时间花在了走亲访友上，虽然我不喜欢，但是也得去对吧！ 写到这里，我突然想起了几个月前，我好哥们突然说他报了班进军编程界，当时我站在一个“过来人”的角度还给了他很多建议，不知道如今的情况怎么样了，赶快写完打个电话寒暄一番！ 如论就像上面写的那样，我能够好好的规划自己的时间，还是三分钟热情，亦或是根本就把学习的事，抛在脑后，至少有一点，让自己的寒假生活过得满意。至于什么才算满意，只有等到时间所剩不多或者已经过了的时候，你才知道。从小到大，所有的路都是我固执选的，就连自己如今的专业，也仅仅是因为高中三年，对于智能手机的热爱。时间还足够长，长到我还可以继续浑浑噩噩再过上一年半，可又很短，我对当初初到西电交流的情景历历在目，如今却还在为补课的事而担忧。 在发明双绞线和光纤之前，我们使用古老的磁介质来进行存储和信息交流。如果一盘磁带能装10首歌曲，总容量为10MB，重量是50克，占用空间为0.00005m^3，一辆笨卡车拉着两吨也就是40000盘磁带，折和400GB容量，A-B地长度是100km，需要两个小时的才能到达。那么带宽将会是近450Mbps，远超目前家庭光纤的速度，那么问题来了，为什么这种传统而古老的方式会被取代呢？因为太麻烦了，写入到磁带和读取的时间太长了。所以，不要低估一辆拉着磁带在马路上狂奔的卡车的带宽，也不要盲目的高估它。我想，这就是我目前需要的。","categories":[],"tags":[{"name":"杂谈","slug":"杂谈","permalink":"http://yoursite.com/tags/杂谈/"}]},{"title":"计算机网路复习笔记之网络层基础","slug":"计算机网路复习笔记之网络层基础","date":"2017-01-04T16:15:19.000Z","updated":"2017-01-04T16:16:08.000Z","comments":true,"path":"2017/01/05/计算机网路复习笔记之网络层基础/","link":"","permalink":"http://yoursite.com/2017/01/05/计算机网路复习笔记之网络层基础/","excerpt":"","text":"网络层基础网络层关注的是如何将源端数据送到另一方，为了将数据送到另一方，可能会经过很多跳中间路由器。网络层处理的是端到端的数据。为了达到这样的目的，网络层必须知道网络的拓扑结构。并从中选取适当的路径传输；此外，网络层还得仔细选择路由器，避免线路拥塞和路由器负载过重，而其他路由器则很清闲。当源端数据和接收端数据来自不同网络时，需要网络层来解决。 1.网络层的设计问题5.1存储数据包与网络交换如果一台主机需要发送一个数据包，它将数据包传递给就近的路由器，路由器可能在它自己所在的LLAN上，也可能在通往IPS的点到点的链路上；在数据包到达路由器后，路由器的链路层对其进行校验和验证后，它首先会被存储在路由器上；接着沿路径被转发到下一个路由器，直至达到目标主机。这是一种存储-转发数据报交换的模式。 2.无连接服务的实现无连接的服务：所有数据包将会被独立的注入到网络中，并且每个包独立路由，不需要任何的提前设置。这里我们把数据包也称为数据报，对应的网络被称为数据报网络。有连接的服务：在发送数据包之前，需要建立一条源路由器到目标路由器的路径，我们把这个连接称为虚电路。其类似于电话系统中建立的物理电路，该网路也被称为虚电路网络。 每个路由器将含有一个路由表，它指明了每一个可能的地址应该将数据包送到哪里去。每个表项由两部分组成，目标地址和通往目标地址所使用的出境线路。每个路由表是可变的，管理这些路由表并作出路由选择的算法是路由算法。IP协议是Internet的基础，它是无连接协议的范例。每个数据包携带一个IP地址，路由器根据IP地址来单独的转发每一个包。 3.有连接的服务有连接的服务需要一个虚电路，为了避免数据包选择一条新的路径。需要使用路由表记录下来已经确认的路径，当连接被释放，虚电路消失。在面向连接的服务中，每个数据包都带有一个标识符，指明它属于哪一条虚电路。 这里的路由表是这样的，对于某个路由器而言，其包含了入境和出境两个逻辑列，每个列含有两行，分别指定了路由器和标识符。这里的出境标识符是可变的(为了解决某些冲突需要改变一下标识符)。这个改变出境标识符和的过程也被称为标签交换。 4.简单的比较使用虚电路需要有一个花费时间并且耗费资源的建立过程，之后处理数据包非常容易；在数据报网络中，不需要建立连接，但路由器需要一个更复杂的查找过程。对于数据报网络而言，需要使用更长的目标地址，因此如果在数据量很小的情况下，目标地址承担了巨大的开销，宽带资源被浪费。在控制拥塞方面虚电路表现得更好，因为在建立连接时，资源可以提前预留。最后是事务处理和健壮性，虚电路网络并不能够表现得很好，因为其需要花费大量的时间用于建立和清除虚电路并且一旦发生宕机，虚电路终端，所有的数据都会受到影响。 路由算法(⭐️)路由算法属于网络层软件的一部分：其负责确认一个入境数据包应该被发送到哪一条输出线路上。如果网路选择了数据报，那么路由器需要对每一个到达的数据包重新选择路径，因为自上次选择了过后，可能最优路径已经发生改变；对于使用虚电路时，只有在新建一条虚电路时，才需要路由决策，这种情形被称为回话路由。 我们可以把一个路由器内部想象成为有两个进程，一个用于接收数据包，检查数据包并且转发，一个则用于更新路由表。 路由算法需要含有的特性：正确性，简单性，鲁棒性，稳定性，公平性和有效性。 路由算法分类： 非自适应算法：不会对当前进行测量，或者估算流量和拓扑结构来调整路由决策，相反所有路由都是在离线条件下计算好，并在网络启动时下载到路由器中，这个过程也被称为静态路由。该算法只适用于对路由选择已经很清楚的情况。 自适应算法：改变路由决策以便反应出拓扑结构的变化，通常也反映出流量的变化。这些动态路由算法在各个方面也有表现不同，获取信息的来源不同，改变路径时间的不同，对路由的优化度量不同等。 优化原则最优路径的一般陈述：如果路由器J在路由器I到K的最优路径上，那么从J到K的最优路径仍然遵循同样的路由。 汇集树：作为最优化原则的一个直接结果，从所有的源到一个指定目标的最优路径的集合构成的一颗以目标节点为根的树。汇集树不一定是唯一的。汇集树不含有环，因此在指定的跳数内一定可以完成对数据包的传递。每一个路由器都有一颗汇集树，根节点就是该路由节点。 具体的路由算法最短路径算法构建一张网络图，图中的每个节点代表一个路由器，每条边代表一段通信线路。为了选择一对给定路由器的路由，算法只需要在图中找到他们的最短路径。采用Dijkstra算法（这里的思想完全一致）。 泛洪算法路由器将数据包发送给到达线路之外的所有出境线路。分析：这样的做法会导致大量的冗余数据包，并且如果不加限制的话，将产生无数个重复的包。限制的做法有： (1) 在每个包头加上一个跳计数器，每经过一个路由器，跳数减一，跳数为0时，丢弃掉该包。理想情况下，计数器的大小是源端到目的端跳长度；最坏的情况是整个网络的最长路径。 (2) 追踪已经泛洪过的数据包，避免第二次发送它们。每个源路由器在接收数据包时给数据包添加上一个序号，每个路由器为源路由器建立一个表，其中包含了这些已经泛洪过的数据包的序号，如果某个数据包的序号在这张表中，则不再泛洪该包。(3)为了防止这张表无限膨胀，每个表使用一个计数器k作为参数。它表示直到k的所有序号都已经观察到了。当一个数据包入境时，很容易检测该包是否被泛洪过，只需要比较和k的大小，如果泛洪过，丢弃该包。 泛洪算法对于广播是一种有效的手段，但是对于其他用途而言不切实际。泛洪算法的鲁棒性非常好，如路由器损坏导致拓扑结构发生变化，仍然能够起比较好的作用。 距离矢量算法⭐️每个路由器维护一张表，表中列出了当前已知到每个目标的最佳距离以及所使用的链路。这些表通过邻居之间相互交换信息而被不断更新，最终每个路由器都了解到达每个路由器的最佳链路。 路由器维护的表一共有两项，第一项是目的路由，第二项是到其的最优路径的跳数(也可以是一个综合计算的数值)。通过邻居分享的路由表可以计算出新的信息，如果有最佳路径，就更新该路由器的路由表。注：感觉这里是绝对的重点，一定要掌握如何计算和更新路由表。 距离矢量算法会产生一个无穷计算的问题，关于什么是无穷计算，这里需要看书。距离矢量算法的另一大缺点就是：当网络拓扑结构发生变化时，路由算法需要太长的时间才能收敛到稳定的状态(无穷计数问题引起) 链路状态路由算法⭐️步骤： 发现其邻居节点，并掌握它们的网络地址 设置到每个邻居节点的长度值(或者说是成本度量值) 构造一个包，包含上述信息 将这个包发送给所有其他路由器，并且接受来自其他路由器的包 计算出到每个其它路由器的最佳路径 对于发现邻居，其实是很好理解的，每个路由器在启动过后都发送一个特殊的HELLO数据包，其邻居接到过后就会返回一个应答，包含了自己的网络地址等信息。 链路成本的计算：一种常用的选择是成本与链路带宽成反比。或者使用延迟估算来作为成本计算的方式。 构造链路状态包：包含了以下内容：发送方的标志，序号，年龄(后面介绍)，邻居和其成本的二元组。 构建链路状态包的时期为：周期性的构建或者当网络拓扑结构发生变化了进行构建。 对于发送包和接收包，这里使用的是泛洪算法，age字段的作用是防止数据包无限的生存下去，递减到0时则丢弃该包（这里不是到达一个路由器age-1）而是每过一个时间减一，比如说一秒。 计算新路由：使用的是Dijkstra算法计算。 链路状态路由算法相比距离矢量算法需要更多的内存和计算，对于一个具有n个路由器的网络，每个路由含有k个邻居，则用于存储输入数据的内存与kn成正比，并且计算时长的增长快过kn，在大型网络中运行这个算法仍然是个问题。不过在实际过程中，由于其并没有慢收敛的问题，因此工作的还不错。 层次路由对于规模特别大的网络，可以把网络分成区域，对于区域内部仍然构建详细的路由，对于区域外部，只构建层次的路由表项，不关心内部。这样可以减小一个路由器维护的路由表的大小。 广播路由使用泛洪算法，使用逆向路径转发的思想构建一颗汇集树。生成树：网络的一个子集，包含所有路由器并且不含环路。汇集树属于生成树的一种。 组播路由为了防止给不是该组成员发送，在采用广播的思想上，需要对生成的汇聚树进行剪枝。通过把不是改组成员去掉，可以构建组播树。 如果使用的是链路状态路由算法，每个路由器知道完整的拓扑结构，并且知道每个路由器是属于哪个组的情况下，可以使用最简单的组播算法。每个路由器针对组内每个发送者构建一颗它自己修剪后的组播树。具体的做法是首先构建一颗简单的汇聚树，然后再把不是该组的链路去掉即可。 拥塞控制算法⭐️拥塞：网络中存在太多的数据包导致数据包被延迟和丢失，从而降低了传输性能。 拥塞控制和流量控制 拥塞控制的途径：简单来说需要增加资源和减小负载。在时间尺度上，要么事先避免拥塞，要么在发生拥塞过后迅速做出反应。 基本方法是建立一个与流量匹配的良好网络；根据流量模式制定路由（改变最短路径权重等）；如果无法增加容量，那么可做的就是降低负载了。例如对于有连接的服务，如果此时负载很大，应该拒绝建立虚电路的请求，这样的控制也被称为准入控制。 流量感知路由把链路权重设置成为一个带宽，延迟，负载，排队延迟的多方面函数，在其他条件都相同的情况下，最小权重的路径更青睐那些轻负载的路径。 早期的流量感知路由存在一个问题，把负载考虑进链路权重过后，如果某一条链路非常拥挤而另外一条很空闲，那么下一时刻负载将会转移到这条链路，但是下一时刻有回到原先的链路，从而导致网络抖动。解决办法是不考虑负载，只考虑带宽和传输延迟，这样的问题就不会发生。 准入控制这是一种用于虚电路网络，防止出现拥塞的技术。其基本思想很简单：除非网络可以携带额外的流量而不会变得拥塞，否则不再建立新的虚电路。准入控制可以和流量感知路由结合，在建立虚电路的过程中，避开负载高的线路。 流量调节必须要解决的两个问题： （1）路由器必须确定何时快要接近拥塞(链路利用率，丢包数和排队包数)，每个路由器连续监测它正在使用的资源（2）路由器必须及时把信息反馈给造成拥塞的发送方 对于信息的反馈,这里有下面几种方法： 抑制包，路由器随机选择一个被拥塞的数据包，给数据包的源主机发送一个抑制包。同时打上标记，以防在发送的图中产生更多的抑制包。 显式拥塞通知，基本原理如下，路由器给每个转发的数据包打上标记，表明目前该链路正经历着拥塞，当包到达接收方时，接收方在回复应答包的时候会携带流量调节的信息，从而告诉发送方控制发送的速度。 逐跳后压，存在一种这样的情况，当发送方速率很快的时候，即使抑制包发送出去后，在到达发送方之前，仍然会注入大量的数据导致网络更加拥挤，所以这里可以这样：让抑制包抑制它经过的每一跳，这样的话，短时间内抑制效果将会生效，来达到快速缓解负载很大的链路段的压力。 负载脱落当流量感知路由，准入控制和流量调节都没办法消除拥塞是，路由器可以使用负载脱落来消除拥塞。其思想很简单，当路由器快要被淹没时，直接丢弃掉这些数据包。这里有一个问题，丢弃什么包呢？当然是丢弃掉不那么重要的包，这里的选择是这样的，发送方在发送包之前就给每一个包打上标签，表明这个包有多么重要，这样在丢包的时候可以参考这个标签，丢弃掉不那么重要的包。 随机早期检测算法（RED ⭐️）：为了确定何时丢包，路由器要维护一个运行队列长度的平均值，在这个值超过某个阈值时，该链路就被认为即将拥塞，因此路由器丢弃一小部分的包（随机）来避免拥塞。这里使用随机丢包的好处是可以更高概率的丢掉速率很快的发送方的包，因此发送方不得不重传这些被丢掉的包，而上层协议也会建议该发送方放慢速度，来达到避免拥塞的效果。 服务质量有些应用对于网络的需求特别大，并不满足于网络的“尽力而为“，这个时候网络需要提供良好的服务质量来达到要求。 最简单的方式就是过度配置：建设有足够网络容量的网络，可以满足任何的流量需求。这不是可笑的想法，因为电话系统就是一个很好的例子。 确保服务质量必须解决下面的四个问题：（1）应用程序需要网络什么样的质量？（2）如何规范进入网络的流量？ （3）为了保障性能如何在路由器预留资源？ （4）网络能否安全的接受更多的流量？ 应用需求流：从源端发送到一个接收方的所有数据包被称为一个流。对于每个流的需求可以以下面四个参数来衡量：带宽，延迟，抖动，丢失。不同的应用这四个方面的要求不同。 流量整形漏桶算法和令牌桶流量想象一个漏桶，无论倒入水的速率有多大，只要漏桶还有水，其速率恒定；如果没有水，速率为0；如果超出漏桶容量，额外进入桶的水都会通过桶侧分流，最终流失掉。 概念上，每个主机连接到网络接口中含有一个漏桶，为了向网络层发送数据包，必须往网络中注入更多的水。如果漏桶满了来了一个数据包，该数据包必须排队等待漏桶空出来时再接纳，或者直接被丢弃。 令牌桶：把网络接口想象成为一个漏桶，正在往里灌水，速率为R，桶容量为B。现在，为了发送一个数据包，我们必须能够从桶内掏出水或者令牌。桶内只可以累积固定数量的令牌，如果桶是空的，那么必须等到累积到一定的令牌才能发送一个数据包。 包调度定义：在同一个流之间以及在竞争流之间分配路由器资源的算法成为包调度算法。不同的流可以预约潜在的资源有以下三种：带宽，缓冲区，CPU周期。包调度算法负责分配带宽和其他路由器资源，具体的做法是确定下一次把缓冲区中的哪些数据发送到输出线路。最简单的方式是先进先出FIFO。FIFO路由器在队列满时通常丢弃新到的数据包，由于新到的数据包会排在末尾，因此这种行为也被称作尾丢包。FIFO容易实现但是无法提供较好的性能。公平队列：针对每一条输出线路，路由器为每个流设置单独的队列。当路线空闲时，路由器循环扫描各个队列，然后分别取一个进行发送。这样就保证了绝对的公平，但是也有不足(宽带需求小的往往占据了更多的带宽)。 其他的调度算法：加权的公平队列优先级调度时间戳先后发送 网络互联隧道技术处理两个处于不同网络相互连接时的情况超级困难，然而却存在一种非常常见的情形，就是源主机和目的主机的网络类型是完全相同的。但是其中间却隔着一个不同的网络。解决这样问题的技术被称为隧道技术。隧道技术广泛被用于那些因使用了其他网络而被隔离的的主机和网路。结果生成的网络就被称为覆盖网络，因为它有效的覆盖在了基础网络之上。隧道的缺点就是无法到达位于隧道之下的网络的主机，因为数据包无法从隧道中逃生。","categories":[],"tags":[{"name":"计算机网络","slug":"计算机网络","permalink":"http://yoursite.com/tags/计算机网络/"}]},{"title":"计网复习之介质访问控制子层复习笔记","slug":"计网复习之介质访问控制子层复习笔记","date":"2017-01-03T13:29:08.000Z","updated":"2017-01-07T12:37:30.000Z","comments":true,"path":"2017/01/03/计网复习之介质访问控制子层复习笔记/","link":"","permalink":"http://yoursite.com/2017/01/03/计网复习之介质访问控制子层复习笔记/","excerpt":"","text":"介质访问控制子层传统信道分配FDM&amp;TDM的缺点是带宽利用率不高，并且存在高延迟动态信道分配 多路访问协议纯ALOHA协议：当用户有数据时就传送，解决冲突的办法是，在一个站发送了一个帧过后，把该帧广播到所有其他站。不监听信道，所以冲突是很容易发生的。 分槽ALOHA：将时间分成离散的时间间隔，这些时间间隔就为时间槽，每个时间槽对应一帧。最佳的效率为1/e 载波监听多路访问协议：站监听是否存在载波(即是否有传输)，并依据此进行相应的操作。 1-坚持载波监听多路访问：站点在发送数据前监听信道，如果信道上有其他数据正在传输，则等待，直到信道变得空闲；然后发送该帧，如果发生冲突，则等待一个随机时间，在监听信道，重复上面的操作。存在的问题：（1）当等待发送的帧不为1时，若信道出现空闲，所有的帧将在同一时刻发送，必将导致冲突。（2）信号的传播延迟也会带来冲突。如果一个站刚开始发送并且信号并没到达一个准备发送的站点，此时这个站点也将发送从而导致冲突。 非坚持式CSMA：和前面坚持式协议不同的是，同样该协议会监听信道，但是不会一直监听信道，也就是说，当信道忙时，其直接会等待一定的时间，在尝试监听信道，直到信道空闲，才发送该帧。该算法很好的解决了冲突的问题，但也带来了更高的延迟。 P-坚持式CSMA:适用于分槽的信道。当一个站准备好要发送数据时，其监听信道，如果信道是空闲的，则其按照概率p发送该帧，以1-p的概率讲该帧推迟到下一个时间槽发送。如果下一个时间槽也为空，则其同样以p概率发送这一帧，以1-p的概率延迟该帧到下一个时间槽，以此往复，直到这个帧被发送出去。如果发生冲突，则等待一个随机时间再进行尝试发送。 带冲突检测的CSMA：检测到冲突过后立即停止传输该帧，等待一段时间再尝试发送。这种方式可以有效的节省时间和带宽。带冲突检测的CSMA会交替的出现传输期，竞争期和空闲期。 检测冲突的最小时间是将信号从一个站点播到另一个站点所需要的时间t。所以一个站点认为自己“抓住”了信道，最坏的情况下需要的时间是二倍于传送到另一个站点所需要的时间2t，当然这是最坏的情况。 无冲突的协议上面带冲突检测的CSMA虽然如果一个站抓住了信道，冲突就不在发生。但是冲突还是会发生在竞争期中，特别是当延迟很大，线缆很长而帧特别短的情况下，冲突会浪费带宽，并且让一个帧的发送时间动荡不定，无法很好的适应实时流量。 无冲突的协议在整个帧的发送过程中都不会产生冲突。 位图协议。每个竞争周期都包含N个槽，若某个站要发送一个帧，则在相应的槽中插入一位来表明自己将要发送。当经过了所有的N个槽后，所有的站点都知道哪些站希望传递数据，这个时候就可以按照数字顺序开始发送了。传输数据之前需要广播自己传输意愿的的协议被称为预留协议。高序号站点平均只需要等待0.5N个槽时间，而低序号站需要等待的平均时间是1.5N个槽的时间。对于所有站而言，需要平均等待的时间为N个槽的时间。在低负载的情况下，每一帧的额外开销为N位，数据长为d，则信道的利用率为d/(d+N). 令牌环协议。如果一个站点有需要发送的队列，则其发送一帧，并把令牌传递给下一个站点，如果该站没有要发送的帧，则只是简单的传送一下令牌而已。这里的令牌指的是发送帧的权限。等待时间为令牌传递N-1次的时间和N-1个站点发送一个帧的时间。 二进制倒计数。解决站点多的问题。这里每个站点以二进制串的形式广播自己的地址，从高位序开始，所有站的地址都有相同的长度，对于同一时刻，对发送进来的位进行布尔或。并且存在一个仲裁规则：bool或为为1时，舍掉为0的站点，bool或为0时，继续比较下一位。信道利用率为d/(d+log2N)，经过优化甚至可以达到100%。 有限竞争协议竞争的协议在负载低的情况下具有非常低的延迟，非竞争协议在负载高的情况下具备很好的信道利用率，因此有限竞争协议结合了这两种协议的优势，在低负载的情况下使用有竞争的协议，在高负载的情况下使用无竞争的协议。有限竞争协议是这样做的：将所有的站点划分成组，只有0号组才用时间去竞争0号槽，类似的只有n号组才能去竞争n号时间槽，若出现冲突，直接往后面推到下一个时间槽。当负载很低时，每个时间槽的站点数就可以多一些，若负载很高的时候，每个时间槽的站点就需要低一点，甚至为了避免冲突只使用一个站一个组。 无线局域网协议冲突发生在接收端而不是发送端，两种问题：隐藏终端问题和暴露终端问题(好好理解）。这里有一个协议：冲突避免多路访问（MACA），其原理是这样的：如果一个站点想要给另一个站点发送帧，那么其先发送一个RTS帧，然后接收方再发送一个CTS帧作为应答，然后就可以发送了。如果一个其他站点听到了RTS帧，那么它一定离该站点很近，其必须保持沉默，等待足够长的时间使CTS返回给这个站点。如果一个站点收到了CTS，其必须保持沉默，知道该帧被顺利的发送(可以根据帧长来估计等待的时间)。 二进制指数后退的CSMA/CA使用1-坚持CSMA算法，在发生冲突过后立即停止传输，并等待一定的时间尝试传输。如果再发生冲突，则随机等待的时间槽的最大值按指数级增长。例如如果两个站点冲突一次，则选择随机等待0或者1个时间槽，若再次冲突，等待的时间槽为0，1，2，如果冲突n次，则随机等待的时间槽的为0-2^n -1之间的一个随机数。当达到1023的最大值的时候，便不再增加。该算法可以动态的确定发送站的数量，如果随机数的最大值为1023，则冲突的可能性就很小了；如发生冲突，平均的等待时间将会是数百个时间槽，从而延迟时间特别大。这种算法只能保证两种情况：（1）在冲突只有少量发生的情况下，可以确保较低的延迟；（2）当许多站点发生冲突的时候，可以在一个合理的时间间隔解决冲突。 交换式以太网使用交换机来处理不断增长的负载。交换机：把帧传输到该帧想去的端口。当交换机接收到来自某个站的帧，其检查该帧的以太网地址，确认该帧去的目的地端口。并且是全双工的，并不用担心任何的冲突，因为不会发生冲突。交换机可以同时发送多个帧(发往不同的端口），如果同时有多个帧需要经同一个端口发送出去，那么只需要交换机含有缓存。交换机也能够更安全的发送，因为其不是以广播的形式发送出去的，它只会发给某一个特定的端口，经由该端口被发送出去。所以相比集线器，其更加安全。 千兆以太网设计目标：提升10倍的性能，并保持与现有以太网标准的兼容。提供单播和广播的无确认数据报服务，采用48位的地址，保持相同的帧格式，包括最大最小帧的要求等。为了达到距离经典以太网100倍的速度提升，在其他不变的情况下，最大的线缆长度下降了100倍，即为25米。考虑到25米在实际运用中的限制，这里使用了两种方法吧线缆长度深升到了200米。 （1）载波扩充：让硬件在帧的后面加上一定的长度，将帧的长度扩展到512字节，再又硬件去除填充。这里存在一个问题，利用率不高(填充大多数是无用的) (2)帧突发：将多个帧连在一起，如果不满512字节再进行填充。这种方案是比较有效的(但前提是存在那么多帧) 没有写入标准的还有巨形帧，可以达到9KB，但与较老的标准并不兼容。 以太网传输中的冲突和帧大小的关系以太网的最大传输长度为2.5km，信号在介质上传输的速度为2*10^8m/s那么延迟为2500/v = 12.5us最坏的情况下是若发送一个很小的帧，则检测冲突需要的时间为2t，25us。在长的线缆上进行传输，需要经过4个中继器。因此传输的延迟最坏为50us，这里取到51.2us，在一个10Mbps的经典以太网上，其帧最小长度为512位=64B。这里的51.2us指的是传输间隙。最小长度的定义：为了使发送方能够在一个帧的传输时间内检测到此帧是否在链路上发生冲突。若帧小于了最小帧长，那么就无法检测是否发生了冲突了。 802.11增加可靠性：（1）降低传输速率（2）减小帧的长度(拆分帧)节省电源,服务质量,对等流量传输 802.11帧结构数据帧的格式：帧控制字段(2字节，含有11个子字段)持续时间(2字节)：告诉本帧和其确认帧会占据信道的时间，其他站点根据该值管理各自的NAV机制。地址字段(3个，各6字节)：第一个接收方地址，第二个发送方地址，第三个指明远程端点。序号字段(2字节)：帧的编号，用于重复字段的检测数据字段：0-2312字节校验字段：4字节 和管理帧(数据字段不相同)以及控制帧略有不同 802.11服务 关联：把移动站点连接到AP上(我们常说的连接Wi-Fi) 重新关联：允许移动站点改变它的首选AP(切换Wi-Fi) 认证（WPA WPA2） QoS流量调度：给予视频和语音更高的优待 发射功率限制 动态频率选择 802.16基站使用了更大的功率和更好的天线，传输距离至少是802.11答十倍以上，并提供了更多的差错处理。 数据链路层交换网桥：连接多个局域网组成更大的局域网，实际上网桥就是以太网交换机。网桥工作在数据链路层，通过检查数据链路层的地址来转发帧。路由器：检查数据包的地址，并且基于这些地址路由包，它只能按照预先设计好的协议工作。 网桥的作用：（1）连接多个LAN，可构建更大的容量（2）增加了传输的可靠性(可以决定转发什么不转发什么)（3）完全透明，安装和使用简便。 网桥是如何工作的呢？它接收隶属于每个端口的站发送的帧，网桥必须选择丢掉或者转发一个帧，作出决定的是依据帧的目标地址。 简单的方法是为每个网桥配备一个大的哈希表。该表列出每个可能的目标地址以及隶属的输出端口。 当网桥初次被使用到网络中的时候，其哈希表是空的。因此为了构建这样一个哈希表，网桥将使用泛洪算法，其对于每个未知目标地址的入境帧，网桥将会把其输出到所有的出境端口，网桥将会学习每个目标地址在哪买。一旦知道了一个目标地址，下一次发送直接就被放到正确的端口上发送。 网桥所用的算法是后向学习法。当打开，关闭或移动网桥或机器的时候，网络的拓扑结构就会发生变化。为了记录这种动态的拓扑结构，一旦构造出一个哈希表项时，帧的到达时间也被记录在表项中。并且网桥会有一个进程扫描哈希表，清除那些时间值有几分钟的项(表示几分钟未使用)。这样的算法也意味着，如果一台计算机静止了几分钟，那么其再进行通信，帧仍然会被泛洪。 下面是一个详细的流程： 如果去往目标地址的端口和源端口相同，则丢弃该帧(不需要经过该网桥)。 如果去往目标地址端口与源端口不同，则以目标端口发送该帧。 如果目标端口未知，则使用泛洪算法。 生成树网桥解决冗余链路导致的无限循环。构建一颗生成树来解决这样的问题。 其他中继器:物理层，用于处理自己所连线缆上的信号，一般用于增强信号。集线器：集线器，将多个线路连接在一起，从任何线路发来的信号都将发送到其他所有线路上。如果两帧同时到达，那么将会发生冲突。网关网桥，交换机：数据链路层，多端口，用于连接过个局域网在一起。路由器：网络层，当一个数据包进入路由器，帧头和帧尾被去掉，帧的有效载荷字段送到路由软件。路由软件根据帧的头信息来选择输出线路。这个地址指的是IP地址，而不是48位的IEEE802地址。 网关：传输网关，将使用了两台不同传输协议的的计算机连接起来。网关，应用网关，理解数据的格式和内容，并且根据需要将数据包重新进行格式化。","categories":[],"tags":[{"name":"计算机网络","slug":"计算机网络","permalink":"http://yoursite.com/tags/计算机网络/"}]},{"title":"我的2016","slug":"我的2016","date":"2016-12-31T15:33:49.000Z","updated":"2017-01-01T11:04:56.000Z","comments":true,"path":"2016/12/31/我的2016/","link":"","permalink":"http://yoursite.com/2016/12/31/我的2016/","excerpt":"","text":"图片来自https://dribbble.com/shots/3186188-Happy-New-Year 写在前面 最近发现有好多童鞋都在回顾自己的2016，好吧，我也顺应一次潮流，来写写我的2016年。 2016年的最后一天，也就是今天。我是这样过的：睡到10点起， 看了一场NBA， 中午开始写一个实验到下午饭点，没写出来， 晚上6点到9点，图书馆自习，复习了计网第一章, 回来看直播，同时玩炉石到11点， 跑去其它宿舍唠嗑，11点半， 开始写软文，现在 …在一天的最后十几分钟里，回想一下，上面描述的总总已经成了我2016最后一个月的常态，并且持续时间超过了21天，已经从入门到精通…更可恨的是，最后一个月诸事不顺！不但挂了科，还…嗯..好像就挂了科，还开到了橙卡，成功脱非。我严肃的说，这真是我真实的写照…哈哈！😂 写了一通废话，还是进入正题吧。先总结一下，2016过的不能再平凡了，成绩还是老样子不上不下，编程技术有所进展，选定目标专注前端，大部分的时间过的还算充实。好了，写完了，这就是我的2016，我希望我的2017能够找一份实习工作，顺利补完所有没修的课，然后2018顺利毕业。对，听着就很实在对不对。。 可是…………………… 如果有一个比惨大会的话，我一定会拿冠军的😢 负气 我负气不是说我过得不好，而是有那么些不甘心 任何人心有不甘，那么他一定是自卑了。而我的自卑完完全全是看到旁边有那么多优秀的人，无论是在西电还是在山大。没人会承认比别人差，我也是这样，所以我觉得自卑也好，负气也罢，一定程度上让我能够平静下来，去追寻自己想要的东西。2017，仍然是我负气的一年。 离开 我特别不想回望过去，因为一定有离别 2016年7月，我离开了呆了十个月的西安和呆了一学年的西电，在我的印象里，我对西安和西电抱怨了不下十次，最开始我甚至不想待在这里，到最后我离开也是头也不回。可是，我是真的喜欢那里，我临走之前，有过这样的想法，我一定要考研来这里，然而时过境迁，我已没了要去考研的念头；我喜欢在那里生活，喜欢它给我提供的前所未有的学习生活体验，虽然我说过我不认识这个学校99%的人，但是我认识的那1%都是那么可爱，他们会过来和你聊过去，会叫你参加集体活动，会鼓励你登上舞台，虽然有意见不合，可也会和你合作…还记得最后匆匆忙忙离开的那天，在等车的时候，我偷偷拍了两张在北门的照片，藏起来，后来回到家翻出来看泪水花了一脸，我真是舍不得离开。在这里我结识了我最好的朋友杨&amp;张,加入了小团体，真正的编程入门，甚至篮球水平都有不错的长进。我喜欢深夜11点的时候回宿舍，因为那一段路太长了，长得你可以一个人昂着头哼着歌，思考着人生，嗯！那是最美妙的20分钟。 再出发 我对未来充满了期待，所以我提前来了 2016下半年是我过得最充实的半年，内心从来没有这么平静过，我把精力更多的放在了学习技术上面，我带上耳机，感觉与世隔绝，我追随心所向，开始慢慢摸索。我的2017，注定也会在摸索中慢慢度过，我喜欢这样的生活。","categories":[],"tags":[{"name":"晨记","slug":"晨记","permalink":"http://yoursite.com/tags/晨记/"}]},{"title":"React全家桶网络学习资源汇总","slug":"React全家桶学习资源汇总","date":"2016-12-12T10:44:20.000Z","updated":"2016-12-12T11:59:14.000Z","comments":true,"path":"2016/12/12/React全家桶学习资源汇总/","link":"","permalink":"http://yoursite.com/2016/12/12/React全家桶学习资源汇总/","excerpt":"","text":"前言不知不觉，学习React时间已经超过三个月了。虽然这几个月断断续续，也算把我所了解的React全家桶学习了一遍，虽然我现在还是什么都不会😂好了，接下来，我会把我学习过程中用到的一些网络资源都整理在这篇文章里面，分享给大家。 学习react之前学习react之前，你最好有js(ES6)的基础，下面是JS学习资料搜集汇总。两本来自于阮一峰大神的开源书籍：JavaScript标准参考教程这里ES6入门指南强烈推荐，看过实体书，ES6入门很实用来自廖雪峰的官方网站的JS教程特别适合快速入门和新手回顾 JavaScript Promise迷你书全面了解Promise的书籍深入理解JavaScript系列汤姆大叔翻译，比较全面，值得推荐 react学习需要明确的一点的是，学习react最好的方式是阅读官方文档，这里列出一些资源，可作为学习的参考和补充：react入门实例教程没错，还是来自于阮一峰大神Learn React &amp; Webpack by building the Hacker News front page强烈推荐，手把手教你构建一个前端页面react-组件生命周期详解当我很混淆的时候，就是看这篇博文弄懂的React入门：关于JSX语法虽然JSX很好理解，但是还是推荐一篇吧，比较详细了React入门来自则修网的视频教程，一共有两门教程，这一门非常适合入门react文档中文翻译版本，推荐结合英文文档使用 webpackwebpack作为一个打包工具，如今已经十分出色。一小时包教会 —— webpack 入门指南不敢保证一小时能不能教会，但是写得还是很详细，值得一看webpack中文文档(类似于官方文档，比较详细的介绍了webpack的方方面面)(http://webpackdoc.com/) flux &amp; reduxFlux 架构入门教程阮一峰大神目前专注于react啊，什么都有他Redux 入门教程还是阮一峰的Redux Tutorial 中文翻译适合没有耐性看完官方文档的同学Redux中文文档英文翻译版，适合英语基础较薄弱的同学观看,貌似还可以下载下来redux其他学习资源我fork的 mocha &amp; chai测试框架Mocha 实例教程不用我说来自哪里了吧官方文档最好的学习教程chai强大的断言库，学习途径目前只有中文文档 react单元测试 &amp; enzymeReact 测试入门教程点这里enzyme 是用于react单元测试的一个库，类jquery的风格，比官方那一套写起来顺手多了，推荐. react-router &amp; 其他React Router 是完整的 React 路由解决方案React-Router中文文档看这个就够了 immutable.js是一个数据不可变的一个库，据说结合React可以让性能提升十倍,学习的时候有了解过.Immutable 详解及 React 中实践官方文档 lodash 其实不属于react全家桶成员(虽然我觉得inmutable也不是),但是作为一个高性能和模块化的JS工具库，值得大家去了解和使用中文文档,未翻译完全版本 写在后面上面的资料和文档也许可以很容易就能通过baidu或者其他什么的得到，我算是列举了我学习时候参考的资料吧，不一定适合大家，也许有更适合入门的资料只是我没找到而已。上面列举的也并不是react全家桶的所有技术，包括css-module，覆盖率测试这些我也是刚刚才了解，并没有深入的使用，所以我这里就不列出了。在我看来，react发展到现在，已经不能说其只是一个前端框架的view层了，它是一个技术栈，一种解决方案，并且只有使用其全家桶才能发挥出其威力，作为一个前端初学者而言，这个过程并不会太痛苦，因为我们并没有对传统的web开发思维根深蒂固，所以如果你想学习react，不妨放下心中的顾虑，现在就开始。 学习react不难，但是真的想写好react太难了，angular也是，vue也是，所以不要轻易说你学会了它们。我们仅仅是轮子的使用者而已，可我真想哪天我也能成为造轮子的人，加油！","categories":[],"tags":[{"name":"React","slug":"React","permalink":"http://yoursite.com/tags/React/"}]},{"title":"使用webpack+npm进行React开发","slug":"使用webpack-npm进行React开发","date":"2016-11-19T08:17:52.000Z","updated":"2017-11-04T14:24:24.000Z","comments":true,"path":"2016/11/19/使用webpack-npm进行React开发/","link":"","permalink":"http://yoursite.com/2016/11/19/使用webpack-npm进行React开发/","excerpt":"","text":"写在前面这一期的知识我早就想写了，因为在学习React之初，心里面就有很多疑问，当然其中一个就是：我能不能不把所有的Component写在一个文件中，当然后面没有关注这样的问题，直到前些日子学习Flux才重视起来，恰逢周六，在这里写一篇，关于如何使用webpack+npm进行React开发。 webpack–脚手架工具而已在这里我并不打算详细介绍webpack如何使用，webpack只是一个前端脚手架工具而已，在进行React开发的时候，我们只是使用babel转换ES6的代码而已，但是webpack也是一个好用而简单的打包工具，想了解更多关于webpack的知识，点击这里。好吧，正式开始吧！首先我们需要安装node 和 npm, 因为webpack也是依赖node的，安装好node和npm后我们就可以开始安装webpack了，首先安装webpack：1npm install -g webpack 当然这里你也可以不全局安装，使用npm init初始化一个package.json文件，使用npm install --save webpack安装。 这里我将会跳过使用命令进行打包，直接进到使用配置管理文件就好了，如果想更深层次的了解webpack，点击上面的介绍咯(真的很详细)。 首先介绍一下这个配置文件，默认命名为webpack.config.js，其是一个node的文件，就像如下的这个样子。12345678910111213141516171819 module.exports = &#123; entry: './base.jsx', output: &#123; filename: './output.js' &#125;, module: &#123; loaders:[ &#123; test: /\\.jsx?$/, exclude: /(node_modules|bower_components)/, loader: 'babel', query: &#123; presets: ['es2015','react'] &#125; &#125; ] &#125;&#125; 好吧，介绍一下上面的这个文件到底描述了些什么，首先我们输出了一个配置对象，entry定义了要引入的文件，当然如果需要引入多个文件的话可以使用一个数组。output顾名思义定义要输出的文件名，这里可以把它理解为打包好存放的文件。最后，下面的这个module属性用于定义加载器，比如我们需要使用babel来吧jsx转为普通的js代码，test属性表示给所有匹配的jsx执行解析，exclude表示将会不解析node模块和通过bower安装的模块。loader表示使用解析工具，query则表示的扩展参数，这里表示应用es6和react的解析规则。好了，对示例文件的简单介绍就告一段路，当然还有一个属性plugins，用于使用插件，有关插件的使用请移至官方文档。 搭建react的开发环境细心的童鞋可以发现了，上面我演示的配置文件就是一个用于开发react的基本配置文件。好吧，直接开始，首先安装react，12npm install --save reactnpm install --save react-dom 接着安装babel用于解析jsx和es6，1npm install --save babel-loader 最后安装一些解析规则123npm install babel-plugin-transform-es2015-arrow-functions --save-devnpm install babel-preset-es2015 --save-devnpm install babel-preset-react 到这里，我们就安装完了开发react所需要的模块了，好吧，直接进入最后一步，在这里我将写一个和小很小的例子 一个栗子1234567891011121314151617181920212223242526272829303132import React from 'react';import &#123;render&#125; from 'react-dom';class InputComp extends React.Component&#123; constructor(props)&#123; super(props); this.handleChange = this.handleChange.bind(this); this.state = &#123; value: '' &#125; &#125; handleChange(e)&#123; var newvalue = e.target.value.trim(); this.setState(&#123;value: newvalue&#125;) &#125; render() &#123; return ( &lt;div&gt; &lt;input ref=\"name\" type=\"text\" defaultValue=&#123;this.props.tag&#125; onChange=&#123;this.handleChange&#125;/&gt; &lt;p&gt;&#123;this.state.value&#125;&lt;/p&gt; &lt;/div&gt; ) &#125;&#125;InputComp.propTypes = &#123; tag: React.PropTypes.string.isRequired&#125;InputComp.defaultProps = &#123; tag: '输入点什么东西吧！'&#125;const tag = '请输入';render(&lt;InputComp /&gt;,document.getElementById('app')); 上面的小例子来源于react首页上面的一个例子，这里使用react的写法，对es6不是很了解的童鞋可以点这里,关于适用ES5开发react和使用es6开发有什么区别，可以看我的上一篇博客，这里就不做过多的介绍，接下来，使用webpack进行打包就好了，使用上面举例的config文件，运行命令webpack就可以了，然后将输出文件引入到html文件中就可以看到效果了，当然如果你不想每一次修改都运行一遍命令的话那就使用监听更新模式，运行1webpack --progress --watch 当你修改完文件后，其会监听到文件的改变而做出增量的修改打包（当然第一次还是得手动打包） 尾巴写到这里，这篇文章就算完了，当你一步步完成上面的步骤，你就搭建了一个十分简陋的React开发环境，这里所说的的是简陋，我并没有加载对css文件的打包，这里大家可以根据自己的需求添加不同的loader来完成。作为一个React的初学者，感觉React这一个体系是十分庞大的，庞大到学习React一个多月仍然觉得力不从心，作为一个大三孩纸，每天被上不完的专业课实验课所压着，抽出来学习的时间并不多，再有自身比较懒惰所以…好吧，不多说了，好好努力吧，毕竟路都是自己选的。","categories":[],"tags":[{"name":"React","slug":"React","permalink":"http://yoursite.com/tags/React/"}]},{"title":"使用ES6语法写React","slug":"使用ES6语法写React","date":"2016-11-15T11:30:52.000Z","updated":"2017-11-04T14:22:32.000Z","comments":true,"path":"2016/11/15/使用ES6语法写React/","link":"","permalink":"http://yoursite.com/2016/11/15/使用ES6语法写React/","excerpt":"","text":"写在前面 最近在学习Redux，不可避免使用npm + webpack的方式来写React Component，由于不是很熟悉ES6踩了很多坑，在这里作为笔记写下来，供以后回顾。 例子惯例，先写一个例子吧123456789101112131415161718192021222324252627282930 import React, &#123; Component &#125; from 'react'; import &#123; PropTypes &#125; from 'prop-types'; class InputComp extends Component&#123; constructor(props)&#123; super(props); this.state = &#123; name: '' &#125; &#125; handleChange = (e) =&gt;&#123; var newvalue = e.target.value.trim(); this.setState(&#123;[e.target.name]: newvalue&#125;) &#125; render() &#123; const &#123; value &#125; = this.state; return ( &lt;div&gt; &lt;input name=\"name\" type=\"text\" value=&#123;value&#125; defaultValue=&#123;this.props.tag&#125; onChange=&#123;this.handleChange&#125;/&gt; &lt;p&gt;&#123;value&#125;&lt;/p&gt; &lt;/div&gt; ) &#125;&#125;InputComp.propTypes = &#123; tag: PropTypes.string.isRequired&#125;InputComp.defaultProps = &#123; tag: '输入点什么东西吧！'&#125; 上面是使用ES6语法写的一个简单的Component，有过ES6基础的同学对class, ‘extends’关键字等不会陌生，简单来说，这算是js的语法糖了吧。组件是一个自定义的js对象，在es5中使用React.createClass();在es6中必须继承React.component。 上面的小例子没什么特别的，我们只需要注意两点就好了：对于props,我们不能使用getDefaultProps()来添加默认的props，在ES6中有一个属性defalutProps,同理属性校验器propTypes,我们也必须写在外面，内容都和以前一样。也可以把这两个属性都写在’类’里面，使用static关键字申明.对于state,我们不能使用getInitialState()来设置state的初始值，转而在构造器中使用state属性设置值即可。对于事件而言，this指向的是当前创建的Component对象，所以需要手动绑定。还有一些其他的差别，比如es6支持解构等好吧，简单的就写在这里了 好忙好忙，语言都没办法组织了!加油！","categories":[],"tags":[{"name":"React","slug":"React","permalink":"http://yoursite.com/tags/React/"}]},{"title":"JS定时器知多少","slug":"JS定时器知多少","date":"2016-11-06T11:36:11.000Z","updated":"2016-11-06T12:22:46.000Z","comments":true,"path":"2016/11/06/JS定时器知多少/","link":"","permalink":"http://yoursite.com/2016/11/06/JS定时器知多少/","excerpt":"","text":"在JavaScript中，定时器是一个经常被误用且不被大家所熟识的特性。但在构建应用时其却非常有用。定时器提供了一种让一段代码在一定的时间之后运行的能力。由于JS的单线程特性，其同一时间只能执行一处代码，而定时器跳出了这一性质，以其特有的方式来执行代码。 在浏览器环境当中，window对象下有两组方法，setTimeOut()/clearTimeOut()以及setInterval()/clearInterval()分别用于设置定时器让其在一段时间后执行/让其停止和每隔一段时间就会执行一次/清除该定时器。比如下面的代码：123456setTimeOut(function()&#123; // do somethign&#125;, 1000);setInterval(function()&#123; // do this code every 1s&#125;, 1000); 上面的代码分别创建了一个一次执行定时器和循环执行的定时器，每隔一秒钟，function就会被执行一遍 咋一看，setInterval就像周期性执行setTimeout一样，但是他们有很多不同之处。举个栗子：123456setTimeOut(function repect()&#123; setTimeOut(repect, 100);&#125;, 100);setInterval(function()&#123; // do some thing&#125;, 100) 上面两段代码的功能几乎是一样的，但是实际上却不是。setTimeOut()代码中执行前一个回调结束后100毫秒甚至更多，才会执行下一个回调而setInterval()不一样，每隔100毫秒就会尝试执行，不会受到前面回调的影响。那为什么执行一个setTimeOut()执行回调的时间会更长呢？因为js单线程的特性，当计时时间到，回调函数会被放入执行队列排队，并且执行回调是需要时间的，所以执行时间只会大于设置的时间。setInterval()也一样，但有一点，由于其不关注前一个回调执行的情况，如果一直被延迟，那么setInterval()在可用后会无延迟执行。 好吧，写个栗子证明一下上面的结论：12345console.time('测试setTimeOut执行的时间')setTimeOut(function()&#123; console.timeEnd('测试setTimeOut执行的时间');&#125;,1000); 执行结果为：测试setTimeOut执行的时间: 1004.673ms 关于setInterval()的演示和清除定时器的演示这里就不做了。","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://yoursite.com/tags/JavaScript/"}]},{"title":"写在星期一之前","slug":"写在去星期一之前","date":"2016-10-23T13:12:11.000Z","updated":"2016-10-23T13:52:16.000Z","comments":true,"path":"2016/10/23/写在去星期一之前/","link":"","permalink":"http://yoursite.com/2016/10/23/写在去星期一之前/","excerpt":"","text":"我想给自己做一个上面这样的表情，因为一个星期又要过完了，而我又把任务拖到下一个星期，然后假装下面这样的表情，显得无辜又可怜。 在星期日的晚上仔细一想，还真是这样，然后本着无所谓的态度，高高兴兴上学去！ 这就是我的常态，患了拖延症！ 我病了，月初患的感冒还不见痊愈，精神萎靡。我病了，得了一种叫拖延症的病，不容易治愈！我病了，找不到方向，就快要迷失方向！ 当我病入膏肓的时候，最悲哀的是，我还以为自己还有救！ 然后…明天启程去苏州了，无论是旅游也好，只希望好好享受这个过程，不虚此行！ 细细想来，我的确还有事件自救，因为上面的总总根本就没发生在我身上！ 可是，像我这样，离发生还远吗？ 对，还有时间，去改变！","categories":[],"tags":[{"name":"晨记","slug":"晨记","permalink":"http://yoursite.com/tags/晨记/"}]},{"title":"浅谈JS闭包","slug":"浅谈JS闭包","date":"2016-10-21T12:58:29.000Z","updated":"2017-01-27T05:59:20.000Z","comments":true,"path":"2016/10/21/浅谈JS闭包/","link":"","permalink":"http://yoursite.com/2016/10/21/浅谈JS闭包/","excerpt":"","text":"变量的作用域了解JS的人都知道，在ES6之前JavaScript中只有函数作用域和全局作用域，而没有块级作用域(try…catch是一个例外)。该怎么理解这句话呢？我们先来看一个例子: 1234for(var i=0; i&lt;5; i++)&#123; console.log(`i=$&#123;i&#125;`)&#125;console.log(i) // 4 当运行完一个for循环后，i=4。由于JS中不存在块级作用域，所以这里在for循环中申明的变量i是一个全局变量，因此可以在外部访问到。现在我们来看下一个例子：123456789function init()&#123; var name = 'limoer'; function sayHello()&#123; console.log(`hello $&#123;name&#125;`) &#125; sayHello();&#125;init(); // hello limoerconsole.log(name); // undefined 这里我们定义了一个函数，函数中申明了一个局部变量name，并且在函数内部定义了一个内部函数sayHello，这个函数只能在函数init内使用，然而sayHello并没有自己的局部变量，但是其可以访问到函数外部的变量，即其父级函数的name变量 通过上面的两个例子可以清楚的知道，变量的作用域完全是由它在源代码中的位置决定的，并且嵌套的函数也可以访问其外层作用域中的变量。 闭包闭包和变量的作用域息息相关。现在我们来修改上面的这个例子 123456789function init()&#123; var name = 'limoer'; function sayHello()&#123; console.log(`hello $&#123;name&#125;`) &#125; return sayHello&#125;var sayHelloFunc = init();sayHello(); // hello limoer 注意修改的地方，我们这次是直接返回这个内部函数，然后在外部执行这个函数。但是，通常来说，当函数一旦运行完成，其局部变量就不可用了，在这里是当执行了var sayHelloFunc = init();后name应该不可用了。但是实际运行情况是成功访问到了name这个属性。 原因是因为这里sayHelloFunc已经成为了一个闭包。它由两部分组成，返回的函数本身以及创建该函数的环境。而所谓的环境是由闭包在创建时其作用域内的变量组成的。对于上面的这个例子，这里的变量就是指的name 再看一个闭包的例子123456789function addSome(num)&#123; return function(y)&#123; console.log(num + y) &#125;&#125;var add10 = addSome(10);var add1 = addSome(1);add10(1); // 11add1(10); // 11 对于上面的这个例子，addSome()做为一个函数工厂产生了两个闭包，它们共享了函数的定义，但是却又保存了不同的环境。 闭包的应用通过上面的描述，知道闭包其实就是将函数和其作用环境相互关联起来，达到保存变量的目的。 把上面的例子稍微改一下，我们可以把它用到实践中123456789101112131415161718192021222324&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;button id=\"toBlue\"&gt;切换背景为蓝色&lt;/button&gt; &lt;button id=\"toYello\"&gt;切换背景为黄色&lt;/button&gt; &lt;button id=\"toGreen\"&gt;切换背景成绿色&lt;/button&gt; &lt;script type=\"text/javascript\"&gt; function changeBgColorTo(type)&#123; return function()&#123; document.body.style.backgroundColor = type; &#125; &#125;; var toBlue = changeBgColorTo('blue'); var toYellow = changeBgColorTo('yellow'); var toGreen = changeBgColorTo('green'); document.getElementsById('toBlue').addEventListener('click', toBlue); document.getElementsById('toYellow').addEventListener('click', toYello); document.getElementsById('toGreen').addEventListener('click', toGreen); &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 上面的例子展示了如何使用闭包来定义公共函数，来减少代码的冗余。 一个常见的错误，使用闭包来解决直接贴代码吧：html: 1234&lt;p id=\"help\"&gt;Helpful notes will appear here&lt;/p&gt;&lt;p&gt;E-mail: &lt;input type=\"text\" id=\"email\" name=\"email\"&gt;&lt;/p&gt;&lt;p&gt;Name: &lt;input type=\"text\" id=\"name\" name=\"name\"&gt;&lt;/p&gt;&lt;p&gt;Age: &lt;input type=\"text\" id=\"age\" name=\"age\"&gt;&lt;/p&gt; js: 12345678910111213141516171819function showHelp(help) &#123; document.getElementById('help').innerHTML = help;&#125;function setupHelp() &#123; var helpText = [ &#123;'id': 'email', 'help': 'Your e-mail address'&#125;, &#123;'id': 'name', 'help': 'Your full name'&#125;, &#123;'id': 'age', 'help': 'Your age (you must be over 16)'&#125; ]; for (var i = 0; i &lt; helpText.length; i++) &#123; var item = helpText[i]; document.getElementById(item.id).onfocus = function() &#123; showHelp(item.help); &#125; &#125;&#125;setupHelp(); 上面的代码是我们实际开发过程中非常常见的错误。我们使用循环来给每一个输入框绑定一个事件，从而实现当聚焦到不同的输入框是产生不同的输出。但是，上面的代码显然不能完成这样的工作，因为当循环完成后，此时item已经指向了helpText的最后一项，而给onfocus绑定的是一个匿名函数，当聚焦到某一个输入框时，执行showHelp(item.help)而item早已是helpText中的最后一项了，所以造成了错误. 知道错误后，我们就知道改怎样修改了。我们需要保存运行时的环境，返回一个闭包。 12345678910111213141516function setupHelp() &#123; var helpText = [ &#123;'id': 'email', 'help': 'Your e-mail address'&#125;, &#123;'id': 'name', 'help': 'Your full name'&#125;, &#123;'id': 'age', 'help': 'Your age (you must be over 16)'&#125; ]; for (var i = 0; i &lt; helpText.length; i++) &#123; var item = helpText[i]; document.getElementById(item.id).onfocus = (function(help) &#123; return function()&#123; showHelp(help) &#125; &#125;)(item.help); &#125;&#125; 好了，简单的对于闭包的介绍就到这里了！想更系统的学习JS点击这里","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://yoursite.com/tags/JavaScript/"}]},{"title":"踩过React表单的坑后有感","slug":"踩过React表单的坑后有感","date":"2016-10-13T11:20:49.000Z","updated":"2016-10-13T13:28:02.000Z","comments":true,"path":"2016/10/13/踩过React表单的坑后有感/","link":"","permalink":"http://yoursite.com/2016/10/13/踩过React表单的坑后有感/","excerpt":"","text":"如题所示，最近捣鼓React表单踩坑了，才捣鼓没多少时日，心就变浮躁了，开始看不下去文档，也不谷歌百度直接开码，然后就是各种报错，越报错心越急越得不到解决心情越差，好不容易静下心来搜集资料准备搞定表单，这里先记下来，以备不时只需！ 踩过的坑…直接开写吧： input标签忘记闭合导致报错 123456var SimpleComp = React.createClass(&#123; render()&#123; return &lt;input type=\"text\" placeholder=\"随便输入点什么吧！\"&gt; &#125;&#125;);ReactDOM.render(&lt;SimpleComp /&gt;, document.body) 运行上面的这段代码，发现并页面渲染异常，打开浏览器console一看，下面的出现了错误，并且是下面这样的: 清清楚楚明明白白，标签并没有闭合，并且直指9行行最后渲染出了问题，然后我就一直找一直找，没错误啊，可始终还是报错最后经过各种尝试才知道，input标签要强制闭合的，不然就会转换错误知道真相的我眼泪掉下来，原来是这么回事啊，平时html写得飞起，细节这些什么的，都没注意哎！再有，控制台上打印的异常和错误可千万别轻信，以前已经在这个被坑过了 受控与不受控 有过React基础的童鞋都知道，React内部通过props和state来传递属性和状态，其中属性经由组件外属性传入，作用于组件后无法改变state 产生于组件内部， 通过setState()来改变状态，每一次改变状态，组件将会被重绘对于表单来说，props和state用得都很频繁，所以在这里提及一下 先来看非受控组件吧，顾名思义就是组件的状态不受控制，从代码上体现出来的就是，一个input不含有value属性123456var NotControlComp = React.createClass(&#123; render() &#123; return &lt;input type=\"text\" defaultValue=&#123;this.props.placeholder&#125;/&gt; &#125;&#125;);ReactDOM.render(&lt;NotControlComp placeholder='随便输入点什么吧！' /&gt;, document.body) 上面的一段代码定义了一个非受控的input，接受用户的输入而改变状态注意：这里使用到的defaultValue属性作用类似于placeholder属性 好吧，事实上我们使用非受控组件的情况比较多，我们会监听input的onChange时间，通过state来更新状态下面是一个简单的获取用户输入的例子：12345678910111213141516171819202122var ExampleComp = React.createClass(&#123; getDefaultProps()&#123; return&#123;placeholder: '输入吧'&#125; &#125;, getInitialState()&#123; return&#123; val: '' &#125; &#125;, handleChange(e)&#123; this.setState(&#123;val: e.target.value&#125;) &#125;, render()&#123; return( &lt;div&gt; &lt;input type=\"text\" defaultValue=&#123;this.props.val&#125; onChange=&#123;this.handleChange&#125;/&gt; &lt;p&gt;你输入了：&#123;this.state.val&#125;&lt;/p&gt; &lt;/div&gt; ) &#125;&#125;);ReactDOM.render(&lt;ExampleComp placeholder='随便输入点什么吧!' /&gt;, document.body) 那么受控组件就很显而易见了，受控的input定义了一个value属性，并且value部位null123456var ControlComp = React.createClass(&#123; render()&#123; return &lt;input type=\"text\" value=\"不要尝试修改这个值啦！\" /&gt; &#125;&#125;);ReactDOM.render(&lt;ControlComp /&gt;, document.getElementById('app')) 好了，最简单的受控组件就写好了，当你尝试去修改表单中的值的时候，发现根本无法修改这点明显和我们平时写html不一样，同样的input标签在html中就可以修改但是到了react中就没办法修改了，想过原因吗？官方文档中给出了答案： 不比HTML，React组件必须在任何时间点呈现视图的状态而不仅仅是在初始化的时候， 好好理解！ 其他 不要通过添加子节点的方式给&lt;textarea&gt;添加内容，应该使用defaultValue或者value属性,避免产生歧义，因为JSX本身就是javascript 你可以通过selected属性来选中一个下拉栏， 但是为了组件的可操作性，请使用value 或者 defaultValue来代替就像这样： 123456789101112var SelectComp = React.createClass(&#123; render()&#123; return( &lt;select value='B'&gt; &lt;option value='A'&gt;A&lt;/option&gt; &lt;option value='B'&gt;A&lt;/option&gt; &lt;option value='C'&gt;A&lt;/option&gt; &lt;/select&gt; ) &#125;&#125;);ReactDOM.render(&lt;SelectComp /&gt;, document.body) 想要非受控组件的话，就使用defaultValue属性好了 当然了，可以通过传入一个数组来达到多选的目的, 前提是给select添加multiple={true}就可以了 看到这里，也许有人心里还有疑问，受控的组件既然不能修改那到底该怎么用？对于这个问题，请看下面：123456789101112131415161718var ControlComp = React.createClass(&#123; getInitialState()&#123; return&#123;value: 0&#125; &#125;, handleClick(e)&#123; this.setState(&#123;value: this.state.value + 1&#125;) &#125;, render()&#123; return ( &lt;div&gt; &lt;input type=\"text\" value=&#123;this.state.value&#125; /&gt; &lt;button onClick=&#123;this.handleClick&#125;&gt;+&lt;/button&gt; &lt;/div&gt; ) &#125;&#125;);ReactDOM.render(&lt;ControlComp /&gt;, document.body) 好了，我们添加了一个button来控制受控组件的值，当然还有很多方式，比如我们可以给受控组件添加一个onChange事件监听 好了，React表单的基本知识就说到这里，感谢那些曾经让我烦躁无比的坑！","categories":[],"tags":[{"name":"React","slug":"React","permalink":"http://yoursite.com/tags/React/"}]},{"title":"在React中使用mixin","slug":"在React中使用mixin","date":"2016-10-12T11:31:58.000Z","updated":"2016-10-12T12:41:32.000Z","comments":true,"path":"2016/10/12/在React中使用mixin/","link":"","permalink":"http://yoursite.com/2016/10/12/在React中使用mixin/","excerpt":"","text":"mixin到底为何方神圣？mixin被理解为‘混入’的意思，我们知道，如果你经常使用某一段相同的代码的时候，你会把它进行抽象，封装成类或者function，‘混入’也一样，它可以解决代码段重复的问题。 jade中的Mixins jade(pug)是一个高性能的模版引擎，它使用javascript实现，并提供给Node使用.我在使用Jade模版引擎接触到了Mixin, 下面给出一个例子理解下 12345678910mixin box(styles) .conponent -each style in styles .squire -var x = styles.indexOf(style) + 1; a(href='/users/' + x + '/list') #&#123;style&#125; .container mixin(['lin', 'limoer']) .links mixin(['parents', 'classmates', 'others']) 你可以无视jade的语法，如果你想学习jade，点这里 首先我使用mixin 关键字申明了一个带参数mixin结构，然后依据传入的参数生成了很多url这个mixin 结构可以在这个模版文件中使用，通过不同的参数来生成url从上面可以看出，mixin的确可以解决代码重复的问题 React中的Mixin 首先来写一个例子 123456789101112131415161718192021var TimerComp = React.createClass(&#123; getInitialState: function() &#123; return &#123;secondsElapsed: 0&#125; &#125;, tick: function() &#123; this.stateState(&#123;secondsElapsed: this.state.secondsElapsed + 1&#125;) &#125;, componentDidMount: function() &#123; this.interval = setInterval(this.tick, 1000) &#125;, componentWillUnmount: function() &#123; clearInterval(this.interval) &#125;, render: function()&#123; return ( &lt;div&gt; &lt;p&gt;Seconds Elapse &#123;this.state.secondsElapsed&#125;&lt;/p&gt; &lt;/div&gt; ) &#125;&#125;); 简单的说一下，这里定义了一个定时器组件，会随着时间的增加来自动计时但是一个应用需要多个计时器呢？我们第一时间想到了组件的嵌套，但是组件的嵌套不但会增加组件的复杂程度而且，想要修改计时器也是比较困难的好了，解决代码复用的问题，我们可以使用Mixin， 让其混入进其他组件就好了 码起，还是计时器的例子！ 12345678910111213141516var MixinTimerComp = React.createClass(&#123; mixins: [MixinInterval(1000)], getInitialState: function() &#123; return &#123;secondsElapsed: 0&#125; &#125;, onTick: function()&#123; this.setState(&#123;secondsElapsed: this.state.secondsElapsed + 1&#125;) &#125;, render: function()&#123; return ( &lt;div&gt; &lt;p&gt;Seconds Elapse &#123;this.state.secondsElapsed&#125;&lt;/p&gt; &lt;/div&gt; ) &#125;&#125;); 这里我们使用了mixins属性，把自定义的MixinInterval对象混入了Timer组件 来看看MixinInterval的实现： 12345678910var MixinInterval: function(interval) &#123; return &#123; componentDidMount() &#123; this.__interval = setInterval(this.onTick, interval) &#125;, componentWillUnmount() &#123; clearInterval(this.__interval) &#125; &#125;&#125;; 就这样实现了一个最简单的问题，和最前面的例子做对比，我们发现，只是把组件中一些代码独立出来成为一个mixin对象但这样做无疑是解决了代码重用的问题，当我们想定义另一个计时器时候，我们只需混入这个mixin代码而不必关心混入的计时处理对象是怎么实现的 mixin 实现起来非常简单，React也支持多个mixin的混入(在mixins赋值为一个mixin对象数组)但有一个问题需要注意，在mixin中尝试覆盖state中定义的键的话，React会抛出错误 1234567891011React.createClass(&#123; mixins: [&#123; getInitialState()&#123; return &#123;cover: 1&#125; &#125; &#125;], getInitialState()&#123; return &#123;cover: 2&#125; &#125;&#125;)// 错误，尝试覆盖cover属性","categories":[],"tags":[{"name":"React","slug":"React","permalink":"http://yoursite.com/tags/React/"}]},{"title":"React学习之JSX","slug":"React学习之JSX","date":"2016-10-11T07:39:27.000Z","updated":"2017-02-01T02:37:14.000Z","comments":true,"path":"2016/10/11/React学习之JSX/","link":"","permalink":"http://yoursite.com/2016/10/11/React学习之JSX/","excerpt":"","text":"什么是JSX？ 简单点说，JSX是对javascript的扩展，语法类似于XML，但JSX不是一门新的语言，确切来说只是语法糖，每一个XML都会被响应的转换工具转换成纯的javascript代码。在使用React时，你没有必要使用JSX来构建组件，但是推荐使用JSX，因为这样可以让组件的结构和组件之间的关系看起来更清晰。 好了，开始使用JSX吧！ 首先我们分别使用JSX和纯js来渲染一个组件 123456789101112131415// 使用JSXReactDOM.render( &lt;div&gt; &lt;h2&gt;使用了JSX语法糖&lt;/h2&gt; &lt;/div&gt;, document.body)// 不使用jsxReactDOM.render( React.createElement('div', null, React.createElement('h1', null, '不使用jsx') ), document.body) html标签和React组件 ReactDOM.render()可以渲染html标签，也可以渲染React组件，但是这里有一些命名上的规范 html标签使用首字母小写的方式，但使用首字母大写也能够正常加载 12var renderDiv = &lt;div&gt;这是一个标签&lt;/div&gt;ReactDOM.render(renderDiv, document.body) React组件使用首字母大写的方式 123456var RenderComp = React.createClass(&#123; render: function()&#123; return: &lt;div&gt;这是一个组件&lt;/div&gt; &#125;&#125;);ReactDOM.render(&lt;RenderComp /&gt;, document.body) 经过测试，发现如果使用首字母小写的方式，将不会正常渲染组件，也不会报错, 当然你也可以这样写: 1234567var RenderComp = React.createClass(&#123; render: function()&#123; return: &lt;div&gt;这是一个组件&lt;/div&gt; &#125;&#125;);var renderComp = &lt;RenderComp /&gt;ReactDOM.render(renderComp, document.body) js表达式 当我们想要在React中使用js变量或者是表达式时候,使用{}来进行包裹，不能够出现””,否则会被当作字符串。 1234567891011121314151617var SampleComp = React.createClass(&#123; getInitialState: function()&#123; return &#123; iscls: false; &#125; &#125;, render: function()&#123; return ( // 表达式 &lt;div className=&#123;this.state.iscls ? 'cls' : 'no_cls'&#125;&gt; // 变量 &lt;h2&gt;&#123;this.props.msg&#125;&lt;/h2&gt; &lt;/div&gt; ) &#125;&#125;);ReactDOM.render(&lt;SampleComp msg='学习搬砖中...' /&gt;, document.body) 这里提示一下，在JSX中，标签的class和for属性分别使用className和htmlFor代替了 其它 在给标签添加style属性的时候，应该这样写: 1style=&#123;&#123;display: 'none'&#125;&#125; 也可以把要应用的样式赋值给一个变量，再使用变量 12345var style = &#123; color: red, display: none&#125;;&lt;div style=&#123;style&#125;&gt;&lt;/div&gt; HTML转义，为了防止XSS攻击，React默认是使用转义的,所以当你想使用一些富文本这里就必须注意为了不让其转义，我们可以这样写： 123456var mesg = '&lt;h2&gt;这里的字体大小是多少?&lt;/h2&gt;'ReactDOM.render( &lt;div dangerouslySetInnerHTML=&#123;&#123;__html: mesg&#125;&#125;&gt; &lt;/div&gt;, document.body) 总结 刚开始学习React的时候对JSX是生畏的，以为会很难理解。当慢慢的接触React，踩过一些小坑，发现使用JSX是那么好掌握, 它仅仅是语法糖而已，并且转换的规则也很简单","categories":[],"tags":[{"name":"React","slug":"React","permalink":"http://yoursite.com/tags/React/"}]},{"title":"写在正式学习React之前","slug":"写在正式学习React之前","date":"2016-10-10T10:35:22.000Z","updated":"2016-10-11T09:36:14.000Z","comments":true,"path":"2016/10/10/写在正式学习React之前/","link":"","permalink":"http://yoursite.com/2016/10/10/写在正式学习React之前/","excerpt":"","text":"如果你还不知道大名鼎鼎的ReactJS, 先去这里看看吧 在使用过了诸如BootStrap, Foundation这类的前端框架后，在初识React就被其虚拟DOM和组件化的开发深深的吸引。然后在接下来的几天，我慢慢的对React产生的恐惧，模式转变得太快，让我很不舒服。然后又经过几天玩坏了，我才返现React简直是一股清流，开始爱上它了！ 好了，开始使用React吧！ 安装React请先安装Node和npm 使用React之前，先来安装一下bower吧 1$ npm install -g bower 安装bower后我们来正式的进入React的学习中来 新建一个目录 1$ mkdir proj 使用以下命令来安装React 1$ bower install react 安装完后我们在proj目录下会看见一个bower_components目录,目录里面有一个React目录，ok！ 1$ touch index.html 使用文本编辑器打开index.html, 开始码起！ 第一个React helloworld 引入react.js和react-dom.js（在head,或者body中引入都可以，但是必须在我们开写地方的上面） 就像这样 接着申明一个script标签 1&lt;script type=\"text/babel\"&gt;&lt;/script&gt; 注意这里的type是text/babel 12345678910var HelloWorldComponent = React.createClass(&#123; render: function()&#123; return ( &lt;div id=\"app\"&gt; &lt;h1&gt;开始学习使用工具搬砖啦！&lt;/h1&gt; &lt;/div&gt; ) &#125;&#125;);ReactDOM.render(&lt;HelloWorldComponent /&gt;, document.body) 好了，不出意外的话，我们将会在浏览器中看到 好啦，我们的第一个react组件算是开发完成了，这里讲一讲我们到底做了什么首先我们使用了JSX语法，有关JSX的知识会单独的加深了解,但是最基本的规则就是，遇到{}解析成js，遇到‘&lt;’解析成html然后使用了React提供的createClass来创建一个组件类，类名一定要大写，实现了其中一个必须要实现的render方法，返回一个h1标签最后使用ReactDOM.render()渲染到body中去搞定","categories":[],"tags":[{"name":"React","slug":"React","permalink":"http://yoursite.com/tags/React/"}]},{"title":"依偎","slug":"依偎","date":"2016-10-10T00:07:37.000Z","updated":"2016-10-10T15:15:44.000Z","comments":true,"path":"2016/10/10/依偎/","link":"","permalink":"http://yoursite.com/2016/10/10/依偎/","excerpt":"","text":"这么晚起床，还不见阳光！ 以最快的速度看完了《依偎》，结局太出乎意料，细细想来却有觉得情理之中。随心所欲的在图书馆借的书，越看越有味道，以至于，我竟然忘了自己还要学习搬砖…太不真实的两人相遇，相识，从喝藤香茶到寻找虚无飘渺的“藤乡” 在一口气读完整本书之后，心里面有一种说不出的滋味，甜甜的，又有些萧索。我想，在最后的最后，“我”会静静地看着安芬，不再去想那虚无缥缈的藤乡，因为，有你在的地方，就是最美的“藤乡”，在那一刻，“我们”相对笑着，往日的种种都不再重要，重要的是，你我此刻，紧紧依偎。","categories":[],"tags":[{"name":"晨记","slug":"晨记","permalink":"http://yoursite.com/tags/晨记/"}]}]}