<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Battery Status API 以及useBattery]]></title>
      <url>http://yoursite.com/2020/02/21/use-battery/</url>
      <content type="html"><![CDATA[<blockquote>
<p><strong>Battery Status API</strong>提供了系统层级的电池信息(电量/充电信息等)，并且在这些状态改变的时候提供了一系列的<code>eventListener</code>。</p>
</blockquote>
<p>有了这些信息，我们可以对应用进行优化。例如：</p>
<ul>
<li>用户使用电池供电，想要达到好的续航效果，我们可以降低对资源的使用。</li>
<li>用户电量低，我们可以先对用户操作和数据进行缓存，避免数据丢失。</li>
<li>持续收集用户数据，进行用户群体分析。</li>
<li>……</li>
</ul>
<blockquote>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Battery_Status_API" target="_blank" rel="noopener">兼容性</a> <strong>Battery Status API</strong>的支持度有限，目前只有<em>Chrome</em>和<em>Opera</em>以及<em>Android webview</em>支持度是比较好的，并且官方并不推荐使用该功能，未来或被移除。</p>
</blockquote>
<h3 id="navigator-getBattery"><a href="#navigator-getBattery" class="headerlink" title="navigator.getBattery"></a><code>navigator.getBattery</code></h3><p><code>getBattery</code>返回一个<code>Promise</code>对象，<code>resolve</code>后返回一个<code>battery</code>对象，该对象包含了<code>{ charging, chargingTime, dischargingTime, level }</code>分别表示是否在充电，充电时长，剩余可用时间，电池电量。例如，<code>{
  &quot;charging&quot;: true,
  &quot;level&quot;: 1,
  &quot;chargingTime&quot;: 0,
  &quot;dischargingTime&quot;: null
}</code>。</p>
<p>除此之外，<code>battery</code>对象还包含了4个<code>eventlistener</code>(<code>chargingchange</code>/<code>chargingtimechange</code>/<code>dischargingtimechange</code>/<code>levelchange</code>)，用于监听4个属性的改变。</p>
<p>下面来写一个例子，获取某一时刻的系统电量信息:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getBattery</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> nav = navigator</span><br><span class="line">  <span class="keyword">if</span> (!nav || <span class="keyword">typeof</span> nav.getBattery !== <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> battery  = <span class="keyword">await</span> navigator.getBattery()</span><br><span class="line">  <span class="built_in">console</span>.log(battery.level)</span><br><span class="line">  <span class="keyword">return</span> battery</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getBattery()</span><br><span class="line">  .then(<span class="function"><span class="params">battery</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>
<h3 id="useBattery"><a href="#useBattery" class="headerlink" title="useBattery"></a>useBattery</h3><blockquote>
<p>如果我们要在<code>React</code>中使用<code>Battery Status API</code>，我们仍然可以向上面一样，也可以配合上<code>React hooks</code>来实现一个<code>useBattery</code> hook。</p>
</blockquote>
<p>在开始写这个钩子之前，我们先理一下，由于获取电量信息是一个异步的过程，所以这个钩子除了返回上面提到的4个电量信息属性以外，还需要额外的一个属性用于记录数据是否获取完毕。</p>
<p>判断浏览器兼容性只需要判断<code>navigator</code>对象是否包含<code>getBattery</code>函数即可</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isSupported = navigator &amp;&amp; <span class="keyword">typeof</span> navigator.getBattery === <span class="string">'function'</span></span><br></pre></td></tr></table></figure>
<p>获取某一时刻电量信息的<code>hook</code>如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isSupported = navigator &amp;&amp; <span class="keyword">typeof</span> navigator.getBattery === <span class="string">'function'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useBattery</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!isSupported) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> [state, setState] = useState(&#123; <span class="attr">fetching</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    navigator.getBattery()</span><br><span class="line">      .then(<span class="function"><span class="params">battery</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> newState = &#123;</span><br><span class="line">          fetching: <span class="literal">false</span>,</span><br><span class="line">          charging: battery.charging,</span><br><span class="line">          level: battery.level,</span><br><span class="line">          dischargingTime: battery.dischargingTime,</span><br><span class="line">          chargingTime: battery.chargingTime,</span><br><span class="line">        &#125;</span><br><span class="line">        setState(newState)</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;, [])</span><br><span class="line">  <span class="keyword">return</span> state</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在某些情况下，我们可能并不仅仅需要某一时刻的电量信息，显然这一版本的<code>useBattery</code>并不能满足需要。我们需要监听<code>eventListeners</code>，并且在改变后变更状态。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isSupported = navigator &amp;&amp; <span class="keyword">typeof</span> navigator.getBattery === <span class="string">'function'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; isEqual &#125; <span class="keyword">from</span> <span class="string">'lodash'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bat;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useBattery</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!isSupported) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> [state, setState] = useState(&#123; <span class="attr">fetching</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">dealChange</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">const</span> newState = &#123;</span><br><span class="line">        fetching: <span class="literal">false</span>,</span><br><span class="line">        charging: battery.charging,</span><br><span class="line">        level: battery.level,</span><br><span class="line">        dischargingTime: battery.dischargingTime,</span><br><span class="line">        chargingTime: battery.chargingTime,</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (!isEqual(state, newState)) &#123;</span><br><span class="line">        setState(newState)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    navigator.getBattery()</span><br><span class="line">      .then(<span class="function"><span class="params">battery</span> =&gt;</span> &#123;</span><br><span class="line">        bat = battery</span><br><span class="line">        dealChange()</span><br><span class="line">        bat.addEventListener(<span class="string">'chargingchange'</span>, dealChange)</span><br><span class="line">        bat.addEventListener(<span class="string">'chargingtimechange'</span>, dealChange)</span><br><span class="line">        bat.addEventListener(<span class="string">'dischargingtimechange'</span>, dealChange)</span><br><span class="line">        bat.addEventListener(<span class="string">'levelchange'</span>, dealChange)</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          bat.removeEventListener(<span class="string">'chargingchange'</span>, dealChange)</span><br><span class="line">          bat.removeEventListener(<span class="string">'chargingtimechange'</span>, dealChange)</span><br><span class="line">          bat.removeEventListener(<span class="string">'dischargingtimechange'</span>, dealChange)</span><br><span class="line">          bat.removeEventListener(<span class="string">'levelchange'</span>, dealChange)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;, [])</span><br><span class="line">  <span class="keyword">return</span> state</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面版本的<code>useBattery</code>已经比较完善了，针对每个属性都添加了<code>eventHandler</code>，当属性改变时获取新的state，并通过比较决定是否应用更改。</p>
<p><code>useEffect</code>第一个参数如果返回一个函数，那么将在<code>unmount</code>的时候执行，所以，上面的代码进行了<code>removeEventListener</code>。</p>
<h3 id="尾巴"><a href="#尾巴" class="headerlink" title="尾巴"></a>尾巴</h3><p>最近两周本该是上班的时间，由于疫情，我不得不在家待岗。起初的一周，睡睡懒觉， 看会儿NBA，再玩玩游戏，一天就浑浑噩噩的过了。可当游戏也玩得无聊了，懒觉也睡够了，我才发现我是真的没什么事做了，这种日子过得真的很难受！</p>
<p>今天给好久没打开过的<code>Mac</code>充电，翻翻上学时的记忆，无论是文档，代码，邮件…思绪回到六七年前，高中时代的自己，就是因为我对智能手机的狂热追求，我才选择了如今的职业。除此之外，还有一层不变的对游戏的热爱。我喜欢玩游戏，也曾想过做游戏，在上海的那一段日子，我畏畏缩缩的迈出过第一步(想法/剧本)，后来也不了了之。</p>
<p>是时候重新出发，在未来的很长一段时间里，想要摸索着迈出第二步。</p>
<p>完。</p>
]]></content>
      
        
        <tags>
            
            <tag> HTML5 API </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[React 实现全局组件]]></title>
      <url>http://yoursite.com/2019/12/19/global-component/</url>
      <content type="html"><![CDATA[<h3 id="React-实现全局组件"><a href="#React-实现全局组件" class="headerlink" title="React 实现全局组件"></a>React 实现全局组件</h3><blockquote>
<p>有一个这样的需求：用户进入首页时可能会有不同类型的对话框弹出，默认的情况下所有对话框都是打开的，这很影响用户体验。在无法减少对话框的前提下，需要实现一种机制，能够让对话框依次弹出。</p>
</blockquote>
<p>在<code>React-Native</code>中，一种不那么好的实现就是使用<code>DeviceEventEmitter</code>(一种类似<code>Node</code>中的事件机制)，并且创建一个容器组件用于管理对话框弹出，关闭。最终把容器组件挂载到页面中即可。</p>
<p>为了实现这样的需求，除了消息的收发管理，难点还在于如何把<em>容器组件</em>挂载到应用中，由于<code>React-Native</code>中并不存在<code>DOM</code>，所以要采用其它的方式，确保该容器挂载后，整个<code>App</code>使用阶段不会被卸载即可。</p>
<p>就此打住。</p>
<blockquote>
<p>React中实现全局组件的思想与之类似，下面就来实现一个<code>message</code>全局组件。</p>
</blockquote>
<p>最终的实现应该是这样使用的：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> message <span class="keyword">from</span> <span class="string">'./message'</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  handleClick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    message(<span class="string">'这是一条message'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> &lt;Button onClick=&#123;this.handleClick&#125;&gt;点击&lt;/Button&gt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="容器组件"><a href="#容器组件" class="headerlink" title="容器组件"></a>容器组件</h4><p>容器组件用于管理<code>message</code>（提供一系列增删接口），并且渲染到<code>DOM</code>。</p>
<p>一个简易的容器组件可以是下面这样：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./style.css'</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Message</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    messageList: []</span><br><span class="line">  &#125;</span><br><span class="line">  add = <span class="function">(<span class="params">content</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; messageList &#125; = <span class="keyword">this</span>.state</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123; <span class="attr">messageList</span>: [content, ...messageList]&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  remove = <span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; messageList &#125; = <span class="keyword">this</span>.state</span><br><span class="line">    <span class="keyword">const</span> result = messageList.filter(<span class="function"><span class="params">item</span> =&gt;</span> item.key !== key)</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123; <span class="attr">messageList</span>: result &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  clear() &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123; <span class="attr">messageList</span>: [] &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; messageList &#125; = <span class="keyword">this</span>.state</span><br><span class="line">    <span class="keyword">const</span> nodes = messageList.map(<span class="function"><span class="params">item</span> =&gt;</span> item.component ? item.component : &lt;div className="message-item"&gt;&#123;item.content&#125;&lt;/div&gt;)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">"message-container"</span>&gt;</span><br><span class="line">        &#123; nodes &#125;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></p>
<p>上面实现的容器组件提供了<code>add</code>/<code>remove</code>/<code>clear</code>三个方法来对<code>message</code>进行管理，并最终渲染当前<code>messageList</code>中所有的消息。</p>
<p>接下来需要考虑如何把<em>容器组件</em>渲染到<code>DOM</code>，也可以说是把<em>容器组件</em>插入到<code>DOM</code>中。有多种方式可以选择：</p>
<ol>
<li><code>ReactDOM.render(element, container[, callback])</code>，这个方法的作用是把<code>React</code>元素渲染到指定的容器中，也是我们最常用的一种渲染到<code>DOM</code>的方法。</li>
<li><code>ReactDOM.createPortal(child, container)</code>，该方法的作用是<strong>将子节点渲染到存在于父组件以外的 DOM 节点中</strong>，该方法是这样使用的：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 见：[https://zh-hans.reactjs.org/docs/portals.html]</span></span><br><span class="line">render() &#123;</span><br><span class="line">  <span class="comment">// React 并*没有*创建一个新的 div。它只是把子元素渲染到 `domNode` 中。</span></span><br><span class="line">  <span class="comment">// `domNode` 是一个可以在任何位置的有效 DOM 节点。</span></span><br><span class="line">  <span class="keyword">return</span> ReactDOM.createPortal(</span><br><span class="line">    <span class="keyword">this</span>.props.children,</span><br><span class="line">    domNode</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>既然是全局<code>message</code>组件，那么其一个理想的挂载的地方可以是<code>body</code>或者指定的<code>DOM</code>节点。下面，分别实现以上两种方式。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Message.init = <span class="function"><span class="params">container</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 创建内容容器</span></span><br><span class="line">  <span class="keyword">let</span> root = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>)</span><br><span class="line">  <span class="keyword">if</span> (container) &#123;</span><br><span class="line">    container.appendChild(root)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(root)</span><br><span class="line">  &#125;</span><br><span class="line">  render(&lt;Message /&gt;, root)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在<code>Message</code>上新增了一个静态函数<code>init</code>，调用该函数就会把<code>Message</code>组件渲染到指定的<code>DOM</code>元素或者是<code>document.body</code>上。</p>
<p>这里有一个疑问，<code>Message</code>组件中提供了一系列接口来管理<code>message</code>，但通过以上的方式地区把<code>Message</code>组件挂载到<code>DOM</code>上了，却没法暴露接口供外部方法。这里有多种方式，第一种是<code>ReactDOM.render(element, container[, callback])</code>的返回值是其实是组件实例的引用，有了这个引用，外部就可以调用这些接口。这种方式已经不推荐使用，而推荐的方式也就是第二种方式<code>callback ref</code>，我们可以给组件绑定一个回调类型的<code>ref</code>，而这个<code>callback</code>以组件实例作为参数，我们可以通过这种方式来向外部暴露组件实例。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Message.init = <span class="function">(<span class="params">container, callback</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 创建内容容器</span></span><br><span class="line">  <span class="keyword">let</span> root = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>)</span><br><span class="line">  <span class="keyword">if</span> (container) &#123;</span><br><span class="line">    container.appendChild(root)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(root)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// callback</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">ref</span>(<span class="params">message</span>) </span>&#123;</span><br><span class="line">    callback(&#123;</span><br><span class="line">      add(content)&#123;</span><br><span class="line">        message.add(content)</span><br><span class="line">      &#125;,</span><br><span class="line">      remove(key) &#123;</span><br><span class="line">        message.remove(key)</span><br><span class="line">      &#125;,</span><br><span class="line">      clear() &#123;</span><br><span class="line">        message.clear()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  render(&lt;Message ref=&#123;ref&#125; /&gt;, root)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>我们给<code>init</code>方法增加了一个callback参数，通过这个callback就可以把组件实例暴露到外部中去。在<code>callback ref</code>中，我们调用<code>init</code>传入的<code>callback</code>参数，并把组件实例作为<code>callback</code>的参数，实际上，暴露整个组件实例是非常危险的，因此这里只是暴露了实例的几个外部调用接口。</p>
<h4 id="外部接口"><a href="#外部接口" class="headerlink" title="外部接口"></a>外部接口</h4><p>接下来实现外部接口，也就是我们外部调用的方法<code>message(content)</code>。实现容器组件的时候，我们实现了一个静态方法<code>Message.init</code>，该方法初始化了一个容器并挂载到<code>DOM</code>，并通过<code>callback</code>的方式对外暴露接口来管理<code>messageList</code>。因此，这个外部调用的方式只需要去实现<code>实现这个callback</code>。例如，我们实现的这个<code>message(content)</code>调用后三秒后就会消失。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Message <span class="keyword">from</span> <span class="string">'./message'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> messageInstance;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addMessage</span>(<span class="params">content</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> key = <span class="string">`<span class="subst">$&#123;index++&#125;</span>_MESSAGE_UNIQ_KEY`</span></span><br><span class="line">  messageInstance.add(&#123; key, content &#125;)</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    messageInstance.remove(key)</span><br><span class="line">  &#125;, <span class="number">3000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">message</span>(<span class="params">content</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params">instance</span>) </span>&#123;</span><br><span class="line">    messageInstance = instance</span><br><span class="line">    addMessage(content)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(!messageInstance) &#123;</span><br><span class="line">    Message.init(<span class="literal">null</span>, callback)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    addMessage(content)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> message</span><br></pre></td></tr></table></figure>
<p>上面的代码通过<code>callback</code>拿到了组件对外的接口并对外缓存<code>messageInstance</code>，针对每条消息生成了一个<code>UNIQUE_KEY</code>用于后续的消息移除。这里需要注意的是，<code>Message</code>只能实例化一次。</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>至此，一个全局组件<code>message</code>已经完成了。当然，如果你想要看到更好的效果，还需要对容器和消息本身添加样式。我们还可以自定义消息组件，将接口通过<code>props</code>传入到组件中，更好的管理消息。</p>
<p><code>React</code>也提供了<code>ReactDOM.unmountComponentAtNode(container)</code>方法来卸载一个组件，当<code>message</code>组件不再需要的时候，最好将它从<code>DOM</code>中移除。</p>
<p>前面提到过<code>ReactDOM.createPortal(child, container)</code>同样可以将节点渲染到<code>DOM</code>。不多想要这种方式并不是很适合这种场景，因为对外暴露接口是一个难题，这里就不在演示了。</p>
<p>完。</p>
]]></content>
      
        
        <tags>
            
            <tag> React </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[React-Navigation实现动态Tab路由]]></title>
      <url>http://yoursite.com/2019/11/30/dynamic-navigator/</url>
      <content type="html"><![CDATA[<blockquote>
<p>有一个需求：在用户未登录和已经登陆的情况下，需要渲染不同的底部导航菜单，而该导航栏其实是<code>react-navigation-tabs</code>的实例，并且不支持动态导航。</p>
</blockquote>
<p>这个是一个很常见的需求，在这个<a href="https://github.com/react-navigation/react-navigation/issues/3945" target="_blank" rel="noopener">issue</a>下面有很多讨论，针对此需求，也提供了一系列解决方案。</p>
<h3 id="动态导航"><a href="#动态导航" class="headerlink" title="动态导航"></a>动态导航</h3><p>我们使用<code>createBottomTabNavigator(RouteConfigs, TabNavigatorConfig)</code>来创建<code>tab</code>导航，其中<code>RouteConfigs</code>接受一个导航名称和路由的映射对象，一般情况下，<code>RouteConfigs</code>是确定的，比如：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// tab nav配置</span></span><br><span class="line"><span class="keyword">const</span> RouteConfigs: TabOptions = &#123;</span><br><span class="line">  Home: &#123; <span class="attr">screen</span>: Home &#125;,</span><br><span class="line">  Purchase: &#123; <span class="attr">screen</span>: Purchase &#125;,</span><br><span class="line">  Brand: &#123; <span class="attr">screen</span>: Brand &#125;,</span><br><span class="line">  Sell: &#123; <span class="attr">screen</span>: Sell &#125;,</span><br><span class="line">  Management: &#123; <span class="attr">screen</span>: Management &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建底部tab路由</span></span><br><span class="line"><span class="keyword">const</span> BottomTabRoutes = createBottomTabNavigator(RouteConfigs, &#123;</span><br><span class="line">  ...TabNavigatorConfig</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 接入到App路由中</span></span><br><span class="line"><span class="keyword">const</span> AppNavigator = createStackNavigator(</span><br><span class="line">  &#123;</span><br><span class="line">    TabRouter: &#123; <span class="attr">screen</span>: BottomTabRoutes &#125;,</span><br><span class="line">    ...pageRoutes</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p><code>createBottomTabNavigator</code>接收<code>RouteConfigs</code>作为参数，返回一个类型为<code>NavigationContainer</code>的值：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// NavigationContainer 类型定义</span></span><br><span class="line">interface NavigationContainer extends React.ComponentClass&lt;NavigationContainerProps NavigationNavigatorProps&lt;any&gt;&gt; &#123;...&#125;</span><br></pre></td></tr></table></figure></p>
<p>通过查看<code>NavigationContainer</code>的定义，可以发现其是一个<code>React</code>组件。所以第一种方式就是自定义一个组件，在该组件中返回<code>NavigationContainer</code>实例即可。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DynamicTabNavigater</span> <span class="keyword">extends</span> <span class="title">Compoent</span> </span>&#123;</span><br><span class="line">  _genNav() &#123;</span><br><span class="line">    <span class="keyword">let</span> NavConfig = [....]</span><br><span class="line">    <span class="comment">// 对`NavConfig`的一系列的处理</span></span><br><span class="line">    <span class="keyword">return</span> createBottomTabNavigator(NavConfig, &#123; ...otherConfig &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> Tabs = <span class="keyword">this</span>._genNav()</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Tabs</span> /&gt;</span></span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">const AppNavigator = createStackNavigator(</span></span><br><span class="line"><span class="xml">  &#123;</span></span><br><span class="line"><span class="xml">    TabRouter: &#123; screen: DynamicTabNavigator &#125;,</span></span><br><span class="line"><span class="xml">    ...otherRouter</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">)</span></span><br></pre></td></tr></table></figure>
<p>这种方式在该<a href="https://github.com/react-navigation/react-navigation/issues/3945" target="_blank" rel="noopener">issue</a>被证实是可行的，但是在<code>React Navigation</code><strong><em>3.x</em></strong>版本中报错，显示缺少<code>AppContainer</code>，所以还需要使用<code>createAppContainer</code>创建一个容器。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">render() &#123;</span><br><span class="line">  <span class="keyword">const</span> Tabs = createAppContainer(<span class="keyword">this</span>._genNav())</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Tabs</span> /&gt;</span></span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure>
<p>这样动态路由就实现了，并且能够在<strong>绝大部分情况下</strong>使用正常，由于使用<code>createAppContainer</code>创建了一个<em>容器</em>，如果该容器并无法包含所有路由，那么还需要的<code>AppContainer</code>，此时就会导航异常。</p>
<h3 id="实现二"><a href="#实现二" class="headerlink" title="实现二"></a>实现二</h3><p>继续关注<code>createBottomTabNavigator(RouteConfigs, TabNavigatorConfig)</code>方法，第二个参数<code>TabNavigatorConfig</code>包含一个属性<code>tabBarComponent?: React.ReactType</code>，该属性用于设置<code>tabBar</code>如何显示，该属性设置为一个组件。</p>
<p>所以机会来了！</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; BottomTabBar &#125; <span class="keyword">from</span> <span class="string">'react-navigation-tabs'</span></span><br><span class="line"><span class="keyword">import</span> &#123; DeviceEventEmitter &#125; <span class="keyword">from</span> <span class="string">'react-native'</span></span><br><span class="line"></span><br><span class="line">interface NavigatorState &#123;</span><br><span class="line">  showBrandPage: boolean</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DynamicTabNavigator</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span>&lt;<span class="title">any</span>, <span class="title">NavigatorState</span>&gt; </span>&#123;</span><br><span class="line">  state: NavigatorState = &#123;</span><br><span class="line">    showBrandPage: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  subscribe: any</span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="keyword">this</span>.subscribe = DeviceEventEmitter.addListener(</span><br><span class="line">      <span class="string">'showBrand'</span>,</span><br><span class="line">      (data: boolean) =&gt; &#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123; <span class="attr">showBrandPage</span>: data &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">  componentWillUnmount() &#123;</span><br><span class="line">    <span class="comment">// tslint:disable-next-line: no-unused-expression</span></span><br><span class="line">    <span class="keyword">this</span>.subscribe &amp;&amp; <span class="keyword">this</span>.subscribe.remove()</span><br><span class="line">  &#125;</span><br><span class="line">  _tabNav = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; routes, index &#125; = <span class="keyword">this</span>.props.navigation.state</span><br><span class="line">    <span class="keyword">const</span> finalRoutes = [...routes]</span><br><span class="line">    <span class="keyword">const</span> &#123; showBrandPage &#125; = <span class="keyword">this</span>.state</span><br><span class="line">    <span class="comment">// ...一系列的操作</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      state: &#123;</span><br><span class="line">        index: finalRoutes.findIndex(<span class="function"><span class="params">route</span> =&gt;</span> currentRoute.key === route.key),</span><br><span class="line">        routes: finalRoutes</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; navigation, ...restProps &#125; = <span class="keyword">this</span>.props</span><br><span class="line">    <span class="keyword">const</span> tabNavConfig = <span class="keyword">this</span>._tabNav()</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">BottomTabBar</span> &#123;<span class="attr">...restProps</span>&#125; <span class="attr">navigation</span>=<span class="string">&#123;tabNavConfig&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">export default DynamicTabNavigator</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">const BottomTabRoutes = createBottomTabNavigator(tabNav, &#123;</span></span><br><span class="line"><span class="xml">  tabBarComponent: DynamicTabNavigator</span></span><br><span class="line"><span class="xml">&#125;)</span></span><br></pre></td></tr></table></figure>
<p>通过<code>eventListener</code>的方式接收路由变更信号，最终渲染<code>BottomTabBar</code>时使用修改过后的配置即可。</p>
<p>这种方式其实是一种<em>障眼法</em>，我们需要在配置静态Tab路由<code>RouteConfigs</code>时配置所有的Tab路由，在<code>DynamicTabNavigator</code>中通过<code>props</code>注入的<code>navigation.state.routes</code>拿到配置的静态路由，并经过一系列的处理最终得到渲染到<code>BottomTabBar</code>中的路由。需要注意的是，如果最终的路由相比静态路由有调整，那么需要更新<code>index</code>，否则点击路由跳转时会出现错误。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote>
<p>针对<code>React Navigation</code>无法支持动态路由的问题，以上给出了两种方案，能够在一定程度解决。</p>
</blockquote>
<ol>
<li>第一种方案按需挂载路由，可以算是“真”动态路由；</li>
<li>第二种方案从可定制的<code>tabBarComponent</code>入手，不改变路由配置，而是在渲染层进行控制，条件渲染<code>BottomTabBar</code>。</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> React-Native </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[从@babel/preset-env谈多浏览支持构建]]></title>
      <url>http://yoursite.com/2019/08/21/polyfill/</url>
      <content type="html"><![CDATA[<h1 id="从-babel-preset-env谈多浏览支持构建"><a href="#从-babel-preset-env谈多浏览支持构建" class="headerlink" title="从@babel/preset-env谈多浏览支持构建"></a>从<code>@babel/preset-env</code>谈多浏览支持构建</h1><p>最近需要把一个在特定浏览器环境运行的Web应用移植到多浏览器，特别是要支持部分<strong>IE</strong>浏览器。项目打包完成，在<strong>IE 11</strong>下运行，并不能成功，提示<em>Map()未定义</em>。很显然，<strong>IE浏览器</strong>并不支持<code>ES6</code>语法，而在构建中也没有使用相应的<strong>填补</strong>。</p>
<p>在基于<code>Webpack</code> + <code>Babel</code>构建的应用中，我们一般会使用到<code>@babel/preset-env</code>这个包，它使用了各种工具转译我们编写的<code>ES6</code>代码，我们一般这么使用它：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .babelrc</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"presets"</span>: [<span class="string">"@babel/preset-env"</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.jsx?$/</span>,</span><br><span class="line">        loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          presets: [</span><br><span class="line">            <span class="string">"@babel/preset-env"</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>不做额外配置的情况下，<code>@babel/preset-env</code>并不知道哪些<code>ES6+</code>的语法需要转译，所以最终的结果就是并没有转译。</p>
<h2 id="babel-preset-env的targets属性"><a href="#babel-preset-env的targets属性" class="headerlink" title="@babel/preset-env的targets属性"></a><code>@babel/preset-env</code>的<code>targets</code>属性</h2><p>为了兼容多浏览器，我们需要告知哪些应用构件时需要支持哪些浏览器，<code>@babel/preset-env</code>提供了<code>targets</code>属性进行配置，例如为<code>IE 10</code>构建，可以这样配置：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  targets: <span class="string">"ie 10"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>我们可以使用<code>browserslist</code>包来指定构建的目标浏览器，可以在<code>.browserslistrc</code>或是<code>package.json</code>中进行配置：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"browserslist"</span>: [</span><br><span class="line">  <span class="string">"&gt;0.2%"</span>,</span><br><span class="line">  <span class="string">"not dead"</span>,</span><br><span class="line">  <span class="string">"not ie &lt;= 10"</span>,</span><br><span class="line">  <span class="string">"not op_mini all"</span></span><br><span class="line">],</span><br></pre></td></tr></table></figure>
<p>上面的配置中包含4条查询语句，<code>&gt;0.2%</code>表示大于<code>0.2%</code>的市场份额，<code>not dead</code>表示近24个月还在支持的浏览器，所有查询语句见<a href="https://www.npmjs.com/package/browserslist" target="_blank" rel="noopener">npm</a>。</p>
<p>配置完成后，可以运行<code>npx browserslist</code>查看具体支持的浏览器版本。</p>
<h2 id="必不可少的useBuiltIns属性"><a href="#必不可少的useBuiltIns属性" class="headerlink" title="必不可少的useBuiltIns属性"></a>必不可少的<code>useBuiltIns</code>属性</h2><p>设置<code>browserslist</code>后构建的代码仍然不能很好的运行，这是因为项目中并没有加入<code>polyfill</code>，并且也未告知<code>@babel/preset-env</code>该如何处理<code>pliyfill</code>。<code>useBuiltIns</code>正是用来解决这一问题。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useBuiltIns: <span class="literal">false</span> | <span class="string">"entry"</span> | <span class="string">"usage"</span></span><br></pre></td></tr></table></figure></p>
<p>当<code>useBuiltIns</code>设置为<code>&quot;entry&quot; | &quot;usage&quot;</code>的时候，<code>@babel/preset-env</code>将会使用<code>core-js</code>提供的填补。</p>
<p><code>&quot;entry&quot;</code>的意思就是，当我们在某个文件中<code>import &#39;core-js&#39;</code>但是该文件中只使用了到了<code>ES6</code>中的<code>String.prototype.padStart</code>方法，那么就上一句<code>import</code>就会在构建的时候被替换成<code>import &#39;core-js/modules/es.string.pad-start&#39;</code>。</p>
<p><code>&quot;usage&quot;</code>的作用同其字面意义，即为：按需加载。如果我们在某个文件中使用了<code>Map</code>，如果构建目标支持<code>Map</code>，那么就不会使用相应填补，否则会在构建时加上<code>import &#39;core-js/modules/es.map&#39;</code>。</p>
<p>现在设置<code>useBuiltIns: &quot;usage&quot;</code>。</p>
<h2 id="core-js及其使用"><a href="#core-js及其使用" class="headerlink" title="core-js及其使用"></a><code>core-js</code>及其使用</h2><p><code>core-js</code>是一个<code>ES6+</code>语法的<code>polyfill</code>，简单而言就是使用<code>ES3</code>的语法实现了到目前为止几乎所有<code>ES</code>新特性。并且可以按需加载且不会污染全局命名空间。</p>
<blockquote>
<p><code>core-js</code>有<code>2.x</code>和<code>3.x</code>两个版本，其区别就是<code>2.x</code>不支持目前最新的语法，这里可以按需选择<code>2.x</code>或者<code>3.x</code>版本安装。</p>
</blockquote>
<p>安装<code>core-js</code>：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add core-js</span><br></pre></td></tr></table></figure></p>
<p>使用<code>core-js</code>的需要注意的是该包需要在入口文件顶部导入，因为只有这样填补才会被完全用到。<br>对已使用<code>webpack</code>构建的项目可以在<code>config</code>中在入口中引入：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">entry: [<span class="string">'core-js/stable'</span>, <span class="string">'index.js'</span>]</span><br></pre></td></tr></table></figure></p>
<p>也可以在入口文件(一般为<code>src/index.js</code>)的顶部引入：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'core-js/stable'</span></span><br></pre></td></tr></table></figure></p>
<p>引入完毕，再进行构建，不出意外已经能够在指定版本的浏览器中运行了。</p>
<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><p><code>ES6+</code>语法的多浏览器兼容的确告一段落了，但是<code>浏览器API</code>，<code>CSS</code>兼容还有很多问题，浏览器兼容才刚刚开始。</p>
<p>比如，<code>IE</code>并不支持<code>fetch API</code>，所以要么我们需要一个<code>polyfill</code>，要么就修改业务代码。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add whatwg-fetch</span><br></pre></td></tr></table></figure></p>
<p>然后在入口文件中引入，<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'whatwg-fetch'</span>;</span><br></pre></td></tr></table></figure></p>
<p>某些<code>CSS3</code>支持得也不够好，需要我们一个个去考虑。</p>
<p>兼容性是前端开发无法规避的问题，而解决兼容的过程是”痛苦的”，特别是当业务开发完成后才考虑兼容的问题，痛苦加倍。</p>
<p>痛苦并快乐着。</p>
<p>完。</p>
]]></content>
      
        
        <tags>
            
            <tag> Webpack </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[从globalCompositeOperatio到蒙版弹幕]]></title>
      <url>http://yoursite.com/2019/08/07/barrage/</url>
      <content type="html"><![CDATA[<h1 id="从globalCompositeOperation到蒙版弹幕"><a href="#从globalCompositeOperation到蒙版弹幕" class="headerlink" title="从globalCompositeOperation到蒙版弹幕"></a>从<code>globalCompositeOperation</code>到<strong>蒙版弹幕</strong></h1><h2 id="globalCompositeOperation属性"><a href="#globalCompositeOperation属性" class="headerlink" title="globalCompositeOperation属性"></a><code>globalCompositeOperation</code>属性</h2><p><em>Canvas</em> 有一个不那么常用的属性<code>globalCompositeOperation</code>，作用是<strong>设置如何将一个源图像绘制到目标图像上</strong>。该如何理解？</p>
<p>在使用<em>Canvas</em>绘制图像时，我们可以多次调用<code>ctx.drawImage()</code>或者是其它绘图函数<code>ctx.fillRect()</code>等进行绘制。而<code>globalCompositeOperation</code>属性就指定了当前将要绘制的图像在画布上如果和已绘制的图形重合该怎样显示。该属性有多个可选值：</p>
<ul>
<li><code>source-over</code>默认值，目标图像重合部分将显示在上方(源图像被覆盖)。</li>
<li><code>source-in</code>目标图像中显示源图像。源图像只显示重合的部分，目标图像透明。</li>
<li><code>source-out</code>在目标图像之外显示源图像。只会显示非重合的部分，目标图像透明。</li>
<li><code>lighter</code> 显示源图像+目标图像。</li>
<li><code>copy</code> 只显示源图像。</li>
<li><code>xor</code> 亦或。</li>
<li><code>destination-*</code></li>
</ul>
<p>例如：当设置属性值为<code>source-over</code>时，下例将会显示为：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'canvas'</span>);</span><br><span class="line"><span class="keyword">const</span> ctx = canvas.getContext(<span class="string">'2d'</span>);</span><br><span class="line">ctx.fillStyle = <span class="string">'red'</span>;</span><br><span class="line">ctx.fillRect(<span class="number">10</span>, <span class="number">10</span>, <span class="number">80</span>, <span class="number">40</span>);</span><br><span class="line">ctx.globalCompositeOperation = <span class="string">'source-over'</span>;</span><br><span class="line">ctx.fillStyle = <span class="string">'green'</span>;</span><br><span class="line">ctx.fillRect(<span class="number">20</span>, <span class="number">20</span>, <span class="number">80</span>, <span class="number">40</span>);</span><br></pre></td></tr></table></figure></p>
<p><img src="../images/sourceover.jpg" alt="source-over"></p>
<p>可以看到，后绘制的绿色图像(源图像)和先绘制的红色图像(目标图像)发生了重叠，而源图像在层叠上层。</p>
<p>再来看看属性值为<code>source-in</code>的情况：</p>
<p><img src="../images/sourcein.bmp" alt="source-in"></p>
<p>源图像和目标图像发生了重合，结果只显示了源图像的重合部分。</p>
<h2 id="蒙版弹幕"><a href="#蒙版弹幕" class="headerlink" title="蒙版弹幕"></a><strong>蒙版弹幕</strong></h2><p>不考虑弹幕内容、显示等因素，使用<code>Canvas</code>实现弹幕就是一个不断擦除和绘制的过程，弹幕本身是绘制在画布上的，和内容(视频、图片等)是分层显示的，并无直接关系。</p>
<p><code>Canvas</code>弹幕且不论性能，如果弹幕过多往往会挡住内容本身，体验并不好。<em>B站</em>的弹幕使用了名为<strong>蒙版弹幕</strong>的技术，这种技术可以让弹幕不遮挡内容主体。这里不讨论<em>B站</em>的<strong>蒙版弹幕</strong>是如何实现的，先来看看<code>CSS</code>中一个名叫<code>mask</code>的属性。</p>
<p><code>mask</code>属性用来设置<strong>遮罩</strong>，那么何为遮罩呢？简单点来说就是使用一张图片来遮住另一张图片，并且如果用于遮罩的图片包含透明的部分，透明部分将会被遮住，非透明部分将会显示为被遮罩图片的内容。</p>
<p><code>mask</code>的内容到此为止，是不是和<code>globalCompositeOperation = &#39;source-in&#39;</code>很像？其实我认为不是很像。</p>
<p>修改上面的例子，如果将两个图形绘制的区域完全重合，那么设置<code>globalCompositeOperation = &#39;source-in&#39;</code>后，不出意外，源图像将会完全覆盖目标图像。</p>
<p>如果我们把目标图像和源图像均换成两张等宽高的图片，那么源图片将会完全遮挡目标图片。</p>
<p>如果目标图像和源图像存在透明区域(<em>RGBA</em> 中 <em>Alpha</em> 为<code>0</code>的区域)，那么源图像会完全遮住目标图像，但是目标图像的透明区域仍然是透明的。</p>
<p>如果反向抠图后，目标图像只有主体是透明的，那么源图像将会覆盖目标图像的非主体区域，主体区域由于是透明的，无能为力。</p>
<p>把目标图像换成蒙版图片，把源图像换成包含弹幕的图像，那么，蒙版图像透明区域不会被覆盖。</p>
<p>此时再把覆盖后的图片渲染在<code>Canvas</code>上，大功告成。</p>
<p>回顾一下<code>globalCompositeOperation = &#39;source-in&#39;</code>的解释：<br><strong>目标图像中显示源图像。源图像只显示重合的部分，目标图像透明。</strong><br>目标图像会被完全覆盖，而源图像只显示重合的部分，由于透明区域并不属于目标图像，所以在透明区域并不会显示源图像。</p>
<p>先来看一个例子：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ctx.fillStyle = <span class="string">'red'</span>;</span><br><span class="line">ctx.beginPath();</span><br><span class="line">ctx.moveTo(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">ctx.lineTo(<span class="number">0</span>, <span class="number">150</span>);</span><br><span class="line">ctx.lineTo(<span class="number">150</span>, <span class="number">0</span>);</span><br><span class="line">ctx.fill();</span><br><span class="line">ctx.moveTo(<span class="number">150</span>, <span class="number">0</span>);</span><br><span class="line">ctx.lineTo(<span class="number">300</span>, <span class="number">150</span>);</span><br><span class="line">ctx.lineTo(<span class="number">300</span>, <span class="number">0</span>);</span><br><span class="line">ctx.fill();</span><br></pre></td></tr></table></figure>
<p>在<code>300</code>*<code>150</code>的画布上先绘制两个红色的三角形，作为目标图像，此时画布中间的区域是透明的。</p>
<p><img src="../images/source.bmp" alt="目标图像"></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ctx.globalCompositeOperation = <span class="string">'source-in'</span>;</span><br><span class="line">ctx.fillStyle = <span class="string">'green'</span>;</span><br><span class="line">ctx.fillRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">300</span>, <span class="number">150</span>);</span><br></pre></td></tr></table></figure>
<p>然后再绘制一个充满画布的矩形覆盖到目标图像上，此时的结果是这样的：</p>
<p><img src="../images/result.bmp" alt="覆盖结果"></p>
<p>目标图像(两个红色的三角形)已经被完全覆盖了，而透明区域仍然透明。</p>
<h2 id="简易实现"><a href="#简易实现" class="headerlink" title="简易实现"></a>简易实现</h2><p>为了实现<strong>蒙版弹幕</strong>，需要准备：</p>
<ul>
<li>原版图像</li>
<li>蒙版图像</li>
<li>Canvas弹幕</li>
</ul>
<p>这里原版图像使用下面这张<strong>菊花图</strong>：</p>
<p><img src="../images/flower.jpg" alt="原版图片"></p>
<p>经过抠图(主体变成透明)，生成的蒙版图片如下：</p>
<p><img src="../images/flower1.png" alt="蒙版图像"></p>
<p>弹幕系统的实现不做过多的介绍，这里只关注绘制，和上例的绘制过程一致，首先绘制蒙版图像，再绘制弹幕内容到蒙版上进行覆盖。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">drawBarrages() &#123;</span><br><span class="line">  <span class="keyword">let</span> context = <span class="keyword">this</span>.useMask ? <span class="keyword">this</span>.bgCtx : <span class="keyword">this</span>.ctx;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">this</span>.barrageList.length) &#123;</span><br><span class="line">    context.clearRect(<span class="number">0</span>, <span class="number">0</span>, <span class="keyword">this</span>.width, <span class="keyword">this</span>.height);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i &lt; <span class="keyword">this</span>.barrageList.length; i++) &#123;</span><br><span class="line">      <span class="comment">// 此时弹幕将要移除画布</span></span><br><span class="line">      <span class="keyword">let</span> barrage = <span class="keyword">this</span>.barrageList[i];</span><br><span class="line">      <span class="keyword">if</span>(barrage.left + barrage.width &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.barrageList.splice(i, <span class="number">1</span>); <span class="comment">// 移除该弹幕</span></span><br><span class="line">        i -= <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>((barrage.left + barrage.width+<span class="number">600</span>) &lt; <span class="keyword">this</span>.width &amp;&amp; barrage.isChecked === <span class="literal">false</span>) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 此时已经完全出跑道并且还没有发起检查。</span></span><br><span class="line">        <span class="keyword">let</span> index = vm.statics.findIndex(<span class="function">(<span class="params">item</span>) =&gt;</span> item === barrage.top);</span><br><span class="line">        barrage.isChecked = <span class="literal">true</span>;</span><br><span class="line">        used[index] = <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      barrage.left = barrage.left - barrage.offset;</span><br><span class="line">      <span class="keyword">this</span>.drawOneBarrage(barrage);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// #1 擦除上次绘制</span></span><br><span class="line">    <span class="keyword">this</span>.ctx.clearRect(<span class="number">0</span>, <span class="number">0</span>, <span class="keyword">this</span>.width, <span class="keyword">this</span>.height);</span><br><span class="line">    <span class="comment">// #2 绘制蒙版图像</span></span><br><span class="line">    <span class="keyword">this</span>.ctx.putImageData(<span class="keyword">this</span>.maskImage, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">// #3 设置compose类型</span></span><br><span class="line">    <span class="keyword">this</span>.ctx.globalCompositeOperation = <span class="string">'source-in'</span>;</span><br><span class="line">    <span class="comment">// #4 绘制弹幕</span></span><br><span class="line">    <span class="keyword">this</span>.ctx.drawImage(<span class="keyword">this</span>.bgCanvas, <span class="number">0</span>, <span class="number">0</span>, <span class="keyword">this</span>.width, <span class="keyword">this</span>.height);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.stop = requestAnimationFrame(<span class="keyword">this</span>.drawBarrages.bind(<span class="keyword">this</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的代码是完整绘制一帧的逻辑，跳过绘制弹幕文本的循环，关注整体绘制和层叠逻辑。其中绘制总分为四步，擦除上一帧结果，绘制蒙版(作为目标图像)，设置<code>compose</code>类型为<code>source-in</code>，绘制弹幕(作为源图像)。</p>
<p>注意到，蒙版图像使用<code>ctx.putImageData</code>绘制，这表示蒙版图像是<code>ImageData</code>类型，可以通过<code>ctx.getImageData()</code>拿到(需先绘制在画布上)，这里也可以<code>png</code>图片作为蒙版图片直接绘制在画布上。</p>
<p><code>this.ctx.drawImage(this.bgCanvas, 0, 0, this.width, this.height)</code>用于绘制弹幕，<code>this.bgCanvas</code>是绘制了弹幕文本的<code>Canvas</code>画布，这里使用了<em>离屏Canvas</em> 技术，该画布并不会单独绘制在屏幕上。</p>
<p>绘制结果如下图：</p>
<p><img src="../images/maskdemo.bmp" alt="弹幕绘制结果"></p>
<p>可以看到，弹幕并没有遮挡我们的主体(<strong>菊花</strong>)，实现了<strong>蒙版弹幕</strong>的预期效果。</p>
<h2 id="尾巴"><a href="#尾巴" class="headerlink" title="尾巴"></a>尾巴</h2><p>我们的确实现了蒙版弹幕，其主体是使用<em>Canvas</em>绘制蒙版图片和弹幕在同一张画布上，并且设置<code>globalCompositeOperation = &#39;source-in&#39;</code>来达到弹幕完全覆盖蒙版的效果。</p>
<p>简易实现的内容主体是一张静态的图片，如果要实现视频<strong>蒙版弹幕</strong>效果，需要提供每一帧的蒙版图像。在渲染某一帧时，最终的结果使用该帧的蒙版图像和实时弹幕组合而成。</p>
<p>其实<strong>蒙版弹幕</strong>的关键是提供蒙版图像，对于单个图片还好，我们可以针对这张图片单独制作一张蒙版图像。但是对于视频<strong>蒙版弹幕</strong>，我们需要逐帧生成蒙版图像，工作量之大可想而知。并且如何生成蒙版图像，如何标注主体是关键中的关键。这一部分理应借助机器学习，进行图像识别和分割。</p>
<p>一个可行的办法是事先针对每个视频，先逐帧生成蒙版图像，在进行流媒体播放的时候同时传递蒙版图像，最终在前端进行组装，完成视频<strong>蒙版弹幕</strong>。</p>
<p>完。</p>
]]></content>
      
        
        <tags>
            
            <tag> canvas </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[记一次React Hooks的使用]]></title>
      <url>http://yoursite.com/2019/07/07/hooks/</url>
      <content type="html"><![CDATA[<blockquote>
<p>有这么一个需求：需要渲染一个表格，表格的内容会随着用户的操作而重新请求数据，并且在用户离开这个表格所在的页面(路由)后缓存数据，再次进入该页面的时使用已缓存数据。</p>
</blockquote>
<blockquote>
<p>目前在使用的表格组件是纯函数组件，只负责渲染，数据请求则写在其父组件，数组则存在<code>Redux</code>中。经过考虑，需要把数据请求的逻辑移入表格组件中，使得表格组件承担更多的职责，在<code>React 16.8</code>之前，我们不得不把表格组件写成<code>class</code>组件。</p>
</blockquote>
<p>而现在，可以使用<code>hooks</code>，以最少的更改，来实现这一需求。</p>
<h3 id="需要哪些hooks"><a href="#需要哪些hooks" class="headerlink" title="需要哪些hooks?"></a>需要哪些<code>hooks</code>?</h3><p>我们的需求是把请求数据的逻辑移入到表格组件中，表格的数据仍然保存在<code>Redux</code>中。众所周知，<em>数据获取</em>是一个有副作用的操作，而<code>useEffect</code>这个<code>hooks</code>就是用来处理有副作用的操作。</p>
<p>在使用<code>hooks</code>之前，我们一般在<code>componentDidMount</code>和<code>componentDidUpdate</code>或者是很少使用的<code>componentWillUnMount</code>来进行DOM操作，数据请求等副作用操作。而<code>useEffect</code>则可以简单的看做是这三个生命周期函数的合集，其在组件的这三个生命周期时，都会被调用到。</p>
<p>所以，使用<code>useEffect</code>解决了所有问题。</p>
<h4 id="“真”解决了所有问题？"><a href="#“真”解决了所有问题？" class="headerlink" title="“真”解决了所有问题？"></a>“真”解决了所有问题？</h4><p>先把代码写起来:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useEffect &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">const</span> MyTable = <span class="function">(<span class="params">&#123; fetchData, param &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    fetchData(param);</span><br><span class="line">  &#125;, [param])</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Table /&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(stateToProps,actionToProps)(MyTable);</span><br></pre></td></tr></table></figure></p>
<p>仅仅三行代码，就搞定了。更改<code>params</code>，一切正常；从其它页面进入，看起来也很正常。可为什么是看起来正常呢？因为你打开控制台，查看<code>network xhr</code>，再进入页面，请求发送了！并没有使用缓存的数据！</p>
<p>所以，问题并没有解决。</p>
<h3 id="如何更好的利用缓存数据"><a href="#如何更好的利用缓存数据" class="headerlink" title="如何更好的利用缓存数据"></a>如何更好的利用缓存数据</h3><blockquote>
<p>问题：既然<code>useEffect</code>能够在上述三个生命周期中都执行，那么有没有办法区分出首次渲染和更新呢？</p>
</blockquote>
<p>答案是肯定的！在上面的代码中，我们使用了<code>useEffect(func, [param])</code>的形式，其实<code>useEffect</code>的第二个参数如果指定，那么<code>useEffect</code>就不是每次都执行了，而是只有<code>param</code>改变了才会执行。并且特别的，如果第二个参数传入<code>[]</code>空数组，那么<code>useEffect</code>只会执行一次，也就是说，<code>useEffect</code>只会在<code>componentDidMount</code>执行！代码写起来：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 其它代码不变，再加一个hook</span></span><br><span class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (data.status !== <span class="string">'fulfilled'</span>) &#123;</span><br><span class="line">    fetchData(param);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, [])</span><br></pre></td></tr></table></figure></p>
<p>上面的<code>hook</code>会在初次渲染完成后执行，如果缓存数据的状态不是<code>fulfilled</code>，才请求数据。</p>
<h3 id="问题仍然没有解决"><a href="#问题仍然没有解决" class="headerlink" title="问题仍然没有解决"></a>问题仍然没有解决</h3><blockquote>
<p>很显而易见的是，即便是加了一个<code>hook</code>，而第二个<code>useEffect</code>仍然会执行，所以仍然会在初次加载完成后请求数据。</p>
</blockquote>
<p>这时候，就需要另一个<code>hook</code>出场了，那就是<code>useState</code>，我们需要在组件中维持一个是否是首次渲染的状态，只有当非首次渲染的时候，才会去执行第一个<code>hook</code>，因此可以避免不必要的的数据请求。代码码起来：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [isInitial, changeInitialToFalse] = useState(<span class="literal">true</span>);</span><br><span class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!isInitial) &#123;</span><br><span class="line">    fetchData(param);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, [param]);</span><br><span class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  changeInitialToFalse(<span class="literal">false</span>);</span><br><span class="line">  <span class="keyword">if</span> (data.status !== <span class="string">'fulfilled'</span>) &#123;</span><br><span class="line">    fetchData(param);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, []);</span><br></pre></td></tr></table></figure></p>
<p>经过测试，这一次是真一切正常了，缓存也已经用上。</p>
<h3 id="尾巴"><a href="#尾巴" class="headerlink" title="尾巴"></a>尾巴</h3><p>这是一次再普通不过的组件改造，这也是我在实际项目中第一次使用<code>hooks</code>。并且经历了从最开始遇到需求到决定使用<code>hooks</code>来最小化修改，到遇到问题差点改成更熟悉的<code>class</code>组件，到最终解决问题。最大的收货是，我对<code>useEffect</code>的了解又深刻了一些。把数据请求逻辑移到组件内部，除了降低组件间的耦合，更大程度上可以配合前一篇提到的<code>ScrollLoad</code>来做真正的滚动加载。毕竟数据才是组件的灵魂，数据都不懒加载，组件懒加载的意义就减了一半，手动狗头。</p>
<p>完。</p>
]]></content>
      
        
        <tags>
            
            <tag> React </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Webpack resolve解析]]></title>
      <url>http://yoursite.com/2019/07/07/resolve/</url>
      <content type="html"><![CDATA[<blockquote>
<p>虽然在实际开发过程中，我们经常会使用<em>脚手架</em>来初始化一个项目，而<em>脚手架</em>一般都包含了完善的<code>webpack</code>配置，例如<strong>create-react-app</strong>这个脚手架，其把所有关于构建的内容封装在了<code>react-scripts</code>包中，在实际开发中，我们只需要运行<code>yarn run start/build/test</code>即可，它就可以帮我们搞定代码压缩、分隔，<code>jsx</code>和<code>es6</code>代码编译到<code>es5</code>等。</p>
</blockquote>
<p>回到<code>webpack</code>，我们都知道一个完整的<code>webpack</code>配置必定是要包含<em>入口(entry)</em>、<em>输出(output)</em>，可能还需要<em>模块-加载器(loader)</em>来处理不同类型的模块、或是使用<em>插件(plugin)</em>来在构建过程中自定义某些动作。除此之外，还有<code>webpack4</code>中才引入的用于性能和构建优化的<em>optimization</em>，还有用于开发环境的<em>开发服务器(devServer)</em>。还有不那么常用和深入人心的<em>解析(resolve)</em>。本篇将以<code>react-scripts</code>包的webpack配置中关于<code>resolve</code>的使用为基础，介绍如何在实际项目中可能会用到的自定义解析。</p>
<h4 id="他们是怎么写的"><a href="#他们是怎么写的" class="headerlink" title="他们是怎么写的"></a>他们是怎么写的</h4><p>首先来看看<code>react-scripts</code>关于<code>resolve</code>的配置：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">resolve: &#123;</span><br><span class="line">  modules: [<span class="string">'node_modules'</span>, paths.appNodeModules].concat(</span><br><span class="line">    modules.additionalModulePaths || []</span><br><span class="line">  ),</span><br><span class="line">  extensions: paths.moduleFileExtensions</span><br><span class="line">    .map(<span class="function"><span class="params">ext</span> =&gt;</span> <span class="string">`.<span class="subst">$&#123;ext&#125;</span>`</span>)</span><br><span class="line">    .filter(<span class="function"><span class="params">ext</span> =&gt;</span> useTypeScript || !ext.includes(<span class="string">'ts'</span>)),</span><br><span class="line">  alias: &#123;</span><br><span class="line">    <span class="string">'react-native'</span>: <span class="string">'react-native-web'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    PnpWebpackPlugin,</span><br><span class="line">    <span class="keyword">new</span> ModuleScopePlugin(paths.appSrc, [paths.appPackageJson]),</span><br><span class="line">  ],</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p>
<ol>
<li><p><code>modules</code>属性：其指定了<code>webpack</code>在进行模块解析时应该搜索的目录，该属性可通过数组的方式指定一系列的路径，默认值是: <code>[&quot;node_modules&quot;]</code>，也就是说，在不指定该属性的情况下，如果我们引入<code>import xx from xx</code>，则<code>webpack</code>会默认在根目录的<code>node_modules</code>目录下查找该模块。上面的配置中指定了额外两种模块解析路径，其分别是<code>path.appNodeModules</code>和<code>modules.additionalModulePaths</code>，其中<code>path.appNodeModules</code>最终指向的是<code>path.resolve(fs.realpathSync(process.cwd()), &#39;node_modules&#39;)</code>也就是说，在默认情况下，该路径是<code>node_modules</code>的<strong>决定路径</strong>。<code>modules.additionalModulePaths</code>指向一个自定义路径，并通过<code>getAdditionalModulePaths(config)</code>方法生成该路径，如果<code>config</code>等于<code>{}</code>，则返回<code>process.env.NODE_PATH</code>(经过一些列的处理)，否则的话如果<code>config.baseUrl</code>存在且等于<code>modules.additionalModulePaths</code>或者<code>appSrc</code>则返回，否则抛出错误。也就是说，我们可以通过<code>jsconfig.json</code>来指定<code>baseUrl</code>属性，并且该属性只能是<code>node_modules</code>目录或<code>src</code>目录。</p>
</li>
<li><p><code>extensions</code>属性：自动解析的确定的扩展，默认值是<code>[&#39;.js&#39;, &#39;.json&#39;]</code>，也就是说，在默认情况下，我们<code>import ClsA from &#39;./clsa&#39;</code>，可以解析到<code>clsa.js</code>或是<code>cls.json</code>。上面的配置重写了<code>extensions</code>，定义了更多的扩展，并根据当前是否是<code>typescript</code>项目而是用对应的拓展。<code>paths.moduleFileExtensions</code>定义如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> moduleFileExtensions = [</span><br><span class="line">  <span class="string">'web.mjs'</span>,</span><br><span class="line">  <span class="string">'mjs'</span>,</span><br><span class="line">  <span class="string">'web.js'</span>,</span><br><span class="line">  <span class="string">'js'</span>,</span><br><span class="line">  <span class="string">'web.ts'</span>,</span><br><span class="line">  <span class="string">'ts'</span>,</span><br><span class="line">  <span class="string">'web.tsx'</span>,</span><br><span class="line">  <span class="string">'tsx'</span>,</span><br><span class="line">  <span class="string">'json'</span>,</span><br><span class="line">  <span class="string">'web.jsx'</span>,</span><br><span class="line">  <span class="string">'jsx'</span>,</span><br><span class="line">];</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>如何判别当前项目是<code>typescript</code>项目呢？<br><code>useTypeScript</code>是这样定义的：<code>const useTypeScript = fs.existsSync(paths.appTsConfig);</code>，很明显，通过判断是否存在<code>paths.appTsConfig</code>指向的文件也就是<code>tsconfig.json</code>，如果存在该文件，则表示该项目是中可以引用那些以<code>ts</code>为后缀的文件而不需要指定扩展名。</p>
<ol start="3">
<li>alias属性：创建模块的别名，确保在引入某些模块时可以变得简单。在上面中<code>alias</code>的配置是：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alias: &#123;</span><br><span class="line">  <span class="string">'react-native'</span>: <span class="string">'react-native-web'</span>,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>也就是在我们使用名为<code>react-native</code>的模块时，其默认指向的是<code>react-native-web</code>模块，例如：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; View &#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</span><br></pre></td></tr></table></figure></p>
<p>此时项目中根本没安装<code>react-native</code>，仅安装了<code>react-native-web</code>，也就是说<code>react-native</code>成了<code>react-native-web</code>的别名。那么问题来了：为什么我们不直接写<code>import { View } from &#39;react-native-web&#39;</code>呢？</p>
<p>其实这涉及到<code>React-Native</code>强调的<code>一次编写，处处使用</code>，这里的使用并不仅仅是<strong>iOS</strong>和<strong>Android</strong>代码共用，而是<code>React-Native</code>和<code>Web</code>之间的代码共享。<code>react-native-web</code>就是这样一个库，它把<code>react-native</code>实现的组件实现成为<code>Web</code>组件，并且表现和<code>react-native</code>组件一致。这样，如果我们拿到的是一份<code>react-native</code>的代码，添加别名过后，就无需把所有的<code>react-native</code>全都改成<code>react-native-web</code>，这样就保证了两端代码的统一。</p>
<p>扯远了，继续。</p>
<ol start="4">
<li><code>plugins</code>属性：如果在配置解析的过程中需要插件的话，就可以在这里指定。上面的代码使用了<code>pnp-webpack-plugin</code>和<code>react-dev-utils/ModuleScopePlugin</code>，<code>pnp-webpack-plugin</code>是为了解决<code>require()</code>时过多的<code>I/O</code>操作带来的性能消耗，<code>pnp</code>思想来自<code>Yarn</code>团队，目的是为了解决安装和引用依赖效率过低问题。其建立了一张映射表，这张表记录了依赖版本关联和依赖与依赖之间的关联以及依赖存放的位置。有了这张表，就可以跳过繁琐的查找过程直接确定依赖在文件中的位置，从而提高性能。详情见<a href="https://stackoverflow.com/questions/53135221/what-does-yarn-pnp" target="_blank" rel="noopener">stackoverflow</a>。<code>ModuleScopePlugin</code>插件的官方解释是：该插件可以确保来自源程序目录(也就是<code>/src</code>)的相对导入不会使用到外部依赖。<code>new ModuleScopePlugin(paths.appSrc, [paths.appPackageJson])</code>接收两个参数，分别指定了源程序目录<code>/src</code>和<code>allowedFiles</code>指向了<code>package.json</code>文件。</li>
</ol>
<h4 id="更多的配置"><a href="#更多的配置" class="headerlink" title="更多的配置"></a>更多的配置</h4><ol>
<li><code>mainFields</code>属性：该属性是为了指定在不同环境中，默认使用哪个<code>webpack</code>的字段作为导入的入口。例如某个模块的<code>package.json</code>文件中执行了以下入口:<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="built_in">module</span>: <span class="string">'index.js'</span>,</span><br><span class="line">  main: <span class="string">'build/index.node.js'</span>,</span><br><span class="line">  browser: <span class="string">'build/index.js'</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>那么在<code>Node</code>环境下，默认会使用<code>build/index.node.js</code>导入，而在浏览器环境中，默认使用<code>build/index.js</code>导入。</p>
<ol start="2">
<li><code>mainFiles</code>属性：解析目录是默认使用的文件名。这个在实际开发中使用得比较多，例如我们开发的某个页面，文件路径为<code>/src/views/Home/index.js</code>，那么在实际使用这个页面的时候直接使用<code>import Home from &#39;./src/views/Home&#39;</code>即可，因为<code>mainFiles</code>默认的配置是：<code>[&#39;index&#39;]</code>，这个属性不建议自定义。</li>
</ol>
<p><code>resolve</code>还有很多属性，可以让我们充分自定义整个解析过程，但从<code>react-scripts</code>的实践上来看，其也是针对某些属性进行了定制，并没有一味的自定义。在对某个属性不是很熟悉并且没有过实践，建议不要盲目的修改。并且<code>resolve</code>的所有属性都提供了适应绝普通场景的默认值。最后，<code>resolve</code>使用愉快。</p>
<p>完。</p>
]]></content>
      
        
        <tags>
            
            <tag> Webpack </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[来，实现一个“滚动加载”]]></title>
      <url>http://yoursite.com/2019/06/27/scrollload/</url>
      <content type="html"><![CDATA[<h3 id="从问题入手，实现一个滚动加载"><a href="#从问题入手，实现一个滚动加载" class="headerlink" title="从问题入手，实现一个滚动加载"></a>从问题入手，实现一个滚动加载</h3><h4 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h4><p>懒加载的实现很简单，例如图片需要懒加载的时候，在初始加载时并不直接加载图片，而是用一个其它的图片或者占位符占位，当其它优先级更高的内容加载完成后，再使用真实的图片替换占位图。具体呢就是在初始加载时并不知道图片的<code>src</code>或者<code>src</code>指向一个占位图片，而真实图片的路径则是放在<code>data-src</code>这样的自定义属性中，当需要加载时，使用<code>data-src</code>替换<code>src</code>即可。</p>
<p>在React中，如果我们需要懒加载一个组件，实现原理也类似：当不需要加载的时候渲染占位符，当需要加载的时候再去加载真正的加载。滚动加载就是懒加载的一种特殊情况，其触发方式是滚动，只有当组件在可视区域中时，才开始加载。</p>
<p>实现滚动加载并不简单，我们需要考虑以下几个问题：</p>
<ol>
<li>如何找到组件所处的滚动容器。</li>
<li>如何判定组件是否可见。</li>
<li>如何使用“更好”组件占位符。</li>
<li>处理性能瓶颈。</li>
</ol>
<h4 id="ScrollLoad实现"><a href="#ScrollLoad实现" class="headerlink" title="ScrollLoad实现"></a>ScrollLoad实现</h4><p>懒加载使用最为广泛的实现是<a href="https://www.npmjs.com/package/react-lazy-load" target="_blank" rel="noopener">react-lazy-load</a>，使用起来也很方便：<code>&lt;LazyLoad&gt;&lt;MyComponent /&gt;&lt;/LazyLoad&gt;</code>，使用提供的<code>LazyLoad</code>组件包裹需要懒加载的组件即可，并且它提供了多个属性，例如<code>height</code>可以设置当内容未加载时的高度，<code>offset</code>则可以指定组件开始加载时需要偏移的距离(单位:<code>px</code>)，除此之外，我们还可以指定懒加载是否使用防抖和节流来提升性能，具体的使用见<a href="https://www.npmjs.com/package/react-lazy-load" target="_blank" rel="noopener">react-lazy-load</a>。</p>
<p>虽然<code>react-lazy-load</code>是一个使用广泛的懒加载解决方案，但是在最近的项目中，我却不得不放弃使用它。因为<code>react-lazy-load</code>会更改<strong>原有的DOM结构!!!</strong>，所以如果要使用<code>react-lazy-load</code>，我必须更改原本的样式，这将会是一个浩大的工程。</p>
<p>所以，接下来将会实现一个不需要额外DOM结构的滚动加载组件<code>ScrollLoad</code>组件。</p>
<h5 id="问题1：如果找到组件所在的可滚动元素"><a href="#问题1：如果找到组件所在的可滚动元素" class="headerlink" title="问题1：如果找到组件所在的可滚动元素"></a>问题1：如果找到组件所在的可滚动元素</h5><p>这个问题其实是：<em>如何找到组件所在的最近的可滚动的父元素</em>。</p>
<p>但是为什么需要找到那个可滚动的父元素呢？因为需要在该父元素上绑定<code>scroll eventListener</code>，当父元素在滚动时，就可以根据监听函数实时获取滚动的距离，并依此决定组件显示与否。</p>
<p>那怎么样才能找到<strong>最近可滚动父元素</strong>呢？为了定位父元素，我们需要定位当前元素，然后再向上遍历，去查找<code>overflow</code>显式设置为<code>auto|scroll</code>的元素。</p>
<p>查找可滚动父元素代码如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getScrollParent</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> style = <span class="function">(<span class="params">elem, prop</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (getComputedStyle !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> getComputedStyle(elem, <span class="literal">null</span>).getPropertyValue(prop);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> elem.style[prop];</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> overflow = <span class="function"><span class="params">node</span> =&gt;</span> style(node, <span class="string">'overflow'</span>) + style(node, <span class="string">'overflow-x'</span>) + style(node, <span class="string">'overflow-y'</span>);</span><br><span class="line">  <span class="comment">// 循环判断父节点是否可滚动这里暂不添加，直接去直接父元素</span></span><br><span class="line">  <span class="keyword">if</span> (!(element <span class="keyword">instanceof</span> HTMLElement)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">window</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> parent = element;</span><br><span class="line">  <span class="keyword">while</span> (parent) &#123;</span><br><span class="line">    <span class="comment">// 当前节点是body或者document</span></span><br><span class="line">    <span class="keyword">if</span> (parent === <span class="built_in">document</span>.body || parent === <span class="built_in">document</span>.documentElement) &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 当期元素无父节点</span></span><br><span class="line">    <span class="keyword">if</span> (!parent.parentNode) &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断节点是否含有overflow等属性的值</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/(scroll|auto|inherit)/</span>.test(overflow(parent))) &#123;</span><br><span class="line">      <span class="keyword">return</span> parent;</span><br><span class="line">    &#125;</span><br><span class="line">    parent = parent.parentNode;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">window</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>实现参考了<code>react-lazy-load</code>的实现，通过当前节点向上查找直到找到第一个可滚动的父元素或遍历到顶层元素，并且每进行一次遍历，会通过正则检查当前元素的样式的<code>overflow overflow-x overflow-y</code>，如果为<code>scroll|auto</code>，则返回该父元素。</p>
<p>那么怎么得到当前元素呢？可以通过<code>ReactDOM.findDOMNode(component)</code>访问真实的DOM节点，如果有多个子节点的话，默认返回第一个。因为<code>ScrollLoad</code>组件并没有添加额外的DOM结构，所以通过<code>findDOMNode(this)</code>拿到的节点就是目标节点，也就是占位节点(因为就算组件初始状态下可见，那么也要等应用挂载后才去判断，所以首次渲染的是占位组件)。</p>
<h5 id="问题2：如何判定组件是否可见"><a href="#问题2：如何判定组件是否可见" class="headerlink" title="问题2：如何判定组件是否可见"></a>问题2：如何判定组件是否可见</h5><p>如果只考虑上下滚动的话，一个很简单的判断公式是：<code>offsetTop &lt; seenHeight + scrollTop</code>，就是：<strong>组件相对于可滚动父元素的偏移</strong> &lt; <strong>可滚动父元素的可视高度</strong> + <strong>可滚动父元素的滚动距离</strong>。上面的三个计算量中<code>offsetTop</code>和<code>seenHeight</code>都是固定不变的，所以一个组件是否可见取决于父元素当前滚动的距离。<code>seenHeight</code>很好计算：<code>parent.clientHeight</code>即可，<code>scrollTop</code>也很简单：<code>parent.scrollTop</code>，<code>offsetTop</code>计算稍微复杂。</p>
<p>如何计算<code>offsetTop</code>？如果最近可滚动父元素是直接父元素的话，直接通过<code>elem.offsetTop</code>就可以得到，如果包含多层嵌套，那么<code>offsetTop</code>就需要每一层元素相对于父元素的<code>offsetTop</code>相加，直到父元素等于目标父元素。简单的实现如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 该函数没有考虑节点异常的情况</span></span><br><span class="line"><span class="keyword">let</span> getNodeOffsetTop = <span class="function">(<span class="params">node, parent</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> current = node;</span><br><span class="line">  <span class="keyword">let</span> offsetTop = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (current !== parent) &#123;</span><br><span class="line">    offsetTop += current.offsetTop;</span><br><span class="line">    current = current.parentElement;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> offsetTop;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>最后是判断组件是否可见的实现：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> checkVisible = <span class="function">(<span class="params">node, parent</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!node || !parent) &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123; <span class="attr">visible</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; visible &#125; = <span class="keyword">this</span>.state;</span><br><span class="line">    <span class="keyword">if</span> (visible) &#123;</span><br><span class="line">      <span class="keyword">this</span>.parent.removeEventListener(<span class="string">'scroll'</span>, <span class="keyword">this</span>.scrollHandler);</span><br><span class="line">      <span class="keyword">return</span>; <span class="comment">// 直接返回不执行当次eventListener</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> seenHeight = parent.clientHeight;</span><br><span class="line">    <span class="keyword">let</span> scrollHeight = parent.scrollTop;</span><br><span class="line">    <span class="keyword">let</span> currentNode = findDOMNode(<span class="keyword">this</span>); <span class="comment">// 获取最新的dom结构</span></span><br><span class="line">    <span class="keyword">let</span> offsetTop = <span class="keyword">this</span>.getNodeOffsetTop(currentNode, parent);</span><br><span class="line">    <span class="comment">// 1. 当偏移高度小于可见高度</span></span><br><span class="line">    <span class="comment">// 2. 初始不可见的时候，当可视高度+滚动高度大于了偏移高度</span></span><br><span class="line">    <span class="keyword">if</span> (offsetTop &lt;= seenHeight + scrollHeight) &#123;</span><br><span class="line">      <span class="keyword">this</span>.setState(&#123; <span class="attr">visible</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h5 id="问题3：如何使用“更好”组件占位符"><a href="#问题3：如何使用“更好”组件占位符" class="headerlink" title="问题3：如何使用“更好”组件占位符"></a>问题3：如何使用“更好”组件占位符</h5><p>理想情况下，一个好的占位组件应该是和真实组件一样大的<code>size</code>，这样的话初始情况和加载完成的情况下滚动条的长度都是一样长的，且在组件由不可见到可见这个过程中页面并不会因为组件前后的<code>size</code>而出现抖动。</p>
<p>而实际的情况是，我们并不能很好的拿到目标组件的样式并作用到占位组件上，因为占位组件总是先渲染。所以折中的做法是让<code>ScrollLoad</code>的使用者去提供占位组件，这样就把如何提供一个好的占位组件交给了使用者。</p>
<p>还有一种办法是，既然一个好的(只是我认为的)占位组件的<code>size</code>是等于目标组件的，那么我直接把用于布局的样式从目标组件上拿过来不就行了！所以无论是目标组件渲染后的真实DOM上的<code>className id style...</code>全部拿过来，如果高度是内容撑开的话，我们就拿渲染完成的高度直接设置到占位组件上。经过尝试，这种方法的确可行，但是需要付出的代价是需要花费时间在获取目标组件的样式和样式整理上，并且代码的可读性将一定程度的降低。</p>
<p>所以，关于占位组件，我暂时没有好的方法。</p>
<h5 id="问题4：性能瓶颈"><a href="#问题4：性能瓶颈" class="headerlink" title="问题4：性能瓶颈"></a>问题4：性能瓶颈</h5><p>在前面介绍<code>react-lazy-load</code>的时候提到过我们可以决定是否使用节流或防抖来解决性能问题。所以，在<code>ScrollLoad</code>上，也是用了<em>节流</em>来控制<code>scroll</code>触发的频率。代码如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.scrollHandler = throttle(<span class="keyword">this</span>.checkVisible(dom, parent), <span class="number">100</span>);</span><br><span class="line">parent.addEventListener(<span class="string">'scroll'</span>, <span class="keyword">this</span>.scrollHandler, &#123; <span class="attr">passive</span>: <span class="literal">true</span> &#125;);</span><br></pre></td></tr></table></figure></p>
<p>这里使用了<code>lodash/throttle</code>来实现节流，这样默认情况下，<code>scroll</code>事件只会每隔<code>100ms</code>触发一次。</p>
<p>上面的代码在使用<code>addEventListener</code>绑定监听函数时还是用到了该函数的第三个参数：<code>{ passive: true }</code>，<code>passive</code>的意思是<code>消极的、被动的</code>，如果不指定，在新版的<code>Chrome</code>中会有性能提示：<code>[Violation] Added non-passive event listener to a scroll-blocking &lt;some&gt; event. Consider marking event handler as &#39;passive&#39; to make the page more responsive.</code></p>
<p>其实在监听滚动事件是，我们可以通过<code>event.preventDefault()</code>来阻止浏览器的默认滚动行为，可当滚动触发时，浏览器并不知道我们的监听函数中是否阻止了默认行为，所以浏览器会等待，直到监听函数执行完，此时浏览器才会选择滚动与否。而执行监听函数往往需要时间，性能就会受到影响。</p>
<p>而设置<code>{ passive: true }</code>，可以在执行监听函数之前就告诉浏览器，并没有阻止默认滚动，因此在滚动触发时，浏览器就不会等待，直接滚动。显然<code>ScrollLoad</code>是需要执行浏览器滚动的，因此设置<code>{ passive: true }</code>可以提升性能。</p>
<p>在<code>checkVisible</code>函数中，有一段代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; visible &#125; = <span class="keyword">this</span>.state;</span><br><span class="line"><span class="keyword">if</span> (visible) &#123;</span><br><span class="line">  <span class="keyword">this</span>.parent.removeEventListener(<span class="string">'scroll'</span>, <span class="keyword">this</span>.scrollHandler);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这段代码很好理解，除了在组件卸载之前需要移除<code>listener</code>之外，一旦当某个组件可见，那么此时就没必要再监听滚动了，所以需要移除监听函数。</p>
<p>上面的代码还有一个问题，如果当某两次触发监听函数组件的状态刚好从<code>visible</code>为<code>false</code>切换到<code>true</code>，此时移除了监听函数，但当次函数还会再次执行，所以在移除监听函数后，直接返回，可以避免执行下面不必要的逻辑。因此，这段代码应该是：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; visible &#125; = <span class="keyword">this</span>.state;</span><br><span class="line"><span class="keyword">if</span> (visible) &#123;</span><br><span class="line">  <span class="keyword">this</span>.parent.removeEventListener(<span class="string">'scroll'</span>, <span class="keyword">this</span>.scrollHandler);</span><br><span class="line">  <span class="keyword">return</span>; <span class="comment">// 直接返回不执行当次eventListener</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h3><p>到此为止，一个基本可用的<code>ScrollLoad</code>组件就实现了，其实对于不同的使用场景，<code>ScrollLoad</code>的实现也可以略有不同，例如如果当前需要<code>scrollload</code>的组件是一些列表项组件，每个组件的样式外观都是一致的。这样的话，我们在写<code>lazyload</code>组件的时候，就可以把所有组件使用一个<code>LazyLoad</code>组件包裹起来，然后绑定一个监听函数，使用可显示的组件个数作为组件状态，每次滚动时监听函数根据已经滚动的高度去计算可见组件的个数，最后在渲染的时候遍历<code>this.props.children</code>，选择渲染组件或是占位组件即可。</p>
<p>附 <code>LazyLoad</code>实现代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; findDOMNode &#125; <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> throttle <span class="keyword">from</span> <span class="string">'lodash/throttle'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Spin &#125; <span class="keyword">from</span> <span class="string">'@xx/xx-ui'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactPlaceHolder <span class="keyword">from</span> <span class="string">'react-placeholder'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getScrollParent</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> style = <span class="function">(<span class="params">elem, prop</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (getComputedStyle !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> getComputedStyle(elem, <span class="literal">null</span>).getPropertyValue(prop);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> elem.style[prop];</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> overflow = <span class="function"><span class="params">node</span> =&gt;</span> style(node, <span class="string">'overflow'</span>) + style(node, <span class="string">'overflow-x'</span>) + style(node, <span class="string">'overflow-y'</span>);</span><br><span class="line">  <span class="comment">// 循环判断父节点是否可滚动这里暂不添加，直接去直接父元素</span></span><br><span class="line">  <span class="keyword">if</span> (!(element <span class="keyword">instanceof</span> HTMLElement)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">window</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> parent = element;</span><br><span class="line">  <span class="keyword">while</span> (parent) &#123;</span><br><span class="line">    <span class="comment">// 当前节点是body或者document</span></span><br><span class="line">    <span class="keyword">if</span> (parent === <span class="built_in">document</span>.body || parent === <span class="built_in">document</span>.documentElement) &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 当期元素无父节点</span></span><br><span class="line">    <span class="keyword">if</span> (!parent.parentNode) &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断节点是否含有overflow等属性的值</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/(scroll|auto|inherit)/</span>.test(overflow(parent))) &#123;</span><br><span class="line">      <span class="keyword">return</span> parent;</span><br><span class="line">    &#125;</span><br><span class="line">    parent = parent.parentNode;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">window</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> EmptyCompBox = <span class="function">(<span class="params">&#123; ...props &#125;</span>) =&gt;</span> (</span><br><span class="line">  &lt;div &#123;...props&#125;&gt;</span><br><span class="line">    &lt;Spin size=<span class="string">"large"</span> className=<span class="string">"lazyload-center-spin"</span> /&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">class ScrollLoad extends React.Component &#123;</span></span><br><span class="line"><span class="regexp">  state = &#123;</span></span><br><span class="line"><span class="regexp">    visible: false,</span></span><br><span class="line"><span class="regexp">  &#125;;</span></span><br><span class="line"><span class="regexp">  componentDidMount() &#123;</span></span><br><span class="line"><span class="regexp">    let dom = findDOMNode(this); /</span><span class="regexp">/ 取得当前节点</span></span><br><span class="line"><span class="regexp">    let parent = getScrollParent(dom);</span></span><br><span class="line"><span class="regexp">    this.parent = parent;</span></span><br><span class="line"><span class="regexp">    let visible = this.checkVisible(dom, parent); /</span><span class="regexp">/ 初始化检查是否可见</span></span><br><span class="line"><span class="regexp">    visible();</span></span><br><span class="line"><span class="regexp">    this.scrollHandler = throttle(this.checkVisible(dom, parent), 100);</span></span><br><span class="line"><span class="regexp">    parent.addEventListener('scroll', this.scrollHandler, &#123; passive: true &#125;);</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">  componentWillUnmount() &#123;</span></span><br><span class="line"><span class="regexp">    this.parent.removeEventListener('scroll', this.scrollHandler);</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">  getNodeOffsetTop = (node, parent) =&gt; &#123;</span></span><br><span class="line"><span class="regexp">    let current = node;</span></span><br><span class="line"><span class="regexp">    let offsetTop = 0;</span></span><br><span class="line"><span class="regexp">    while (current !== parent) &#123;</span></span><br><span class="line"><span class="regexp">      offsetTop += current.offsetTop;</span></span><br><span class="line"><span class="regexp">      current = current.parentElement;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    return offsetTop;</span></span><br><span class="line"><span class="regexp">  &#125;;</span></span><br><span class="line"><span class="regexp">  checkVisible = (node, parent) =&gt; &#123;</span></span><br><span class="line"><span class="regexp">    if (!node || !parent) &#123;</span></span><br><span class="line"><span class="regexp">      this.setState(&#123; visible: true &#125;);</span></span><br><span class="line"><span class="regexp">      return null;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    let seenHeight = parent.clientHeight;</span></span><br><span class="line"><span class="regexp">    let scrollHeight = parent.scrollTop;</span></span><br><span class="line"><span class="regexp">    return () =&gt; &#123;</span></span><br><span class="line"><span class="regexp">      const &#123; visible &#125; = this.state;</span></span><br><span class="line"><span class="regexp">      if (visible) &#123;</span></span><br><span class="line"><span class="regexp">        this.parent.removeEventListener('scroll', this.scrollHandler);</span></span><br><span class="line"><span class="regexp">        return; /</span><span class="regexp">/ 直接返回不执行当次eventListener</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">      let currentNode = findDOMNode(this); /</span><span class="regexp">/ 获取最新的dom结构</span></span><br><span class="line"><span class="regexp">      let offsetTop = this.getNodeOffsetTop(currentNode, parent);</span></span><br><span class="line"><span class="regexp">      /</span><span class="regexp">/ 1. 当偏移高度小于可见高度</span></span><br><span class="line"><span class="regexp">      /</span><span class="regexp">/ 2. 初始不可见的时候，当可视高度+滚动高度大于了偏移高度</span></span><br><span class="line"><span class="regexp">      if (offsetTop &lt;= seenHeight + scrollHeight) &#123;</span></span><br><span class="line"><span class="regexp">        this.setState(&#123; visible: true &#125;);</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">    &#125;;</span></span><br><span class="line"><span class="regexp">  &#125;;</span></span><br><span class="line"><span class="regexp">  render() &#123;</span></span><br><span class="line"><span class="regexp">    const &#123; visible &#125; = this.state;</span></span><br><span class="line"><span class="regexp">    const &#123; id, className, style &#125; = this.props;</span></span><br><span class="line"><span class="regexp">    return (</span></span><br><span class="line"><span class="regexp">      &lt;ReactPlaceHolder</span></span><br><span class="line"><span class="regexp">        ready=&#123;visible&#125;</span></span><br><span class="line"><span class="regexp">        customPlaceholder=&#123;&lt;EmptyCompBox id=&#123;id&#125; className=&#123;className&#125; style=&#123;style&#125; /</span>&gt;&#125;</span><br><span class="line">      &gt;</span><br><span class="line">        &#123;<span class="keyword">this</span>.props.children&#125;</span><br><span class="line">      &lt;<span class="regexp">/ReactPlaceHolder&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default ScrollLoad;</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> React </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于eject需要知道的]]></title>
      <url>http://yoursite.com/2019/06/05/eject/</url>
      <content type="html"><![CDATA[<p>整理：使用<code>create-react-app</code>构建的项目在<code>yarn run eject</code>后的一些问题。</p>
<h3 id="eject之前"><a href="#eject之前" class="headerlink" title="eject之前"></a>eject之前</h3><p><code>create-react-app</code>脚手架把关于<code>webpack</code>配置和其它脚本封装到了一个叫做<code>react-scripts</code>的<code>package</code>里。默认情况下所有的配置是不可见的，但是可以通过<code>react-app-rewired</code>在不<code>eject</code>的条件下修改某些<code>webpack</code>配置。这样的方式在绝大多数情况下是可行的，但是如果我们想更精确的控制，比如修改默认的css打包方式、使用<code>less</code>、组件库按需加载等，即使也能够做，但或多或少会用到<code>hack</code>的方式。</p>
<p>在运行<code>yarn run eject</code>后，所有关于<code>webpack</code>配置将会暴露出来，在根目录会生成<strong>config</strong>和<strong>scripts</strong>两个目录，并且<code>react-script</code>将不复存在，所有<code>react-script</code>的依赖都将注入到项目中。</p>
<p><code>eject</code>是单项操作，一旦完成，就没办法还原，这就意味着复杂的<code>webpack</code>管理将交由我们自己管理。</p>
<h3 id="eject进行时"><a href="#eject进行时" class="headerlink" title="eject进行时"></a>eject进行时</h3><ol>
<li><p>步骤1 运行<code>yarn run eject</code>，稍等片刻，观察到生成新增了<strong>config</strong>和<strong>scripts</strong>两个目录，并且<code>package.json</code>文件被修改。</p>
</li>
<li><p>打开<code>package.json</code>文件，由于我们已经不使用<code>react-scripts</code>了，所以这里需要修改<code>start build test</code>等命令。使用<code>scripts</code>目录中对应的脚本即可，例如：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"start"</span>: <span class="string">"node scripts/start.js"</span>,</span><br><span class="line">  <span class="string">"build"</span>: <span class="string">"node scripts/build.js"</span>,</span><br><span class="line">  <span class="string">"test"</span>: <span class="string">"node scriprs/test.js"</span></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行<code>yarn start</code>，不出意外的话，项目正常运行，如果提示<em>can’t find module xxx</em>，删除<code>node_modules</code>和<code>yarn.lock</code>(如果有的话)，重新运行<code>yarn install</code>安装依赖即可。</p>
</li>
</ol>
<h3 id="eject后出现了问题"><a href="#eject后出现了问题" class="headerlink" title="eject后出现了问题"></a>eject后出现了问题</h3><p>如果是<code>eject</code>后运行项目报错，重新安装依赖后仍然报错，那么就要考虑是依赖版本的问题了。就比如笔者的这个项目，使用老版本的<code>react-react-app</code>生成，并且在中期升级了<code>react-scripts</code>和<code>react</code>等，且使用了特定版本的<code>eslint</code>规则。在根据报错提示进行修复后，运行项目仍然报错且无任何报错提示。</p>
<p>我们需要弄清楚到底是什么依赖有问题，这个过程是复杂且繁琐的，并且可能由于依赖前后版本已经发生了巨大的变化，即使找到存在问题的依赖也可能不能仅通过升级该依赖的版本解决问题。</p>
<p>所以一个备选方案是把项目整体迁移到新版本的<code>create-react-app</code>上，这里有两个做法：使用<code>create-react-app</code>新生成一个项目，我们把源码和依赖都迁移到新项目中，在新的项目中进行<code>eject</code>；使用<code>create-react-app</code>生成一个空的项目并<code>eject</code>，使用新的<em>config</em>和<em>scripts</em>替换当前项目的脚本和配置，并且比较<code>packahe.json</code>，更新依赖的版本，重新安装依赖，大功告成。</p>
<p>在实际的情况下，受制于项目版本控制、团队协作、迁移成本等，第一种方式，基本不可用。</p>
<p>解决完问题，接下来我们需要将写在<code>config-overrides.js</code>中的自定义配置进行迁移。</p>
<h3 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h3><blockquote>
<p>在进行自定义配置之前，如果项目因<code>eslint</code>规则，无法运行成功，可以尝试在<code>config/webpack.config.js</code>中找到<code>eslint-loader</code>并且注释掉这个配置，此时在开发模式下，<code>eslint</code>并不会对源码进行规则校验。</p>
</blockquote>
<h4 id="less支持"><a href="#less支持" class="headerlink" title="less支持"></a>less支持</h4><p>因为<code>create-react-app</code>脚手架并不支持<code>less</code>，我们需要手动添加对<code>less</code>的支持。首先安装<code>less-loader</code>，并在<code>webpack.config.js</code>中的<code>module.rules</code>下添加：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> lessRegex = <span class="regexp">/\.less$/</span>;</span><br><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  rules: [</span><br><span class="line">    ...</span><br><span class="line">    &#123;</span><br><span class="line">      test: lessRegex,</span><br><span class="line">      use: getStyleLoaders(</span><br><span class="line">        &#123;</span><br><span class="line">          importLoaders: <span class="number">2</span>,</span><br><span class="line">          sourceMap: isEnvProduction &amp;&amp; shouldUseSourceMap,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">'less-loader'</span></span><br><span class="line">      ),</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>注意到这里使用到了一个封装好的函数<code>getStyleLoaders</code>，其针对不同的css预处理器，生成适用的<code>loader</code>，源码非常简单：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getStyleLoaders = <span class="function">(<span class="params">cssOptions, preProcessor</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> loaders = [</span><br><span class="line">      isEnvDevelopment &amp;&amp; <span class="built_in">require</span>.resolve(<span class="string">'style-loader'</span>),</span><br><span class="line">      isEnvProduction &amp;&amp; &#123;</span><br><span class="line">        loader: MiniCssExtractPlugin.loader,</span><br><span class="line">        options: shouldUseRelativeAssetPaths ? &#123; <span class="attr">publicPath</span>: <span class="string">'../../'</span> &#125; : &#123;&#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        loader: <span class="built_in">require</span>.resolve(<span class="string">'css-loader'</span>),</span><br><span class="line">        options: cssOptions,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        loader: <span class="built_in">require</span>.resolve(<span class="string">'postcss-loader'</span>),</span><br><span class="line">        options: &#123;</span><br><span class="line">          ident: <span class="string">'postcss'</span>,</span><br><span class="line">          plugins: <span class="function"><span class="params">()</span> =&gt;</span> [</span><br><span class="line">            <span class="built_in">require</span>(<span class="string">'postcss-flexbugs-fixes'</span>),</span><br><span class="line">            <span class="built_in">require</span>(<span class="string">'postcss-preset-env'</span>)(&#123;</span><br><span class="line">              autoprefixer: &#123;</span><br><span class="line">                flexbox: <span class="string">'no-2009'</span>,</span><br><span class="line">              &#125;,</span><br><span class="line">              stage: <span class="number">3</span>,</span><br><span class="line">            &#125;),</span><br><span class="line">            postcssNormalize(),</span><br><span class="line">          ],</span><br><span class="line">          sourceMap: isEnvProduction &amp;&amp; shouldUseSourceMap,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ].filter(<span class="built_in">Boolean</span>);</span><br><span class="line">    <span class="keyword">if</span> (preProcessor) &#123;</span><br><span class="line">      loaders.push(&#123;</span><br><span class="line">        loader: <span class="built_in">require</span>.resolve(preProcessor),</span><br><span class="line">        options: &#123;</span><br><span class="line">          sourceMap: isEnvProduction &amp;&amp; shouldUseSourceMap,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> loaders;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure></p>
<p>我们知道如果使用了<code>css</code>预处理器，在设置<code>loader</code>的时候，可能需要多个<code>loaders</code>，例如:</p>
<ul>
<li><code>less-loader</code>: 把<code>less</code>编译成<code>css</code></li>
<li><code>css-loader</code>: 解决<code>css</code>使用<code>import</code>、<code>require</code>引入的问题</li>
<li><code>style-loader</code>: 通过style标签把<code>css</code>注入到<code>DOM</code>中。</li>
<li>生产环境下可能还需要生成单独的css文件，css压缩等。</li>
</ul>
<p>而<code>getStyleLoaders</code>就是生成这些<code>loaders</code>的一个公共方法。</p>
<h4 id="组件库按需加载"><a href="#组件库按需加载" class="headerlink" title="组件库按需加载"></a>组件库按需加载</h4><p>在开发过程中，如果使用到了组件库且该组件库支持按需加载(例如<em>antd</em>)，那么我们可以根据相关的教程配置即可。</p>
<p>比如在当前项目中使用到了<code>xx-ui</code>这个组件库，该组件库支持<code>babel-plugin-import</code>按需加载，在安装好依赖后，我们只需要在<code>package.json</code>的<code>babel</code>下配置<code>plugin</code>：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"babel"</span>: &#123;</span><br><span class="line">  <span class="string">"presets"</span>: [</span><br><span class="line">    <span class="string">"react-app"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"plugins"</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">"import"</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"libraryName"</span>: <span class="string">"@wind/xx-ui"</span>,</span><br><span class="line">        <span class="string">"libraryDirectory"</span>: <span class="string">"es"</span>,</span><br><span class="line">        <span class="string">"style"</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这和传统的<code>.babelrc</code>中进行<code>plugin</code>配置无区别，但总算不用再维护额外的一个文件了。</p>
<h4 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h4><p>比如我们在构建时需要对代码进行拆分，我们可以在<code>webpack.config.js</code>的<code>optimization</code>中使用<code>splitChunks</code>进行自定义、分离<code>runtimeChunk等</code>。</p>
<p>比如我们构建时不想使用默认的<code>static/js/[name].[contenthash:8].chunk.js</code>作为<code>chunks</code>的文件名，直接修改即可。注意，在代码分割时，相应的<code>css</code>也会被分割，如果想修改<code>css</code>的配置可以直接找到<code>MiniCssExtractPlugin</code>进行修改即可。</p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>经过上面所有的步骤，项目已经能够完全正常运行，和<code>eject</code>之前一样。接下来我们可以详细阅读<code>webpack.config.js</code>，进行更进一步的定制，也可以删除某些项目中不需要的配置，减轻<code>webpack.config.js</code>的复杂性。</p>
<p>如果项目是老项目的话，为了项目能够在<code>eject</code>后不会因为<code>eslint</code>报错而无法正常运行，可以注释掉<code>eslint-loader</code>来避免每次构建时候的预检，但此时对代码风格的约束只限于编辑器本身<code>eslint</code>的支持，对代码质量和团队代码风格可能造成一定的影响。</p>
<p>更好的方式是使用一个适合这个项目的<code>eslint</code>规则，如<code>eslint-config-airbnb-base</code>，并且对这个第三方规则进行定制，直至这个规则适合这个项目。</p>
<p>完。</p>
]]></content>
      
        
        <tags>
            
            <tag> Webpack </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[老项目Webpack构建优化]]></title>
      <url>http://yoursite.com/2019/06/01/%E8%80%81%E9%A1%B9%E7%9B%AEWebpack%E6%9E%84%E5%BB%BA%E4%BC%98%E5%8C%96/</url>
      <content type="html"><![CDATA[<p>最近在接手一个项目的时候，由于其开发已经一年有余，整个项目使用了<code>create-react-app</code>脚手架，<em>Webpack</em>版本停留在3.x，<em>React</em>版本15.x，并且在线上使用效果并不好，首页加载缓慢。对于这样一个典型的<strong>老项目</strong>，进行构建优化。</p>
<blockquote>
<p>在<code>webpack 3.x</code>之前的构建中，该项目使用<code>CommonChunkPlugin</code>对特定的<code>package</code>进行了抽取，例如<code>react</code>、图表库、组件库，其余使用到的<code>package</code>和业务代码被打包在了一起，<em>Gzip</em>过后差不多<code>1MB</code>。通过分析可以得知，分离出的第三方库和业务代码存在重复打包的情况，并且页面初始加载并不需要用到图标库，而组件库只使用到了部分组件却被完全打包了。</p>
</blockquote>
<h3 id="升级Webpack"><a href="#升级Webpack" class="headerlink" title="升级Webpack"></a>升级Webpack</h3><p>由于使用的是<code>create-react-app</code>脚手架，其自带了<code>react-scripts</code>作为<code>webpack</code>的配置，本项目使用的是老版本脚手架生成，<em>Webpack</em>版本是<code>3.x</code>。分析后，在不更新脚手架的前提下，直接升级<em>Webpack</em>，可以使用<code>splitChunk</code>进行代码分隔，配合新版本的<em>React</em>的<code>lazy &amp; Suspense</code>，可不引入三方库的情况下实现按需加载。</p>
<p>升级<em>Webpack</em>比较容易，直接升级最新版的<code>react-scripts</code>即可（注意不是<code>react-script</code>）。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add --exact react-scripts@2.1.1</span><br></pre></td></tr></table></figure></p>
<p>安装完后<code>yarn start</code>运行项目，不出意外会有报错提示，因为某些<code>react-scripts</code>依赖的库版本过低，此时只要删除<code>yarn.lock</code>和<code>package-lock.json</code>和<code>node_modules</code>，并且运行<code>yarn install</code>重新安装依赖即可。</p>
<p>安装完成后，不出意外项目可以正常运行了，此时<em>Webpack</em>已升级。</p>
<h3 id="代码分隔"><a href="#代码分隔" class="headerlink" title="代码分隔"></a>代码分隔</h3><ol>
<li><p>考虑到初次构建的时候仅仅分离部分第三方库导致第三方包和业务代码之间存在代码冗余，在新构建的版本中，需要对公用代码进行抽取，这样可以直接避免冗余。具体的<code>splitChunk</code>配置这里不再列出，抽取完成后例如<code>lodash</code>、<code>moment</code>这样的公共库被抽取到了公共包中，构建完成后生成了三个包：业务代码及未抽取的第三方包、特定的第三方包、公共代码包，构建体积明显减少。</p>
</li>
<li><p>由于业务的特殊性，首页并不包含任何图表，因此不需要加载图表库，并且图表库打包完成后大小为<code>700KB</code>（未Gzip），因此考虑使用基于路由的按需加载来去除首页不需要加载的资源。</p>
</li>
<li><p>进行代码分隔依赖于运行时加载，也就是<code>import()</code>，这是一个<code>ES</code>提案，目前还未标准化(<em>babel</em>已实现)。不同于<code>import</code>语法在预编译时链接代码，<code>import()</code>可以在运行时异步加载资源。而<em>Webpack</em>在解析到这种语法的时候，就会自动的进行代码分隔。</p>
</li>
<li><p>目前<em>React</em>懒加载的方案有很多，比如<code>react-loadable</code>，但由于新版的<em>React</em>已经支持了代码分隔，就没必要引入额外的库。<code>React.lazy</code>函数能够让你像处理常规组件一样处理懒加载组件。该函数接收一个函数作为参数，这个函数必须使用到<code>import()</code>动态加载组件，<code>import()</code>返回一个<code>Promise</code>，在<code>resolve</code>后返回这个React组件。<code>Suspense</code>是一个组件，其主要的作用是在懒加载块没有加载完成时使用占位组件进行UI 的优雅降级。</p>
</li>
<li><p>经过分析，基于路由的分隔可能最适合本项目。涉及到图表库的三个页面使用懒加载进行代码分隔，其余页面打包在一起，并且完全分离第三方库和业务代码。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; lazy, Suspense &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> Loading <span class="keyword">from</span> <span class="string">'@/components/loading'</span></span><br><span class="line"><span class="keyword">const</span> ChartPage = lazy(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: "detail" */</span><span class="string">'@/views/chartPage'</span>));</span><br><span class="line"><span class="keyword">const</span> App = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">  &lt;Router&gt;</span><br><span class="line">    &lt;Suspense fallback=&#123;Loading&#125;&gt;</span><br><span class="line">      &lt;Switch&gt;</span><br><span class="line">        &lt;Route path=<span class="string">'/detail'</span> component=&#123;ChartPage&#125; /&gt;</span><br><span class="line">        ...</span><br><span class="line">      &lt;<span class="regexp">/Switch&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>Suspense&gt;</span><br><span class="line">  &lt;<span class="regexp">/Router&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>直接运行<code>yarn start</code>，观察打包结果，发现已经按照路由进行了分隔，在总打包大小基本不变的情况下，初始加载的包只有<code>230KB</code>，减少了一大半。</p>
<ol start="6">
<li>观察打包结果，发现公共包的命名是<code>0.hash.chunk.js</code>，对于已经在注释中指定了<code>webpackChunkName</code>，这显然是不正常的，可能是<code>react-scripts</code>默认分隔策略的问题。为了修复这个命名问题并且进一步分隔<code>runtime chunk</code>，对<code>splitChunk</code>进行少量的配置。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> SplitCodeConfig = &#123;</span><br><span class="line">  optimization: &#123;</span><br><span class="line">    splitChunks: &#123;</span><br><span class="line">      chunks: <span class="string">'all'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    runtimeChunk: &#123;</span><br><span class="line">      name: <span class="string">'runtime'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>只需要进行简单的配置，设置<code>splitChunks</code>的<code>chunks</code>为<code>all</code>, <em>Webpack</em>就会使用默认的规则进行打包：抽取公共包，抽取<code>node_modules</code>第三方包等等，具体见<em>Webpack</em>官网 -&gt; <em>文档</em> -&gt; <em>代码分离</em>。</p>
<p>至此，项目构建已经完成，构建的包可以直接用于生产换环境。</p>
<h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><ol>
<li><p>在项目中使用到的组件库包含近百个通用组件和业务组件，但是项目中只使用到了十余个，并且通过观察打包结果，可以看到未被使用到的组件也被打包进来了，这显然不合理。针对这个问题，我们可以查看对应组件库的按需加载方案，并且在<em>Webpack</em>进行相应的配置即可。这里由于使用的是内部开发的组件库，就不在举例。</p>
</li>
<li><p>除了使用的组件库，我们需要找到所有能够按需加载却在项目中没有使用的第三方库。例如我要使用<code>lodash</code>的<code>debounce</code>函数进行防抖，我在项目中是这样使用的：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">'lodash'</span>;</span><br><span class="line"><span class="built_in">window</span>.onscroll = _.debounce(handler);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>在构建的时候，整个<code>lodash</code>会被打包，如果只需要打包<code>debounce</code>函数，在<code>import</code>的时候直接<code>import debounce from &#39;lodash/debounce&#39;</code>即可。</p>
<h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><ol>
<li><p>为了直观的查看构建结果，推荐使用<code>webpack-bundle-analyzer</code>插件，它会在构建完成后打开一个页面，该页面可以看到每个<code>bundle</code>的打包情况。使用也很简单:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> BundleAnalyzerPlugin = <span class="built_in">require</span>(<span class="string">'webpack-bundle-analyzer'</span>).BundleAnalyzerPlugin;</span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> BundleAnalyzerPlugin(),</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果想测试<code>Gzip</code>后的文件大小，在<code>webpack-dev-server</code>的配置项中添加<code>compress: true</code>即可。但如果查看生产环境下构建的<code>Gzip</code>包大小，可以使用<code>compression-webpack-plugin</code>插件，该插件会在构建完成后生成对应<code>bundle</code>的<code>Gzip</code>包。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> CompressionPlugin = <span class="built_in">require</span>(<span class="string">'compression-webpack-plugin'</span>);</span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> CompressionPlugin(&#123; <span class="attr">threshold</span>: <span class="number">8192</span> &#125;), <span class="comment">// 只有大于8KB的资源才压缩</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>在一般的情况下开启<code>Gzip</code>只需要设置生产服务器即可，并不需要在构建时生成<code>Gzip</code>包，但如果每次请求时再<code>Gzip</code>无疑会加大服务器的负担，因此事先准备好<code>gzip</code>包，服务器不必压缩而是直接返回，这不失为一个好的选择。</p>
<p>开启<code>Gzip</code>会极大的减小传输体积，但无论是压缩还是解压都需要大量的运算，对于某些较小的资源，使用<code>Gzip</code>可能反而会降低性能，因此建议只对较大的资源进行<code>Gzip</code>压缩，而较小的资源直接传输。</p>
<p>完。</p>
]]></content>
      
        
        <tags>
            
            <tag> Webpack </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Webpack 4.x 简易使用指南]]></title>
      <url>http://yoursite.com/2019/02/25/webpack-in-thinking/</url>
      <content type="html"><![CDATA[<blockquote>
<p>本篇来自于之前在团队内部分享<code>webpack</code>时的笔记，内容比较浅显，主要讲<code>webpack</code>基本配置，同时<code>webpack</code>运行原理，自定义<code>loader</code>和<code>plugin</code>也有涉及。</p>
</blockquote>
<h3 id="Webpack4-x使用指南"><a href="#Webpack4-x使用指南" class="headerlink" title="Webpack4.x使用指南"></a>Webpack4.x使用指南</h3><h4 id="零配置使用Webpack"><a href="#零配置使用Webpack" class="headerlink" title="零配置使用Webpack"></a>零配置使用Webpack</h4><blockquote>
<p>从Webpack4开始支持零配置，在不进行任何配置的形式下，直接运行<code>webpack</code>，<code>webpack</code>从<code>src/index.js</code>作为入口，最终结果输出到<code>/dist</code>。</p>
</blockquote>
<p>在默认情况下，<code>webpack</code>只会对只会从入口开始遍历所有依赖文件，由于没有配置<code>loaders</code>，因此无法处理<code>jsx</code>/<code>css</code>/图片等。</p>
<p>在默认情况下运行<code>webpack</code>，打包完成后控制台会提示在配置打包的模式。在cli中通过设置<code>--mode=production|development</code>可以指定默认，在开发模式|产品模式下，webpack会默认启用不同插件对打包进行优化。</p>
<h4 id="webpack基本配置"><a href="#webpack基本配置" class="headerlink" title="webpack基本配置"></a>webpack基本配置</h4><ol>
<li><p>入口(entry)<br>入口的配置形式有多种，例如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">entry: <span class="string">'./src/index.js'</span>, <span class="comment">// #1</span></span><br><span class="line">entry: &#123;</span><br><span class="line">  home: <span class="string">'./home.js'</span>,</span><br><span class="line">  about: <span class="string">'./about.js'</span>,</span><br><span class="line">&#125;, <span class="comment">// #2</span></span><br><span class="line">entry: [<span class="string">'./home.js'</span>, <span class="string">'./about.js'</span>] <span class="comment">// #3</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>第一种方式配置单一入口，所有文件将会被打包到同一个文件中，例如默认将会打包到<code>main.js</code>中；第二种方式是多页面(MPA)的配置方式，配置多个入口，最终将会生成多个<code>bundle</code>，配合<code>html-webpack-plugin</code>可以将对应的<code>bundle</code>注入到对应的<code>html</code>中；第三种配置的形式指定了多个入口，但是会将最终结果打包到一个文件中。</p>
</blockquote>
</li>
<li><p>输出(output)<br>输出指定了<em>webpack</em>将结果输出到哪里，如何进行输出，甚至是使用何种方式构建等，配置比较复杂。常用配置举例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">output: &#123;</span><br><span class="line">  filename: <span class="string">'[name].[hash].js'</span>,</span><br><span class="line">  path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">&#125;, <span class="comment">// #1</span></span><br><span class="line">output: &#123;</span><br><span class="line">  filename: <span class="string">'[name].[hash].js'</span>,</span><br><span class="line">  path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">  library: <span class="string">'xxLibrary'</span>,</span><br><span class="line">  libraryTarget: <span class="string">'amd'</span>,</span><br><span class="line">&#125;, <span class="comment">// #2</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>第一种配置方式是最基本的输出配置，它配置了输入文件的存放的目录以及文件命名，<em>filename</em>支持模板语法，<code>[name].[hash].js</code>表示使用模块名称(入口配置)以及模块标识符来命名文件。<br>第二种配置增加了’library’, ‘libraryTarget’两个属性，而<code>library</code>值的作用取决于<code>libraryTarget</code>的值。例2中配置<code>libraryTarget: &#39;amd&#39;</code>表示使用<code>amd</code>的方式打包，而<code>library</code>的值将作为模块名。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">define(<span class="string">'xxLibrary'</span>, [], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> _entry_return_;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>而当<code>libraryTarget: &#39;commonjs2&#39;</code>时，表示该模块将使用<code>commonjs</code>的方式打包，用于<em>node</em>环境，而<code>library</code>将不起作用。此外<code>libraryTarget</code>的值还可以是<code>var(默认)</code>、<code>this</code>等。</p>
</blockquote>
</li>
<li><p>加载器(loader)<br>在webpack中<code>module</code>决定了如何处理项目中不同类型的模块，而加载器(loader)则是具体的处理逻辑。</p>
<blockquote>
<p>noParse：指定不需要进行构建的文件。例如，指定项目中不需要对<code>jquery</code>进行构建，可以进行如下配置:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">noParse: <span class="function"><span class="keyword">function</span>(<span class="params">content</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="regexp">/jquery/</span>.test(content);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
</blockquote>
<p>规则(rules)的配置同样比较复杂，常用的配置如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">rules: [</span><br><span class="line">  &#123;</span><br><span class="line">    test: <span class="regexp">/\.(js|jsx)$/</span>,</span><br><span class="line">    exclude: <span class="regexp">/(node_modules|bower_components)/</span>,</span><br><span class="line">    include: <span class="regexp">/src/</span>,</span><br><span class="line">    use: <span class="string">'babel-loader'</span></span><br><span class="line">  &#125;, <span class="comment">// #1</span></span><br><span class="line">  &#123;</span><br><span class="line">    test: <span class="regexp">/\.(png|jpeg|gif)$/</span>,</span><br><span class="line">    oneOf: [</span><br><span class="line">      &#123;</span><br><span class="line">        resourceQuery: <span class="regexp">/inline/</span>,</span><br><span class="line">        use: <span class="string">'url-loader'</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        resourceQuery: <span class="regexp">/external/</span>,</span><br><span class="line">        use: <span class="string">'file-loader'</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;, <span class="comment">// #2</span></span><br><span class="line">  &#123;</span><br><span class="line">    test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">    use: ExtractTextPlugin.extract(&#123;</span><br><span class="line">      fallback: <span class="string">'style-loader'</span>,</span><br><span class="line">      use: [</span><br><span class="line">        &#123;</span><br><span class="line">          loader: <span class="string">'css-loader'</span>,</span><br><span class="line">          options: &#123;</span><br><span class="line">            modules: <span class="literal">true</span></span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;,</span><br><span class="line">], <span class="comment">// #3</span></span><br></pre></td></tr></table></figure>
<p>上面列举了常用的配置<em>loader</em>的三种情况，第一种处理<code>js|jsx</code>文件时，使用<code>exclude</code>和<code>include</code>指定构建目录和不需要构建的目录，对于明确不需要构建的模块进行指定可以加快构建速度。第二种情况则是根据具体情况选择对应的loader进行处理。例如当我们使用<code>import emoj from &#39;./emoj.png?inline&#39;</code>时，则会使用<code>url-loader</code>对该<code>png</code>文件进行处理，对于<code>external</code>类型的图片，则使用<code>file-loader</code>处理。第三种情况则是使用多个<em>loader</em>并且可以传递<em>options</em>，例如处理css文件，这里使用了<code>style-loader</code>和<code>css-loader</code>两个加载器，并且配置了<code>css-loader</code>的options<code>modules: true</code>。这里需要关注<code>loader</code>执行顺序，<em>loader</em>执行的顺序是<strong>先配置后执行</strong>，例如这里先使用<code>css-loader</code>解析<code>css</code>，再使用<code>style-loader</code>配置将生成好的<em>css</em>文件通过<code>&lt;style&gt;</code>标签注入到DOM中。<code>options</code>配置了<code>modules: true</code>，则开启<code>css-modules</code>，写法如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> style <span class="keyword">from</span> <span class="string">'index.css'</span>;</span><br><span class="line"><span class="keyword">let</span> IButton = <span class="function">(<span class="params">&#123;children&#125;</span>) =&gt;</span> (</span><br><span class="line">  &lt;span className=&#123;style.btn&#125;&gt;&#123;children&#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>插件(plugin)<br>插件(plugin)用于以各种方式自定义webpack构建过程。webpack附带了非常多的插件，可以直接使用<code>webpack.pluginname</code>使用，也存在非常多的第三方插件。例如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">   <span class="keyword">new</span> CleanWebpackPlugin([<span class="string">'dist'</span>]), <span class="comment">// #1</span></span><br><span class="line">   <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">     title: <span class="string">'index'</span>,</span><br><span class="line">     chunks: [<span class="string">'index'</span>],</span><br><span class="line">   &#125;), <span class="comment">// #2</span></span><br><span class="line">   <span class="keyword">new</span> BundleAnalyzerPlugin(&#123;</span><br><span class="line">     analyzerMode: <span class="string">'server'</span>,</span><br><span class="line">     analyzerHost: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">     analyzerPort: <span class="number">8889</span>,</span><br><span class="line">   &#125;), <span class="comment">// #3</span></span><br><span class="line">],</span><br></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p>上例使用了三个插件，第一个插件<code>CleanWebpackPlugin</code>作用是在构建输出前清空文件夹；第二个插件用于生成入口<em>html</em>，例如该<code>html</code>的<em>title</em>，指定其需要注入的<code>bundle</code>(MPA)。第三个插件则是用于分析构建结果的插件，它会在本地启动一个开发服务器，并且通过<code>canvas</code>来绘制构建可视化结果，方便进行构建分析和优化。</p>
</blockquote>
<ol start="5">
<li>开发服务器(devServer)<br><code>webpack-dev-server</code>方便我们进行快速开发应用，它会对代码进行监控，一旦发生更改，它会立即构建，并通过补丁的方式应用更改，使得应用能够快速应用更改。并且其提供了一个基于<code>Express</code>开发的简易服务器，所有资源文件都存在内存中，访问速度极快，并且通过配置可以支持热替换。介绍一下常见的<em>webpack-dev-server</em>配置。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">  contentBase: path.join(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">  compress: <span class="literal">true</span>,</span><br><span class="line">  inline: <span class="literal">true</span>,</span><br><span class="line">  historyApiFallback: <span class="literal">true</span>,</span><br><span class="line">  allowedHosts: [<span class="string">'host1.com'</span>, <span class="string">'host2.com'</span>],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p><code>contentBase</code>主要用于指定静态文件的存放路径，例如所需要图片等，如不指定则无法找到对应文件;</p>
<p><code>compress</code>表示是否开启<code>Gzip</code>压缩;</p>
<p><code>inline</code>表示是否启用内联模式，内联模式：实时重载的脚本会被插入到<code>bundle</code>中，构建消息将会出现在控制台。此外还有<em>iframe</em>模式。</p>
<p><code>historyApiFallback</code>主要针对的是访问不存在的页面时的活动，<code>historyApiFallback: true</code>时访问不存在的页面会直接跳转到<code>index.html</code>，也可以传入一个对象更精确的进行控制跳转。</p>
<p><code>allowedHosts</code>用于指定允许该<em>devServer</em>的主机。</p>
<p><code>hot</code>是否开启<em>热替换</em>，如果为true的话，则会使用<code>webpack.HotModuleReplacementPlugin</code>插件。通过CLI的方式传递。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack-dev-server --hot</span><br></pre></td></tr></table></figure></p>
<h4 id="Webpack-运行流程"><a href="#Webpack-运行流程" class="headerlink" title="Webpack 运行流程"></a>Webpack 运行流程</h4><blockquote>
<p>概括上来说：<br>初始化配置参数 -&gt; 绑定事件钩子回调 -&gt; 确定Entry开始遍历 -&gt; 使用loader编译文件 -&gt; 输出</p>
</blockquote>
<p>webpack就像一条生产线，经过一系列处理流程后才能将源文件转换成输出结果。</p>
<p>每个流程的处理职责是单一的，流程之间存在依赖关系，只有当前处理完成后才能交由下一个流程处理。</p>
<p>插件像是插入到生产线上的一个功能，在特定的时机对资源进行处理。</p>
<p>webpack 通过 <em>Tapable</em>来组织这一切。</p>
<p>Webpack在运行过程中会广播事件，插件只监听它关心的事件。</p>
<p>—《深入浅出webpack》</p>
<p><em>Tapable</em>的核心代码可以简化成。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SyncHook</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.hooks = [];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 订阅事件</span></span><br><span class="line">  tap(name, func) &#123;</span><br><span class="line">    <span class="keyword">this</span>.hook.push(func);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 发布</span></span><br><span class="line">  call() &#123;</span><br><span class="line">    <span class="keyword">this</span>.hooks.forEach(<span class="function"><span class="params">hook</span> =&gt;</span> hook(...arguments));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Webpack具体的流程如图所示。<br><img src="flow.png" alt="流程"></p>
<ol>
<li><p>初始化构建参数(依据webpack.config.js)，插件实例化，生成<code>Compiler</code>供插件使用，挂载自定义钩子。</p>
</li>
<li><p>依据入口递归遍历文件，并且使用对应的loader进行编译。</p>
</li>
<li><p>将编译好的文件解析成AST(抽象语法树)，分析依赖逐个拉取济源。</p>
</li>
<li><p>编译完成，输出。</p>
</li>
</ol>
<h4 id="编写自定义loader"><a href="#编写自定义loader" class="headerlink" title="编写自定义loader"></a>编写自定义loader</h4><blockquote>
<p>在webpack中，真正起编译作用的就是各种各样的loader。loader其实是一个function，其传入匹配到的文件内容(String)，然后对这些内容做处理即可。</p>
</blockquote>
<p>一个最简单的loader可以使下面这样：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">content</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"&#123;&#125;;"</span> + content;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在<em>config</em>中进行配置如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  rules: [</span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">      loader: path.resolve(__dirname, <span class="string">'./loaders/index.js'</span>),</span><br><span class="line">      options: &#123;</span><br><span class="line">        param1: <span class="number">1</span>,</span><br><span class="line">        param2: <span class="number">2</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这样在编译JS的时候就会在每个JS文件前加上<code>{};</code></p>
<hr>
<blockquote>
<p>获取自定义配置</p>
</blockquote>
<p>可以使用<code>loader-utils</code>模块来拿到自定义配置。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> loaderUtils = <span class="built_in">require</span>(<span class="string">'loader-utils'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">content</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> options = loaderUtils.getOptions(<span class="keyword">this</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(options.param1); <span class="comment">// 1</span></span><br><span class="line">  <span class="built_in">console</span>.log(options.param2); <span class="comment">// 2</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">"&#123;&#125;;"</span> + content;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr>
<blockquote>
<p>数据导出</p>
</blockquote>
<p>loader可以通过return来返回处理后的结果；当然，更好的方式是使用<code>this.callback</code>的形式。因为它更加灵活，除了content以外，还可以传递其它参数。</p>
<p><code>this.callback(error, content, sourceMap, ast)</code>可以传入四个参数：</p>
<ul>
<li>error loader向外抛出一个错误</li>
<li>content 经过loader编译后的内容</li>
<li>sourceMap</li>
<li>ast 本次编译生成的AST，之后执行的loader可以直接使用，而不需要再次生成</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> loaderUtils = <span class="built_in">require</span>(<span class="string">'loader-utils'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">content</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> options = loaderUtils.getOptions(<span class="keyword">this</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(options.param1); <span class="comment">// 1</span></span><br><span class="line">  <span class="built_in">console</span>.log(options.param2); <span class="comment">// 2</span></span><br><span class="line">  <span class="keyword">this</span>.callback(<span class="literal">null</span>, <span class="string">"&#123;&#125;;"</span> + content);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<blockquote>
<p>异步loader<br>对于异步loader，可以使用<code>this.async</code>来获取<br><code>callback</code>函数。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> loaderUtils = <span class="built_in">require</span>(<span class="string">'loader-utils'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">content</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> options = loaderUtils.getOptions(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">let</span> callback = <span class="keyword">this</span>.async();</span><br><span class="line">  <span class="keyword">this</span>.cacheable(<span class="literal">false</span>); <span class="comment">// 是否缓存结果</span></span><br><span class="line">  <span class="built_in">console</span>.log(options.param1); <span class="comment">// 1</span></span><br><span class="line">  <span class="built_in">console</span>.log(options.param2); <span class="comment">// 2</span></span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    callback(<span class="literal">null</span>, <span class="string">"&#123;&#125;;"</span> + content);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<blockquote>
<p>pitch钩子<br>可以在loader文件中exports一个名为<em>pitch</em>的函数，它会先于所有的loaders执行。可以在这个过程中传参，而<strong>当前rule的所有loaders</strong>都可以拿到这个参数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> loaderUtils = <span class="built_in">require</span>(<span class="string">'loader-utils'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">content</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> options = loaderUtils.getOptions(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">let</span> callback = <span class="keyword">this</span>.async();</span><br><span class="line">  <span class="keyword">this</span>.cacheable(<span class="literal">false</span>); <span class="comment">// 是否缓存结果</span></span><br><span class="line">  <span class="built_in">console</span>.log(options.param1); <span class="comment">// 1</span></span><br><span class="line">  <span class="built_in">console</span>.log(options.param2); <span class="comment">// 2</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.data.hello); <span class="comment">// hello</span></span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    callback(<span class="literal">null</span>, <span class="string">"&#123;&#125;;"</span> + content);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports.pitch = <span class="function"><span class="keyword">function</span>(<span class="params">remaining, preceding, data</span>) </span>&#123;</span><br><span class="line">  data.hello = <span class="string">'hello'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h4 id="Plugin-初探"><a href="#Plugin-初探" class="headerlink" title="Plugin 初探"></a>Plugin 初探</h4><blockquote>
<p>Plugin起始是一个简单的<em>class</em>，有一个必须要实现的<em>apply</em>方法。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LPlugin</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(options) &#123;</span><br><span class="line">    <span class="keyword">this</span>.options = options;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'options'</span>, options);</span><br><span class="line">  &#125;</span><br><span class="line">  apply(compiler) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'run this plugin'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> LPlugin = <span class="built_in">require</span>(<span class="string">'./plugins/LPlugin'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  ...,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> LPlugin(&#123;</span><br><span class="line">      param1: <span class="number">1</span>,</span><br><span class="line">      param2: <span class="number">2</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>plugin在初始化参数就进行实例化(事件流开始时)，因此类似于<code>CleanWebpackPlugin</code>在构建之前进行文件操作删除掉某些目录也是很好实现的。</p>
<hr>
<blockquote>
<p>Tapable &amp; Hook Tapable是Webpack构建过程中的核心所在，其暴露了<code>tap tapAsync tapPromoise</code>等方法，可以使用这些方法，来注入一些逻辑，这些逻辑将会在构建过程的不同时机触发。</p>
</blockquote>
<p>例如:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">compiler.hooks.compile.tap(<span class="string">'LPlugin'</span>, params =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'触发了钩子函数'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>该钩子函数将会在<code>compile</code>阶段触发。</p>
<p>*** 自定义钩子函数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; SyncHook &#125; = <span class="built_in">require</span>(<span class="string">'tapable'</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LPlugin</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(options) &#123;</span><br><span class="line">    <span class="keyword">this</span>.options = options;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'options'</span>, options);</span><br><span class="line">  &#125;</span><br><span class="line">  apply(compiler) &#123;</span><br><span class="line">    compiler.hooks.LPlugin = <span class="keyword">new</span> SyncHook([<span class="string">'data'</span>]);</span><br><span class="line">    compiler.hooks.enviroment.tap(<span class="string">'MyPlugin'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      compiler.hooks.LPlugin.call(<span class="string">'hello'</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'run this plugin'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LLPlugin</span> </span>&#123;</span><br><span class="line">  apply(compiler) &#123;</span><br><span class="line">    compiler.hooks.LPlugin.tap(<span class="string">'LLPlugin'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'data'</span>, data); <span class="comment">// data hello</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用Webpack DllPlugin]]></title>
      <url>http://yoursite.com/2019/01/06/webpack-dllplugin/</url>
      <content type="html"><![CDATA[<h2 id="DllPlugin-简易使用指南"><a href="#DllPlugin-简易使用指南" class="headerlink" title="DllPlugin 简易使用指南"></a>DllPlugin 简易使用指南</h2><ol>
<li>创建<code>webpack.dll.config.js</code> 用于对特定的模块打包成dll</li>
<li><code>webpack --config webpack.dll.config.js</code> 生成dll以及其描述文件</li>
<li>在<code>webpack.common.config.js</code>中使用DllReferencePlugin引入打包好的dll文件。</li>
<li>打包。此时遇到相应的模块时直接引入而不会重新打包。</li>
</ol>
<h3 id="创建webpack-dll-config-js"><a href="#创建webpack-dll-config-js" class="headerlink" title="创建webpack.dll.config.js"></a>创建<code>webpack.dll.config.js</code></h3><blockquote>
<p>这里以分别打包<code>moment</code>和<code>lodash</code>为例</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    lodash: [<span class="string">'lodash'</span>],</span><br><span class="line">    moment: [<span class="string">'moment'</span>],</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// webpack.dll.config.js</span></span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'./config'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: config.entry,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'/static/dll'</span>),</span><br><span class="line">    filename: <span class="string">'[name].dll.js'</span>,</span><br><span class="line">    library: <span class="string">'[name]_library'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.DllPlugin(&#123;</span><br><span class="line">      path: path.join(__dirname, <span class="string">'/static/dll'</span>, <span class="string">'[name]-manifest.json'</span>),</span><br><span class="line">      name: <span class="string">'[name]_library'</span>,</span><br><span class="line">      context: __dirname,</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>解释：</p>
<ol>
<li>推荐把入口配置信息写在单独文件中，易于维护。</li>
<li>DllPlugin类接受一个配置对象，该对象有三个属性：<code>context</code>(绝对路径), manifest文件中请求上下文；<code>name</code>,暴露的dll函数名；<code>path</code>：manifest文件存放的位置(绝对路径)。</li>
</ol>
<h3 id="使用DllReferencePlugin"><a href="#使用DllReferencePlugin" class="headerlink" title="使用DllReferencePlugin"></a>使用DllReferencePlugin</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.common.config.js</span></span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'./config'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  ... <span class="comment">// 省略其它配置</span></span><br><span class="line">  plugins: [</span><br><span class="line">    ...Object.keys(dllConfig.entry).map(<span class="function">(<span class="params">name</span>) =&gt;</span> <span class="keyword">new</span> <span class="keyword">new</span> webpack.DllReferencePlugin(&#123;</span><br><span class="line">      context: __dirname,</span><br><span class="line">      manifest: <span class="built_in">require</span>(<span class="string">`./static/dll/<span class="subst">$&#123;name&#125;</span>-manifest.json`</span>),</span><br><span class="line">    &#125;))</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>DllReferencePlugin 接受一个对象用于初始化</p>
</blockquote>
<ol>
<li>context: manifest的上下文(绝对路径)，需和DllPlugin中的context一致</li>
<li>manifest: manifest文件，使用require引入或指定绝对路径</li>
</ol>
<p>可选参数：</p>
<ol>
<li>content：模块id的映射，默认为 manifest.content</li>
<li>name: dll文件的名称，默认为 manifest.name</li>
<li>scope: dll 内容前缀</li>
<li>sourceType: dll如何暴露的？amd commonjs2 …</li>
</ol>
<p>scope: ‘abc’， 则该dll中的xyz文件可以通过require(‘abc/xyz’)来引用<br>例如在一个dll中打包了<code>lodash</code>和<code>axios</code>两个库，并且指定了<code>{scope: &#39;lib&#39;}</code>，则在需要使用axios的时候使用<code>require(&#39;lib/axios&#39;)</code>即可。</p>
<h3 id="测试1：把echarts，windui，react及其周边分别抽取成dll文件。"><a href="#测试1：把echarts，windui，react及其周边分别抽取成dll文件。" class="headerlink" title="测试1：把echarts，windui，react及其周边分别抽取成dll文件。"></a>测试1：把<code>echarts</code>，<code>windui</code>，<code>react</code>及其周边分别抽取成dll文件。</h3><p>抽取的dll文件大小分别为：753KB 1603KB，385KB。</p>
<table>
<thead>
<tr>
<th style="text-align:left">构建方式</th>
<th style="text-align:right">平均构建时间</th>
<th style="text-align:right">包大小</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">普通</td>
<td style="text-align:right">97s</td>
<td style="text-align:right">4.1MB</td>
</tr>
<tr>
<td style="text-align:left">使用Dll</td>
<td style="text-align:right">71s</td>
<td style="text-align:right">2.6MB</td>
</tr>
<tr>
<td style="text-align:left">dll文件</td>
<td style="text-align:right">24s</td>
<td style="text-align:right">2.7MB</td>
</tr>
</tbody>
</table>
<blockquote>
<p>经过对比发现，由于无法使用按需加载，所以整个<code>windui</code>打包的大小差不多为1.6MB，而普通的打包方式<code>windui</code>的大小仅为365KB。</p>
</blockquote>
<blockquote>
<p>在使用<code>windui</code>链接库后生成的打包，发现vendors模块中仍然含有<code>windui</code>，大小为<code>330KB</code>，仅<code>windui</code>中的<code>node_modules</code>文件夹下的<code>rc-trigger</code>和<code>rc-dropdown</code>被重用，因此这里可能重复打包了。</p>
</blockquote>
<blockquote>
<p><code>windui</code>中依赖的<code>rc-*</code>部分模块仍然被打包。</p>
</blockquote>
<h3 id="方式二-仅对react相关模块和echarts进行打包"><a href="#方式二-仅对react相关模块和echarts进行打包" class="headerlink" title="方式二 仅对react相关模块和echarts进行打包"></a>方式二 仅对<code>react</code>相关模块和<code>echarts</code>进行打包</h3><p>抽取的两个dll文件的大小为393KB 769KB</p>
<table>
<thead>
<tr>
<th style="text-align:left">构建方式</th>
<th style="text-align:right">平均构建时间</th>
<th style="text-align:right">包大小</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">普通</td>
<td style="text-align:right">97s</td>
<td style="text-align:right">4.1MB</td>
</tr>
<tr>
<td style="text-align:left">使用DLL</td>
<td style="text-align:right">77s</td>
<td style="text-align:right">3.08MB</td>
</tr>
<tr>
<td style="text-align:left">dll</td>
<td style="text-align:right">11s</td>
<td style="text-align:right">1.16MB</td>
</tr>
</tbody>
</table>
<blockquote>
<p><code>windui</code>的大小基本不变，而<code>windui</code>依赖的<code>rc-*</code>系列组件基本没被打包。</p>
</blockquote>
<blockquote>
<p><code>vendors</code>模块从<em>0.61MB</em>到<em>1.67MB</em></p>
</blockquote>
<h3 id="使用html-webpack-include-assets-plugin-把dll注入到index-html"><a href="#使用html-webpack-include-assets-plugin-把dll注入到index-html" class="headerlink" title="使用html-webpack-include-assets-plugin 把dll注入到index.html"></a>使用<code>html-webpack-include-assets-plugin</code> 把dll注入到<code>index.html</code></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> HtmlWebpackIncludeAssetsPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-include-assets-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> dllIntoHtml = <span class="keyword">new</span> HtmlWebpackIncludeAssetsPlugin(&#123;</span><br><span class="line">  assets: [<span class="string">'./static/dll/echarts.dll.js'</span>, <span class="string">'./static/dll/react.dll.js'</span>], <span class="comment">// 需要注入的dll文件路径</span></span><br><span class="line">  append: <span class="literal">false</span>, <span class="comment">// 是否尾注入？push ： unshift</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>因为先构建dll，再进行项目构建，在项目构建过程中会删除整个build目录，所以在构建完后再把<em>dll文件夹</em>拷贝进<em>build/static/</em>。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol>
<li><p><code>windui</code>进行dll打包后会因为无法按需加载而导致总大小偏高(且可能会产生冗余)；而不进行的话，包的总大小基本不变。</p>
</li>
<li><p>初始时需要加载的chunk从3个变为6个/5个</p>
</li>
</ol>
<h3 id="升级到webpack4-x"><a href="#升级到webpack4-x" class="headerlink" title="升级到webpack4.x"></a>升级到webpack4.x</h3><p>升级到webpak4.x后无论是<code>dll</code>还是最终生成块，都有小幅度的下降。与此同时，构建总时间(dll构建时间+项目build时间)略微减小。</p>
<h3 id="关于使用已存在的模块直接作为dll文件引入的可能性"><a href="#关于使用已存在的模块直接作为dll文件引入的可能性" class="headerlink" title="关于使用已存在的模块直接作为dll文件引入的可能性"></a>关于使用已存在的模块直接作为dll文件引入的可能性</h3><ol>
<li>目前无相关方面的实践。</li>
<li>DllPlugin抽取特定的模块构建dll文件后会生成一个<code>manifest</code>文件。该存储了各个模块的和公共模块的对应关系。<br>该文件会对已经打包成dll的模块中的文件进行描述，会给每个文件指定id，并且该<code>json</code>文件中的<code>name</code>属性对应dll的<code>library</code>。</li>
<li>在进行项目构建的时候，如需要打包某个模块，会在<code>manifest</code>文件中查找，如果该模块已经存在于dll中，依据manifest中的信息进行链接即可，不必重新打包。</li>
</ol>
<p>构建的dll块和使用<code>splitChunk</code>或者直接使用babel打包出来的块不一致。其依赖构建dll时指定的<code>library</code>等，而manifest文件也是和该块一一对应的。所以从理论上，使用其它方式提供dll文件由于构建方式和无法提供<code>manifest</code>文件，在构建过程中并不能被重用。</p>
<p>PS: 本片文章来自于我在团队内部分享的笔记，任何关于<code>webpack-dll-plugin</code>的理解和使用方式请在该插件的<a href="https://webpack.js.org/plugins/dll-plugin/" target="_blank" rel="noopener">Webpack介绍页查看</a>。</p>
]]></content>
      
        
        <tags>
            
            <tag> Webpack </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[前端路由拦截和http响应拦截]]></title>
      <url>http://yoursite.com/2018/04/05/%E5%89%8D%E7%AB%AF%E8%B7%AF%E7%94%B1%E6%8B%A6%E6%88%AA%E5%92%8Chttp%E5%93%8D%E5%BA%94%E6%8B%A6%E6%88%AA/</url>
      <content type="html"><![CDATA[<h3 id="问题由来"><a href="#问题由来" class="headerlink" title="问题由来"></a>问题由来</h3><p>最近在制作毕业设计的时候，遇到一个问题，那就是用户的访问控制。简单点来说，就是未登录用户只能访问某些特定的页面、API。最初我的想法是用户登录后返回一个凭证，用户以后的每次http请求都带上该凭证，进行验证，只有验证成功才能继续请求。然后在每个<code>页面</code>进行判断，如果用户是未登录或者凭证失效，则进行相应的提示和路由跳转。刚开始的时候，这个方法是完全可行的，但是在开发过程中，随着业务逻辑变得复杂、页面增多，重复代码太多，这样的方式也许并不合适。</p>
<h3 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h3><p>首先是后端，我使用了<code>jsonwebtoken</code>，用户登录成功都会生成一个具有一定时效的    <code>token</code>，这个token会发回到客户端，并且接下来每次发起http请求，都在http头的<code>authorization</code>字段带上这个<code>token</code>。我这里使用了<a href="https://www.npmjs.com/package/axios" target="_blank" rel="noopener">axios</a>这个http请求库，只需要在拿到<code>token</code>后：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">axios.defaults.headers.common.authorization = <span class="string">`Bearer <span class="subst">$&#123;token&#125;</span>`</span>;</span><br></pre></td></tr></table></figure></p>
<p>就可以了。</p>
<p>由于在开发过程中涉及到跨域，这里我使用CORS来解决：通过设置一系列<code>Access-Control-Allow-*</code>响应头进行访问控制，上面提到了在请求头的<code>authorization</code>字段中设置token，因此发出的请求都不是简单请求，所以注意在每次发起http请求时，就会自动发起一个<code>OPTIONS</code>请求。</p>
<p>我服务器端用的是<code>Express</code>框架，我们需要写一个中间件来处理每一个请求。处理逻辑为：针对每个<code>OPTIONS</code>请求，直接放行；对于某些请求，如果在白名单中(例如登录、注册等不需要验证的路由)，放行；对于其他请求，我们拿到其携带的token，并且进行验证，如果验证通过，放行，否则结束请求，返回未授权。具体的代码如下，这里我使用<code>jsonwebtoken</code>这个package，用于生成<code>token</code>和进行<code>token</code>验证。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'methods'</span> ,req.method);</span><br><span class="line">  <span class="keyword">if</span>( req.method === <span class="string">'OPTIONS'</span> ) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'option请求直接通过'</span>);</span><br><span class="line">    next();</span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 除去某些特定的API，其余的都做token的验证</span></span><br><span class="line">    <span class="keyword">let</span> &#123; path &#125; = req;</span><br><span class="line">    <span class="keyword">if</span>(path === <span class="string">'/api/users/auth'</span> </span><br><span class="line">      || path === <span class="string">'/api/users/auth_vc'</span> </span><br><span class="line">      || path === <span class="string">'/api/users/check_id_validation'</span> </span><br><span class="line">      || path === <span class="string">'/api/users/regist'</span></span><br><span class="line">      || path === <span class="string">'/api/users/send_reset_email'</span></span><br><span class="line">      || path === <span class="string">'/api/users/reset_password'</span></span><br><span class="line">    ) </span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'本次请求不需要验证权限'</span>);</span><br><span class="line">      next();</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> token = req.headers.authorization ? req.headers.authorization.split(<span class="string">' '</span>)[<span class="number">1</span>] : <span class="string">''</span>;</span><br><span class="line">      req.token = token;</span><br><span class="line">      jwt.verify(token, KEY, (err, decoded) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span>(err) &#123;</span><br><span class="line">          res.status(<span class="number">401</span>).json(&#123; <span class="attr">status</span>: <span class="number">3</span>, <span class="attr">error</span>: <span class="string">'用户认证失败'</span>, <span class="attr">data</span>: <span class="string">''</span> &#125;)</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'验证权限通过'</span>);</span><br><span class="line">          req.decoded = decoded;</span><br><span class="line">          next();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>然后是前端，我想如果能像后端拦截每个请求一样，写一个逻辑拦截所有的相应，并进行处理，信号，<code>axios</code>自带拦截器，我们只需要写我们的逻辑就可以了。我的想法是，拦截每一个相应，如果其状态码是<code>401</code>，那么久提示<code>token</code>失效，并且进行路由跳转。<br>以<code>vue-cli</code>构建的应用为例，在<code>main.js</code>中，下面是实现：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">axios.interceptors.response.use(<span class="function"><span class="params">data</span> =&gt;</span> data, (error) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span>(error.response) &#123;</span><br><span class="line">    <span class="keyword">switch</span>(error.response.status) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">401</span>: &#123;</span><br><span class="line">        localStorage.removeItem(<span class="string">'token'</span>);</span><br><span class="line">        router.replace(&#123;</span><br><span class="line">          path: <span class="string">'/auth'</span>,</span><br><span class="line">          query: &#123;<span class="attr">redirect</span>: router.currentRoute.fullPath&#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>值得说明的是，如果我们在某个访问的过程中，<code>token</code>失效，我们需要跳转到登录页面，但是想登录过后再跳转回来，所以这里在进行路由跳转的时候，我设置了一个参数, <code>redirect</code>，表示传入当前的路径，当我们登录成功后，在跳转回来即可。</p>
<p>最后是路由拦截，这里我使用了<code>vue-router</code>，其实<code>vue-router</code>的路由对象提供一个钩子函数<code>beforeEach</code>，其会在每一次路由跳转之前，执行这个函数，我们就在这里进行路由拦截。原理很简单，使用一个标志位标明每个路由是否需要用户权限，如果需要的话，我们检查保存在本地的凭证，一般存在<code>localStorage</code>中，如果不含凭证就直接跳转到登录页面。</p>
<p>好了，找到根路由文件，添加：</p>
<pre><code class="javascript">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span> , next</span>) =&gt;</span> {
  <span class="keyword">if</span>(to.matched.some(<span class="function"><span class="params">res</span> =&gt;</span> res.meta.requireAuth)) {
    <span class="keyword">if</span>(localStorage.getItem(<span class="string">'token'</span>)) {
      next();
    }<span class="keyword">else</span> {
      next({
        path: <span class="string">'/auth'</span>,
        query: { <span class="attr">redirect</span>: to.fullPath }
      })
    }
  }<span class="keyword">else</span> {
    next();
  }
})

</code></pre>
<p>这里要注意的是，<code>res.meta.requireAuth</code>是你自己在声明路由的时候自定义的。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>差不多，这算是一个比较好的解决方案了。但是有这样一个情况：如果用户凭证有效期是1小时，那么如果我浏览网页超过一个小时了，凭证还是保存在本地的，当我们进行路由跳转的时候，并没有验证凭证是否失效，所以还是会进行路由跳转。这里不用担心，因为进入进入了一个路由后，一旦发起http请求，<code>token</code>失效，http相应拦截就会生效，进而跳转到登录页面。</p>
<p>加油！</p>
]]></content>
      
        
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SQL参数化查询]]></title>
      <url>http://yoursite.com/2017/10/23/SQL%E5%8F%82%E6%95%B0%E5%8C%96%E6%9F%A5%E8%AF%A2/</url>
      <content type="html"><![CDATA[<blockquote>
<p>SQL注入想必是每个人都听过，其原理和XSS攻击很相似，都是把用户的输入当做程序去执行。防御办法也很类似，就是对用户的输入进行转义，但是同样转义十分麻烦，因为SQL注入攻击的方式和变种实在太多，转义需要考虑到的情况也复杂多变；而另外一种方式就是使用参数化查询–Prepared Statements。</p>
</blockquote>
<h3 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h3><p>在先介绍参数化查询的时候我们先复习一下SQL注入，上面提到其原理是把用户的输入当做了SQL语句<code>程序</code>的一部分去执行，因为我们经常使用字符串拼接来构建SQL语句。</p>
<p>在这里开始演示一下(使用MySQL):</p>
<p>在我的数据库中我数据库中我建立了一个名为urls的表，其结构和数据如下：</p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; desc urls;</span><br><span class="line">+-------------+------------------+------+-----+-------------------+----------------+</span><br><span class="line">|<span class="string"> Field       </span>|<span class="string"> Type             </span>|<span class="string"> Null </span>|<span class="string"> Key </span>|<span class="string"> Default           </span>|<span class="string"> Extra          </span>|</span><br><span class="line">+-------------+------------------+------+-----+-------------------+----------------+</span><br><span class="line">|<span class="string"> id          </span>|<span class="string"> int(11) unsigned </span>|<span class="string"> NO   </span>|<span class="string"> PRI </span>|<span class="string"> NULL              </span>|<span class="string"> auto_increment </span>|</span><br><span class="line">|<span class="string"> url         </span>|<span class="string"> varchar(255)     </span>|<span class="string"> NO   </span>|<span class="string">     </span>|<span class="string">                   </span>|<span class="string">                </span>|</span><br><span class="line">|<span class="string"> insert_time </span>|<span class="string"> timestamp        </span>|<span class="string"> NO   </span>|<span class="string">     </span>|<span class="string"> CURRENT_TIMESTAMP </span>|<span class="string">                </span>|</span><br><span class="line">|<span class="string"> tid         </span>|<span class="string"> bigint(20)       </span>|<span class="string"> YES  </span>|<span class="string">     </span>|<span class="string"> NULL              </span>|<span class="string">                </span>|</span><br><span class="line">+-------------+------------------+------+-----+-------------------+----------------+</span><br><span class="line">mysql&gt; select <span class="symbol">*</span> from urls;</span><br><span class="line">+----+-----------------------+---------------------+------+</span><br><span class="line">|<span class="string"> id </span>|<span class="string"> url                   </span>|<span class="string"> insert_time         </span>|<span class="string"> tid  </span>|</span><br><span class="line">+----+-----------------------+---------------------+------+</span><br><span class="line">|<span class="string">  1 </span>|<span class="string"> http://www.limoer.cc  </span>|<span class="string"> 0000-00-00 00:00:00 </span>|<span class="string"> NULL </span>|</span><br><span class="line">|<span class="string">  2 </span>|<span class="string"> http://baidu.com/news </span>|<span class="string"> 0000-00-00 00:00:00 </span>|<span class="string"> NULL </span>|</span><br><span class="line">|<span class="string">  3 </span>|<span class="string"> http://do.io          </span>|<span class="string"> 0000-00-00 00:00:00 </span>|<span class="string"> NULL </span>|</span><br><span class="line">|<span class="string">  5 </span>|<span class="string"> http://github.iod     </span>|<span class="string"> 0000-00-00 00:00:00 </span>|<span class="string"> NULL </span>|</span><br><span class="line">+----+-----------------------+---------------------+------+</span><br></pre></td></tr></table></figure>
<p>该表有4字段并且有4条记录，现在我们如果想要查询id=1的那条记录，应该这样写:<code>select * from urls where id=1</code>。执行该条语句，正确返回结果，现在我们修改一下这条语句，改成：<code>select * from urls where id=1 and 1=1</code>,执行这条语句，同样没问题，返回结果正常；我们接下来再把<code>and</code> 改成 <code>or</code>再执行，结果出乎我们的意料，我们把所有的记录都查询了出来，<code>id=1</code>的限定条件失效了。至于如何导致其失效，是因为<code>or</code>后面的条件1=1是恒等的，所以前面的限定条件已经不重要了，<code>and</code>也是如此，我们想要获取正确的结果，那么<code>and</code>后面的限定条件必须要正确才可以。</p>
<p>说到这里，其实我们就已经进行了一次SQL注入的攻击，并且窃取了数据库的所有记录(更严重的删库、窃取管理员密码也很easy)！</p>
<p>其实不光是上面演示到的使用<code>and or</code>来进行SQL注入，还有很多神奇的SQL语法让SQL注入有了可乘之机，例如我们常用的<code>union</code>等等。</p>
<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>如果我们把上面情景放在实际开发过程中，我们可能现在有一个输入框，用户可以输入任意一个数据来查看某条记录，<br>服务端的SQL语句也许是这样的：<code>select * from urls where id=${userInput}</code>。如果某个淘气的用户不遵守约定输入了非数字，例如<code>10 or 1=1</code>，SQL语句拼接过后就成了这样:<code>select * from urls where id=10 or 1=1</code>，表中的信息一次被完全暴露！</p>
<p>针对上面的情况，我最想想到的不是转义输入也不是使用参数化查询，而是针对本问题，我们直接对其进行输入验证即可，既然其必须限定用户输入数字，那么在进行SQL拼接之前，对用户输入进行验证即可！</p>
<p>例如，在Node.js环境下，我们可以使用<code>parseInt(userInput)</code>就可以完成对用户输入进行强制性的验证。</p>
<p>第二种也就是最常用的解决办法就是转义，和防御XSS攻击一样，我们需要构建用于转义的函数，对用户的输入进行转义，还是上面的那个例子：<br><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> urls <span class="keyword">where</span> <span class="symbol">`id`</span>= $&#123;id&#125;;</span><br></pre></td></tr></table></figure></p>
<p>如果用户输入<code>1 or 1=1</code>，那么毫无疑问将会导致一次非常严重的SQL注入攻击，现在假设我们已经写好了我们的转义函数escape，我们只需要在进行字符串拼接之前，做一次转义即可。 例如对于用户的输入<code>1 or 1=1</code>经过转义后变成了<code>&#39;1 or 1=1&#39;</code>，经过SQL拼接过后则变成了:<br><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> urls <span class="keyword">where</span> <span class="symbol">`id`</span>=<span class="string">'1 or 1=1'</span>;</span><br></pre></td></tr></table></figure></p>
<p>不出意外，我们得到了正确的结果。</p>
<p>关于转义函数escape如何实现，这里就不不再多说，很多数据库的驱动工具都带有相应的工具函数，我们在实际开发过程中一定要注意对用户的输入进行转义，来避免SQL注入攻击；当然，如果你使用参数化查询的话，就完全没有必要了。</p>
<h3 id="参数化查询"><a href="#参数化查询" class="headerlink" title="参数化查询"></a>参数化查询</h3><p>最开始提到参数化查询的时候，我提到了<code>Prepared Statements</code>也就是预处理语句，其实我们可以把参数化查询理解为预处理，我们把完整的一次SQL查询分成两部分，第一步是预先查询，第二步使用参数得到结果。具体该怎么理解呢，还是接着上面的那个例子，现在我们使用参数化查询执行<code>select * from urls where id=1</code>。其分为两步，第一步执行<code>select * from urls where id=?</code>，注意这里的<code>?</code>，其实代表了未来将要传入的参数；第二步，传入用户的输入作为具体的id值，并且输出结果。这里要注意，因为执行完第一步的时候期待第二步传入的是一个用户的id(这里必须是数字)，这时候用户传入的非法输入就不会生效，这也就从根本上杜绝了了SQL注入攻击。</p>
<p>好了，参数化查询(预处理)可以完全避免SQL注入，其还有其他的优点例如更加可读(相比于字符串拼接)，多次查询性能会有提升(因为会对预处理语句进行缓存再利用)等。</p>
<p>说了这么多，那么如何使用参数化查询呢？很简单，使用一个支持该特性的数据库连接工具就可以了，比如我们下面要演示的Node环境下MySQL的参数化查询。</p>
<h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><p>我们在Node环境下进行演示，首先通过<code>npm install mysql2</code>命令安装数据库连接工具，这里是<code>mysql2</code>,能够支持参数化查询。</p>
<p>如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mysql2 = <span class="built_in">require</span>(<span class="string">'mysql2'</span>);</span><br><span class="line"><span class="keyword">const</span> conn = mysql2.createConnection(&#123;</span><br><span class="line">	host: <span class="string">'localhost'</span>,</span><br><span class="line">	user: <span class="string">'admin'</span>,</span><br><span class="line">	password: <span class="string">'123'</span>,</span><br><span class="line">	database: <span class="string">'news'</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 不使用任何防护手段(将导致SQL注入攻击)</span></span><br><span class="line"><span class="keyword">const</span> userInput = <span class="string">'1 or 1=1'</span>;</span><br><span class="line">conn.query(</span><br><span class="line">	<span class="string">`select * from urls where id=<span class="subst">$&#123;userInput&#125;</span>`</span>,</span><br><span class="line">	(err, result) =&gt; &#123;</span><br><span class="line">		<span class="built_in">console</span>.log(result);</span><br><span class="line">	&#125;</span><br><span class="line">);</span><br><span class="line"><span class="comment">// 使用转义(这里默认进行了转义)</span></span><br><span class="line">conn.query(</span><br><span class="line">	<span class="string">'select * from urls where `id`=?'</span>,</span><br><span class="line">	[<span class="string">'1 or 1=1'</span>], </span><br><span class="line">	(err, result) =&gt; &#123;</span><br><span class="line">		<span class="built_in">console</span>.log(result);</span><br><span class="line">	&#125;</span><br><span class="line">);</span><br><span class="line"><span class="comment">// 使用参数化查询</span></span><br><span class="line">conn.execute(</span><br><span class="line">	<span class="string">'select * from urls where `id`=?'</span>, </span><br><span class="line">	[<span class="string">'1 or 1=1'</span>], </span><br><span class="line">	(err, result, fields) =&gt; &#123;</span><br><span class="line">		<span class="built_in">console</span>.log(result);</span><br><span class="line">	&#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h3 id="尾巴"><a href="#尾巴" class="headerlink" title="尾巴"></a>尾巴</h3><p>关于SQL注入和参数化查询就介绍到这里，如果你觉得参数化查询两步走我说得并不明确，你可以使用抓包工具来加深理解；还有最后的Demo，其实query和execute的区别就是一个支持了参数化查询而另外一个不支持；如果你运行Demo，仔细看，区别就藏在里面(Tips：B &amp; T)；最后，请总是使用参数化查询！</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[使用react-transition-group实现路由切换动画]]></title>
      <url>http://yoursite.com/2017/09/01/%E4%BD%BF%E7%94%A8react-transition-group%E5%AE%9E%E7%8E%B0%E8%B7%AF%E7%94%B1%E5%88%87%E6%8D%A2%E5%8A%A8%E7%94%BB/</url>
      <content type="html"><![CDATA[<blockquote>
<p>我们在使用React开发SPA的时候，使用<code>react-router</code>可以完成路由切换，但是这样路由切换是非常生硬的。有什么解决办法呢？我们可以使用<code>react-transition-group</code>来实现自定义的路由切换效果。</p>
</blockquote>
<p>需要注意的是<code>react-transition-group</code>目前有两个版本，v1和v2版本的差距十分巨大，本教程使用的是最新的V2版本，你可以使用<code>npm install --save react-transition-group</code>来安装，如果想安装v1版本，则只需使用<code>npm install --save react-transition-group@1.x</code>命令即可。</p>
<p>react-transition-group主要提供三个组件<code>Transition</code>、<code>TransitionGroup</code>、<code>CSSTransition</code>。从名字当中我们知道<code>TransitionGroup</code>作为一个容器组件，而其它两个组件才是实现动画的关键。这里我只介绍<code>CSSTransition</code>如何使用以及其注意的点。如需了解更多<code>react-transition-group</code>,请<a href="https://reactcommunity.org/react-transition-group/" target="_blank" rel="noopener">查看官方文档</a>。</p>
<h3 id="CSSTransition"><a href="#CSSTransition" class="headerlink" title="CSSTransition"></a>CSSTransition</h3><p>这个组件主要是使用css来控制组件的转场。它使用了在缓动中<code>appear</code>、<code>enter</code>、<code>exit</code>的三个状态，并且提供钩子类让我们自定义效果。</p>
<p>我们常用到的类有：</p>
<pre><code>.className-enter
.className-enter.className-enter-active
.className-exit
.className-exit.className-exit-active
</code></pre><p>这里<code>className</code>是你自定义动画的名称，和V1版本大体相同的钩子类，只不过把<code>leave</code>改成了更加语义化的<code>exit</code>，这里需要注意。</p>
<p>CSSTransition有多个十分重要的属性：</p>
<ol>
<li><code>classNames</code>属性接收一个字符串类名，注意这里是<code>classNames</code>而不是<code>className</code>。</li>
<li><code>timeout</code>用于规定动画执行的时间，如果<code>enter</code>和<code>exit</code>的持续时间相同的话可以使用<code>timeout={number}</code>即可，如果持续时间不一样，则<code>timeout</code>接收一个字典,两个键分别是enter和exit。</li>
<li>其他参数例如<code>onEnter</code>、<code>onExit</code>你可以自定义逻辑在动画进行到某个阶段后触发。</li>
<li>动画进行的阶段：<code>enter-&gt;entering-&gt;entered-&gt;exit-&gt;exiting-&gt;exited</code>。</li>
</ol>
<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> App = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">    &lt;BrowserRouter&gt;</span><br><span class="line">        &lt;Route render=&#123;(&#123;location&#125;) =&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line">                &lt;Route exact path="/" render=&#123;() =&gt; (</span><br><span class="line">                    &lt;Redirect to="/home"/&gt;</span><br><span class="line">                )&#125;/&gt;</span><br><span class="line">                &lt;TransitionGroup&gt;</span><br><span class="line">                    &lt;CSSTransition</span><br><span class="line">                        key=&#123;location.pathname.split('/')[1]&#125;</span><br><span class="line">                        classNames="transitionWrapper" // 这里一定要注意的是：classNames 而不是className</span><br><span class="line">                        timeout=&#123;400&#125;</span><br><span class="line">                        mountOnEnter=&#123;true&#125;</span><br><span class="line">                        unmountOnExit=&#123;true&#125;</span><br><span class="line">                    &gt;</span><br><span class="line">                        &lt;div className="wrapper"&gt;</span><br><span class="line">                            &lt;Switch location=&#123;location&#125;&gt;</span><br><span class="line">                                &lt;Route exact path="/home" component=&#123;Home&#125;/&gt;</span><br><span class="line">                                &lt;Route path="/inspiration" render=&#123;() =&gt;&lt;NavLink style=&#123;&#123;marginRight: '20px', marginLeft: '20px'&#125;&#125; to="/home"&gt;HOME&lt;/NavLink&gt;</span><br><span class="line">                                &#125;/&gt;</span><br><span class="line">                                &lt;Route path="/mood" render=&#123;() =&gt; &lt;h1&gt;this is page3 mood!&lt;/h1&gt;&#125;/&gt;</span><br><span class="line">                            &lt;/Switch&gt;</span><br><span class="line">                        &lt;/div&gt;</span><br><span class="line">                    &lt;/CSSTransition&gt;</span><br><span class="line">                &lt;/TransitionGroup&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &#125;&#125;/&gt;</span><br><span class="line">    &lt;/BrowserRouter&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> React </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用antd和css-modules冲突的解决办法]]></title>
      <url>http://yoursite.com/2017/08/28/%E4%BD%BF%E7%94%A8antd%E5%92%8Ccss-modules%E5%86%B2%E7%AA%81%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
      <content type="html"><![CDATA[<blockquote>
<p>在暑假做项目实训的时候前端就使用到React构建并且使用了<code>Ant Design</code>作为组件库，当时就使用了<code>extract-text-webpack-plugin</code>把css单独抽离出来成为一个单独的css文件并引入，当时就遇到一个问题，当我使用<code>css-loader</code>来处理css时，并不能处理自定义的css，但是我把CSS直接写进组件中是可行的，由于当时项目比较小并且时间比较赶，就直接使用了这种方式，在开发过程中也有苦说不清，但总算是完成了。</p>
</blockquote>
<blockquote>
<p>最近想写一点东西，又用到<code>antd</code>了，当然是相同的问题，只不过时过境迁，我有足够多的时间来处理这个遗留下来的问题。可是即使有那么多的时间，可是还是踩坑无数，最终还是完成了。相信遇到这个问题的并不止我一个人，这里就先记录下来，希望能对你有所帮助。</p>
</blockquote>
<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>经过查询和思考，解决这样的问题最好是单独处理<code>antd</code>CSS和自定义的CSS。好了问题解决办法已经很明显了，我们需要些两个不同的规则来出来css，就像这样：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">&#123;</span><br><span class="line">	test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">	use: ExtractTextPlugin.extract(&#123;</span><br><span class="line">		use: <span class="string">'css-loader'</span></span><br><span class="line">	&#125;)</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">	test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">	exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">	use: <span class="string">'css-loader'</span></span><br><span class="line">&#125;,</span><br><span class="line">...</span><br><span class="line">plugins: [</span><br><span class="line">	<span class="keyword">new</span> ExtractTextPlugin(<span class="string">'style.css'</span>)</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p>
<p>上面的代码我建立了两规则分别处理自定义css和antd 预定义css，我们可以正常的使用<code>import &#39;./style.css&#39;</code>的形式引入css，但是我们查看页面，并没有加载我们自定义的css。</p>
<p>好吧，既然这样再试试<code>css-modules</code>的方式算了，我们把第二个规则改成下面这样：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">&#123;</span><br><span class="line">	test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">	exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">	use: [</span><br><span class="line">		loader:<span class="string">'css-loader'</span>,</span><br><span class="line">		options: &#123;</span><br><span class="line">			modules: <span class="literal">true</span>,</span><br><span class="line">			localIndentName: <span class="string">'[local]--[hash:base64:5]'</span></span><br><span class="line">		&#125;</span><br><span class="line">	]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>现在我们可以通过<code>import style from &#39;./style.css&#39;</code>的形式引入自定义css，并且通过<code>style.className</code>的形式给元素设置类。这次倒好，直接build不成功了，我一气之下索性不搞了；为了继续捣鼓下去，我直接又把CSS写在组件中了，直到我要使用<code>react-transition-group</code>来做路由切换动画，不得不倒回来解决。这次比以往更加冷静，我仔细阅读了<code>extract-text-webpack-plugin</code>的readme过后，恍然大悟，原来我们可以在一个项目中使用多个<code>ExtractTextPlugin</code>实例来生成多个css文件！好了，这次还是通过两个规则处理css，并且构建两个css文件，一个是自定义的css，一个是antd css，问题迎刃而解，又可以开心的捣鼓了！</p>
<p>好了，show you the code!:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> extractANTDCSS = <span class="keyword">new</span> ExtractTextPlugin(<span class="string">'[name]-antd.css'</span>);</span><br><span class="line"><span class="keyword">const</span> extractNormalCSS = <span class="keyword">new</span> ExtractTextPlugin(<span class="string">'[name]-normal.css'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">	...</span><br><span class="line">	<span class="built_in">module</span>:&#123;</span><br><span class="line">		rules: [</span><br><span class="line">			&#123;</span><br><span class="line">				test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">				include: <span class="regexp">/node_modules/</span>,</span><br><span class="line">				loader: extractANTDCSS.extract(&#123;</span><br><span class="line">					fallback: <span class="string">'style-loader'</span>,</span><br><span class="line">					use: [&#123;</span><br><span class="line">						loader: <span class="string">'css-loader'</span>,</span><br><span class="line">						options: &#123;<span class="attr">modules</span>: <span class="literal">false</span>&#125;</span><br><span class="line">					&#125;]</span><br><span class="line">				&#125;)</span><br><span class="line">			&#125;,</span><br><span class="line">			&#123;</span><br><span class="line">				test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">				exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">				use: extractNormalCSS.extract(&#123;</span><br><span class="line">					fallback: <span class="string">'style-loader'</span>,</span><br><span class="line">					use: [&#123;</span><br><span class="line">						loader: <span class="string">'css-loader'</span>,</span><br><span class="line">						options: &#123;</span><br><span class="line">							modules: <span class="literal">true</span>,</span><br><span class="line">							localIndentName: <span class="string">'[local]--[hash:base64:5]'</span></span><br><span class="line">						&#125;</span><br><span class="line">					&#125;]</span><br><span class="line">				&#125;)</span><br><span class="line">			&#125;</span><br><span class="line">		]</span><br><span class="line">	&#125;,</span><br><span class="line">	plugins: [</span><br><span class="line">		extractANTDCSS,</span><br><span class="line">		extractNormalCSS,</span><br><span class="line">		...</span><br><span class="line">	]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>以上的两个loader会生成两个css文件，分别是<code>vendor-antd.css</code>和<code>main-normal.css</code>，我们只需要在正确的位置引入这两个css文件就好了！</p>
<h3 id="尾巴"><a href="#尾巴" class="headerlink" title="尾巴"></a>尾巴</h3><p>我在前面提到我把CSS直接写在元素/组件的style标签中，其实这种方式实不可取的，它会让你在编码和代码review中苦不堪言，因为一旦项目变得很大，当你想修改某个样式的时候，花在定位CSS的时间是非常多的；并且，可读性和可复用性也会大打折扣；而且我们经常在写样式的过程中使用的各种选择器、伪类、伪元素都无法发挥其灵活的作用。所以，无论你是以何种方式写前端，请尽量不以这种方式写CSS。</p>
<p>当然，我们也要从性能上去考虑。因为css是在页面解析正式前就加载好了的(写在header)里面，在我们再解析页面的时候，加载速度就会变得更快；再有，如果我们使用把CSS写在组件中后，无可避免的会产生更多的重绘和回流，这会严重影响渲染性能。比如我们使用JS修改我们在style属性中标明的样式，那么必然会触发一次repaint。</p>
<p>好了，到此打住！如果你想学习reflow和repaint，点击<a href="http://blog.csdn.net/ClaireKe/article/details/51375622" target="_blank" rel="noopener">这里</a>，也许会帮助你！</p>
]]></content>
      
        
        <tags>
            
            <tag> React </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Three.js]]></title>
      <url>http://yoursite.com/2017/08/24/three-js/</url>
      <content type="html"><![CDATA[<p>最近貌似Node又有了新的fork ayo.js(怎么读！哎呦？)，加之前端一不留神就出框架的节奏，在2016年就开始用Next(wtf！你能看出来其是一个前端框架？)来命名，以后恐怕就得future.js、plus.js的节奏…贵圈真乱啊！</p>
<p>当然当然，这和我们今天的主角three.js并没有太大的关系，比起这些看了名字不知所云的xxx.js，Three.js这个就和明显了，其是一个3d JavaScript库，更准确的说是用JavaScript编写的WebGL三方库，那么什么是WebGL呢？这个我不解释，有兴趣的小伙伴可以去探索。</p>
<p>作为我最想学却一直学不会的技术之一，WebGL的确对于大部分的前端猿们来说有些复杂和繁琐了，早些时候我花了大量的时间去啃API，学习如何使用，可到目前脑子还是一团乱麻。既然这样的话，我们得另辟蹊径，不能因为有困难就放弃学习不是！所以我了解到了Three.js，其化繁为简，做同样的事，其只需要少于<code>1/5</code>的代码量就可以完成，并且API也十分通俗易懂，学习难度降低了不少，可以让我们关注使用WebGL创造而不是痛苦的学习和编码。</p>
<p>如果你还不理解WebGL是什么，这是官方文档上的原话：</p>
<blockquote>
<p>WebGL (Web Graphics Library) is a JavaScript API for rendering interactive 3D and 2D graphics within any compatible web browser without the use of plug-ins. WebGL does so by introducing an API that closely conforms to OpenGL ES 2.0 that can be used in HTML5 canvas elements.</p>
</blockquote>
<p>如果你对Three.js比较有兴趣的话可以直接进去<a href="https://threejs.org/" target="_blank" rel="noopener">官网</a>，其中首页展示了很多<code>featured projects</code>，个人比较喜欢这个<a href="https://paperplanes.world/" target="_blank" rel="noopener">Paper Planes</a>。</p>
<p>你也可以去<a href="https://github.com/mrdoob/three.js/" target="_blank" rel="noopener">gayhub</a>把Three.js代码download下来，里面有很多很多(大约几百个例子)可供学习，当然如果你想学习Three.js，来<a href="https://pan.baidu.com/s/1nvQJsUX" target="_blank" rel="noopener">百度云</a>下载，这是目前少有的全方面介绍Three.js的书籍。</p>
<p>好了，差不多介绍完该跑了。但是我好想发现了我竟然连副标题都没取，好吧，还是再多讲一会儿，为了彰显Three.js的简单易用的特性，我讲决定再写一个全面但是简单的例子，并且配上必要的讲解。</p>
<h4 id="例子？不存在的！"><a href="#例子？不存在的！" class="headerlink" title="例子？不存在的！"></a>例子？不存在的！</h4><p>这是一个很小的例子，它将会展示Three.js使用流程，并且是经过测试没有错误(也许有！)，请放心食用。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf8"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>使用Three.js<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">'./three.js'</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"three-container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">'text/javascript'</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">			<span class="comment">// three.js中有几个非常重要的知识点，为了构成一个3D程序，我们至少需要以下几部分。</span></span></span><br><span class="line"><span class="actionscript">			<span class="comment">// 1. Scene 场景，用于承载一些必要元素</span></span></span><br><span class="line"><span class="javascript">			<span class="keyword">let</span> scene = <span class="keyword">new</span> THREE.Scene();</span></span><br><span class="line"><span class="actionscript">			<span class="comment">// 2. Camera 相机(此相机非你想的那个相机哦！)</span></span></span><br><span class="line"><span class="actionscript">			<span class="comment">// Three.js中提供了两种相机，透视相机和正交相机，这里使用的是透视相机(类似于人眼看到的)</span></span></span><br><span class="line"><span class="javascript">			<span class="keyword">let</span> camera = <span class="keyword">new</span> THREE.PerspectiveCamera(<span class="number">60</span>, <span class="built_in">window</span>.innerWidth/<span class="built_in">window</span>.innerWidth, <span class="number">1</span>, <span class="number">1000</span>);</span></span><br><span class="line"><span class="undefined">			camera.position.set(-20, 40, 20);</span></span><br><span class="line"><span class="actionscript">			<span class="comment">// 3. renderer 渲染器， 也可以在canvas中渲染，但是复杂场景可能有性能问题</span></span></span><br><span class="line"><span class="javascript">			<span class="keyword">let</span> renderer = <span class="keyword">new</span> THREE.WebGLRenderer();</span></span><br><span class="line"><span class="undefined">			renderer.setClearColor(0x708090);</span></span><br><span class="line"><span class="javascript">			renderer.setSize(<span class="built_in">window</span>.innerWidth, <span class="built_in">window</span>.innerHeight);</span></span><br><span class="line"><span class="actionscript">			renderer.shadowMapEnabled = <span class="literal">true</span>;</span></span><br><span class="line"><span class="actionscript">			<span class="comment">// 4. 物体</span></span></span><br><span class="line"><span class="javascript">			<span class="keyword">let</span> cubegeo = <span class="keyword">new</span> THREE.CubeGeometry(<span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>);</span></span><br><span class="line"><span class="actionscript">			<span class="comment">// 5. 材质 用于物体表面，不同材质包含不同特性，可设置颜色等。</span></span></span><br><span class="line"><span class="javascript">			<span class="keyword">let</span> material = <span class="keyword">new</span> THREE.MeshLambertMaterial(&#123;</span></span><br><span class="line"><span class="undefined">				color: 0xffffff</span></span><br><span class="line"><span class="undefined">			&#125;);</span></span><br><span class="line"><span class="actionscript">			<span class="comment">// 组合物体与材质成为一个网格</span></span></span><br><span class="line"><span class="javascript">			<span class="keyword">let</span> cube = <span class="keyword">new</span> THREE.Mesh(cubegeo, material);</span></span><br><span class="line"><span class="actionscript">			<span class="comment">// 设置物体能够产生光源阴影</span></span></span><br><span class="line"><span class="actionscript">			cube.castShadow = <span class="literal">true</span>;</span></span><br><span class="line"><span class="undefined">			scene.add(cube);</span></span><br><span class="line"><span class="actionscript">			<span class="comment">// 6. 光源 Three.js中存在多种光源</span></span></span><br><span class="line"><span class="javascript">			<span class="keyword">let</span> light = <span class="keyword">new</span> THREE.SpotLight(<span class="number">0xfffff</span>);</span></span><br><span class="line"><span class="undefined">			light.position.set(-30, 40, -20);</span></span><br><span class="line"><span class="actionscript">			light.castShadow = <span class="literal">true</span>;</span></span><br><span class="line"><span class="undefined">			scene.add(light);</span></span><br><span class="line"><span class="actionscript">			<span class="comment">// 设置相机看向场景远点(空间坐标系原点)</span></span></span><br><span class="line"><span class="undefined">			camera.lookAt(scene.position);</span></span><br><span class="line"><span class="actionscript">			<span class="comment">// 添加到HTML中</span></span></span><br><span class="line"><span class="javascript">			<span class="built_in">document</span>.getElementById(<span class="string">'three-container'</span>).appendChild(renderer.domElement);</span></span><br><span class="line"><span class="actionscript">			<span class="comment">// 为了更加直观，这里设置一下空间坐标系</span></span></span><br><span class="line"><span class="javascript">			<span class="keyword">let</span> axes = <span class="keyword">new</span> THREE.AxisHelper(<span class="number">30</span>);</span></span><br><span class="line"><span class="undefined">			scene.add(axes);</span></span><br><span class="line"><span class="actionscript">			<span class="comment">// 动起来吧！添加动画</span></span></span><br><span class="line"><span class="actionscript">			<span class="function"><span class="keyword">function</span> <span class="title">animation</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">				<span class="comment">// 比如移动转动方块， 这里设置在x、y轴转动平面</span></span></span><br><span class="line"><span class="undefined">				cube.rotation.x += 0.1;</span></span><br><span class="line"><span class="undefined">				cube.rotation.y += 0.1;</span></span><br><span class="line"><span class="undefined">				requestAnimationFrame(animation);</span></span><br><span class="line"><span class="undefined">				renderer.render(scene, camera);</span></span><br><span class="line"><span class="undefined">			&#125;</span></span><br><span class="line"><span class="undefined">			requestAnimationFrame(animation);</span></span><br><span class="line"><span class="undefined">		</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h4 id="尾巴"><a href="#尾巴" class="headerlink" title="尾巴"></a>尾巴</h4><p>即使是这样一个简单的例子，我如今也没有办法在不参考官方文档的情况下一口气写下来，原因无非在于，虽然其简化了开发，但是概念还是偏多并且需要记住每个API也是在有难度。</p>
<p>但是，如果我们能够十分清楚的理解制作3D应用的流程，至少是使用Three.js的流程，按照流程十分有条理的写下去，代码总归是十分清晰的。</p>
<p><code>time waiting for no one</code>，这是我最近在看《穿越时空的少女》看到的。对啊，时间不等人，珍惜好为说不多的’自由’而’枯燥’的时间吧！</p>
]]></content>
      
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[从Decorator到Mobx]]></title>
      <url>http://yoursite.com/2017/08/02/%E4%BB%8Edecorator%E5%88%B0Mobx/</url>
      <content type="html"><![CDATA[<blockquote>
<p>最近在开发一款视频编辑器，其中就用到了Mobx作为状态管理工具。Mobx中很重要的概念例如可观察(observable)的状态，可计算(computed)的值都用到了decorator(当然在使用Mobx时可以不用)。Decorator作为ES7引入的新特性，用于给类/属性添加新行为。对于不少初学者而言，可能对其并不是很了解，所以在这里从装饰器开始，聊聊我对Decorator和Mobx的理解。如果你正在学习Mobx，希望能对你快速上手Mobx能有所帮助。</p>
</blockquote>
<h3 id="先说装饰器-Decorator"><a href="#先说装饰器-Decorator" class="headerlink" title="先说装饰器(Decorator)"></a>先说装饰器(Decorator)</h3><p>装饰器是ES7中引入的，其目的在于修改类/方法的行为。例如我们可以在不修改“类”的情况下为其增加新的功能。</p>
<p>例如：我们定义了一个学生“类”，其中有<code>name</code>，<code>age</code>两个属性，以及<code>showInfo</code>一个方法。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">	<span class="keyword">constructor</span>(name, age) &#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">		<span class="keyword">this</span>.age = age;</span><br><span class="line">	&#125;</span><br><span class="line">	showInfo = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">`name:<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>, age: <span class="subst">$&#123;<span class="keyword">this</span>.age&#125;</span>`</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果此时我们想为这个类添加一个属性<code>school</code>用于标明学校，，在不修改“类”的情况下，我们可以使用装饰器这么做：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addSchool</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">	target.prototype.school = <span class="string">'SDU'</span>;</span><br><span class="line">&#125;</span><br><span class="line">@addId</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">	<span class="comment">//	...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">	@decorator</span></span><br><span class="line"><span class="comment">	class A&#123;&#125;</span></span><br><span class="line"><span class="comment">	等价于</span></span><br><span class="line"><span class="comment">	A = decorator(A);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> limoer = <span class="keyword">new</span> Student(<span class="string">'limoer'</span>, <span class="number">21</span>);</span><br><span class="line"><span class="built_in">console</span>.log(limoer.school); <span class="comment">// &gt; SDU</span></span><br></pre></td></tr></table></figure>
<p>addSchool()给Student“类”的原型对象上添加了一个属性，现在所有实例都可以取到<code>school</code>这个属性。</p>
<p>更深入一步，上面看到用于装饰的函数只接收一个目标“类”作为参数，如果我们有多个参数的话，可以写成高阶函数的形式(即返回一个函数)。同样是上面的例子，现在学校由参数指定，我们可以这样写：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addSchool</span>(<span class="params">school_name</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">		target.prototype.school = school_name;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">	</span><br><span class="line">@addSchool(<span class="string">'CQMU'</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">	<span class="comment">//	...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> lin = <span class="keyword">new</span> Student(<span class="string">'lin'</span>, <span class="number">20</span>);</span><br><span class="line"><span class="built_in">console</span>.log(lin.school); <span class="comment">// &gt; CQMU</span></span><br></pre></td></tr></table></figure>
<p>装饰器不但可以装饰“类”，也可以对方法(…属性)进行修饰，使用的方式类似于对“类”的修饰，不过用于修饰的函数接收三个参数,<code>target</code>将要被修饰的对象, <code>name</code>被修饰的属性名, <code>descriptor</code>被修饰的属性的描述对象(ES5中详细介绍过)。 写一个简单的例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showCount</span>(<span class="params">target, name, descriptor</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">let</span> prev = descriptor.value;</span><br><span class="line">	descriptor.value = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">'count:'</span> + StudentList.list.length);</span><br><span class="line">		prev.call(<span class="literal">null</span>, <span class="built_in">arguments</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> descriptor;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentList</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">static</span> list = [<span class="string">'limoer'</span>, <span class="string">'lin'</span>];</span><br><span class="line"></span><br><span class="line">	@showCount</span><br><span class="line">	showNames () &#123;</span><br><span class="line">		<span class="built_in">console</span>.log(StudentList.list.join(<span class="string">' '</span>));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> list = <span class="keyword">new</span> StudentList();</span><br><span class="line">list.showNames(); <span class="comment">// count:2 \n limoer lin</span></span><br></pre></td></tr></table></figure>
<p>上面的代码给<code>StudentList</code>类的<code>showNames</code>方法添加了打印数量的功能，并且是在不改变原有“类”结构的情况下。</p>
<blockquote>
<p>说明，在现有的浏览器环境和Node都不能运行上面的代码(暂不支持装饰器)，如果想运行的话，可以借用babel 并且使用相关插件(babel-plugin-transform-decorators-legacy)的前提下进行compile，之后就可以进行了。推荐开发过程中webpack和babel结合使用，效果更佳！</p>
</blockquote>
<p>好了，关于Decorator简单介绍到此到一段落，更多的相关知识请自行发掘和学习。接下来，是时候了解并使用Mobx了！</p>
<h3 id="Mobx？想说爱你不容易！"><a href="#Mobx？想说爱你不容易！" class="headerlink" title="Mobx？想说爱你不容易！"></a>Mobx？想说爱你不容易！</h3><p>在文章最开头谈到我在最近的学习开发中使用了Mobx作为状态管理工具，最主要的原因是其相比Redux，学习和快速上手成本的确消了很多，并且它足够简单。但是在后来的开发过程中，虽然其可以没有redux中action，也不存在reducer，更是告别了单一而庞大的store，我们可以定义多个state用于保存状态，让每个状态或者是每个类属性添加注解，让其编程可观察的状态，而为了能够自动的更新值，我们可以通过使用computed这个装饰器或者autorun函数来完成。可是，在使用过程中，定义多少个状态，每个状态的结构又是如何，等等等等，都困扰着我，远没有使用redux来得清晰和直观。这也许是因为我对mobx目前刚好达到基本使用的程度，并没有深入的了解。基于此，接下来，我只谈谈Mobx入门，至于该如何优雅的使用，请自行摸索。</p>
<h4 id="几个概念"><a href="#几个概念" class="headerlink" title="几个概念"></a>几个概念</h4><ol>
<li>可观察的状态</li>
</ol>
<p>这也许是Mobx最基础也是最重要的概念了。我们可以使用Mobx提供的<code>observable</code>装饰器，让基本的数据结构(数组、对象、原始值等)变成可观察的。使用的方式如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> TimeState = observable(&#123;</span><br><span class="line">	currentTime: <span class="built_in">Date</span>.now()</span><br><span class="line">&#125;)</span><br><span class="line">TimeState.set(<span class="string">"currentTime"</span>, <span class="keyword">new</span> <span class="built_in">Date</span>().toString());</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppState</span> </span>&#123;</span><br><span class="line">	@observable list = [<span class="string">'limoer'</span>, <span class="string">'lin'</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> state = <span class="keyword">new</span> AppState();</span><br><span class="line"><span class="built_in">console</span>.log(state.list.length); <span class="comment">// &gt; 2</span></span><br></pre></td></tr></table></figure>
<p>好了，最简单的例子就是这样，我们使用ES5和ES6 decorator的方式分别创建了两个state，第一个state我们适应装饰器让一个对象(Map)变得可观察，而第二个我们则是对一个“类”属性(为一个数组)进行了修饰，让其变成可观察的。</p>
<p>这里值得注意的是，如果一个数据结构变得可观察，那么其类型也会发生改变，例如我们让一个数据变得可观察，此时其已经变成了一个 <code>Observable Array</code>， 这是一种Mobx定义的数据结构，拥有其独特的API，此时使用<code>Array.isArray(state.list)</code>讲返回false，因为<code>Observable Array</code> 并不是一种数组类型。</p>
<p>好了，当看到这里，你是否有这样一个疑问：让一个数据结构变得可观察，其作用到底在哪里呢？其实很简单，我们都知道Mobx是React的小伙伴，其目的是在于替换React本身的<code>state</code>，我们都知道对于React而言，如果一旦state发生改变，就将导致页面更新并且重新渲染，基于此，让数据结构变得可观察，其目的是在于当被观察的数据发生改变，React也能做出相应的更新和重绘操作等，并且，这样的重绘是经过Mobx优化的，只进行必要的重绘来增加性能！</p>
<ol start="2">
<li>可计算值</li>
</ol>
<p>可计算值是通过现有状态和其它可计算值派生出来的值。这很好理解，我们在使用React的时候，往往要通过state衍生出很多的值，例如如果state的一部分是一个数组，那么我们通过衍生得到的数组长度就是一个计算值，并且在Mobx中，一旦可观察的state或者其他computed value 发生改变，可计算值就会重新计算。其实，在实际的React项目中，我们在很多地方都使用到了计算值。</p>
<p>还是上面<code>AppState</code>的例子，现在我们给其增加一个计算值，</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppState</span> </span>&#123;</span><br><span class="line">	@observable list = [<span class="string">'limoer'</span>, <span class="string">'lin'</span>];</span><br><span class="line">	@computed get count() &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.list.length;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> state = <span class="keyword">new</span> AppState();</span><br><span class="line"><span class="built_in">console</span>.log(state.count); <span class="comment">// &gt; 2</span></span><br><span class="line">state.list.push(<span class="string">'lindo'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(state.count); <span class="comment">// &gt; 3</span></span><br></pre></td></tr></table></figure>
<p><code>count</code>是一个计算值，一旦list发生变化，其就会自动重新计算，可以保证，<code>count</code>的值每次都是最新的，并且都是等于list数组的长度。</p>
<ol start="3">
<li>autorun</li>
</ol>
<p>其作用和函数名一样好理解，其会自动执行；<code>autorun</code>其本身是一个响应式函数，其使用到的依赖关系state/computed value等一旦发生改变，其就会自动执行一次，效果和计算值类似，但是计算值和<code>autorun</code>的应用场景是不一样的，<code>computed value</code>通常会产生一个新值而<code>autorun</code>达到某种目的而不产生新值，例如生成日志，处理网络请求等。<br>还是上面的例子，我们继续扩展：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppState</span> </span>&#123;</span><br><span class="line">	<span class="comment">// ...省略前面的代码</span></span><br><span class="line">	<span class="keyword">let</span> logcount = autorun(<span class="function"><span class="params">()</span> =&gt;</span> &#123;<span class="built_in">console</span>.log(<span class="string">'count: '</span> + <span class="keyword">this</span>.count)&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里我们在<code>autorun</code>中使用了<code>computed value</code>， 一旦发生<code>count</code>改变，就会自动打印出新的<code>count</code>值；当然，初始化state实例对象的时候，就会先执行一次。</p>
<ol start="4">
<li>action</li>
</ol>
<p>动作是用来修改状态的。并且只应该对修改状态的函数使用<code>action</code>，要使用动作很简单，使用<code>@action</code>修饰一个函数或者使用<code>action(fn)</code>，把要修饰的函数作为参数即可。继续上面的例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppState</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 省略上面的代码</span></span><br><span class="line">	@action.bound</span><br><span class="line">	addOne(name) &#123;</span><br><span class="line">		<span class="keyword">this</span>.list.push(name);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 或者</span></span><br><span class="line">	@action</span><br><span class="line">	addOne = <span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">		<span class="keyword">this</span>.list.push(name);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>上面我们定义了一个函数，用于向列表中添加一个姓名。请注意，ES6 class的写法无法自动绑定到对象，所以使用<a href="mailto:`@action.bound" target="_blank" rel="noopener">`@action.bound</a>` 或者是使用ES6中引入的箭头函数(推荐)。</p>
<h4 id="与React使用"><a href="#与React使用" class="headerlink" title="与React使用"></a>与React使用</h4><ol start="5">
<li>observer<br><code>observer</code>是由<code>mobx-react</code>包(需独立安装)提供的用于让组件变成响应式组件的decorator。官方文档中写到：它用 <code>mobx.autorun</code> 包装了组件的 <code>render</code> 函数以确保任何组件渲染中使用的数据变化时都可以强制刷新组件。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="comment">// 其余依赖省略</span></span><br><span class="line">@observer</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NameList</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">	addUser = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">		e.preventDefault();</span><br><span class="line">		<span class="keyword">if</span>(<span class="keyword">this</span>.uname.value)&#123;</span><br><span class="line">			<span class="keyword">this</span>.props.appstate.addOne(<span class="keyword">this</span>.uname.value);</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="built_in">console</span>.log(<span class="string">'must input user name!'</span>);</span><br><span class="line">		&#125;	</span><br><span class="line">	&#125;</span><br><span class="line">	render() &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line">			&lt;ul&gt;</span><br><span class="line">				&#123;</span><br><span class="line">					this.props.appstate.list.map((index, name) =&gt; &#123;</span><br><span class="line">						return &lt;li key=&#123;index + 10&#125;&gt;&#123;name&#125;&lt;/li&gt;</span><br><span class="line">					&#125;)</span><br><span class="line">				&#125;</span><br><span class="line"><span class="xml">			<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">			&lt;div&gt;</span><br><span class="line">				&lt;p&gt;当前用户人数：&#123;this.props.appstate.count&#125;&lt;/p&gt;</span><br><span class="line">				&lt;label for="uname"&gt;姓名&lt;/label&gt;</span><br><span class="line">				&lt;input type="text" name="uname" ref=&#123;(ref) =&gt; this.uname = ref&#125;/&gt;</span><br><span class="line">				&lt;button onClick=&#123;this.addUser&#125;&gt;+&lt;/button&gt;</span><br><span class="line">			&lt;/div&gt;</span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">	&#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line">render(&lt;NameList appstate=&#123;appstate&#125; /&gt;, document.getElementById('app'));</span><br></pre></td></tr></table></figure>
<p>上面是一个响应式组件的例子，结合了上面定义的状态，我们可以查看所有的姓名、数量，并且可以通过点击按钮来改变state。其实<code>observer</code>对非响应式组件仍然有效，同样是上面的例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> List = observer(<span class="function">(<span class="params">&#123;appstate&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">		appstate.list.map((index, name) =&gt; &#123;</span></span><br><span class="line"><span class="xml">			return <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index</span> + <span class="attr">19</span>&#125;&gt;</span>&#123;name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">		&#125;)</span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>好了，对于<code>observer</code>的介绍就告一段落，更多的Mobx和React连接的方式，以及Mobx提供的生命钩子函数等相关知识你可以查看官方文档来了解。</p>
<h3 id="尾巴"><a href="#尾巴" class="headerlink" title="尾巴"></a>尾巴</h3><blockquote>
<p>自从放了暑假回了家，效率下降特别多，在学校的时候以为回家可以安心学习，到了家才知道一切都变了，该做的事情还没做，还有更多的知识要学习。所以，早早回学校也许是一个不错的选择！所以再过几天，就要启程回学校了，在最后一年里，期待所有的努力都没有白费，期待一个新(好)的开始！</p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[响应式布局的那些事]]></title>
      <url>http://yoursite.com/2017/07/31/%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/</url>
      <content type="html"><![CDATA[<blockquote>
<p>响应式设计在如今的web开发过程中已经是必不可少，它可以针对不同的设备环境对页面进行调整，并且可以在PC端和移动端达到很好效果的情况下，不用开发多套页面，可以提升开发速度，可维护性打打增强。</p>
</blockquote>
<h3 id="响应式布局"><a href="#响应式布局" class="headerlink" title="响应式布局"></a>响应式布局</h3><p>响应式布局的一种实现方式的原理是使用CSS3新引入的Media Query来调整元素在不同分辨率下的显示效果，并且通过JavaScript进行交互。总结起来，响应式布局有以下几个需要注意的点：</p>
<ol>
<li>设置Viewport</li>
</ol>
<p>我们知道，在移动设备中，页面被放置在虚拟的窗口中，这个窗口也称作视口(Viewport),对于未进行移动端适配或者是未进行响应式设计的页面，往往页面的宽高都会大于移动设备的宽高，所以为了能够在移动设备上进行页面交互，缩放是不可避免的，但是频繁的放大缩小带来的浏览体验肯定不会好。所以，在响应式设计的第一步，就是要禁止移动设备的缩放，这很容易实现，我们只需要在html页面中的head元素下添加一个meta标签用于规定禁止缩放就可以了：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0, user-scalable=no, maxinum-scale=1.0"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>使用Media Query</li>
</ol>
<p>媒介查询才是响应式布局的关键所在，我们使用Media Query 来实现在不同尺寸下使用不同的样式。Media Query的规则有很多，例如<code>@media screen and (max-width: 980px){...}</code>就表示了在980px下的屏幕下使用在此定义的各种样式，同样还有<code>min-width</code>、<code>orientation(设备方向)</code>等属性，我们需要按需进行设置。</p>
<ol start="3">
<li>使用JavaScript</li>
</ol>
<p>如果能做到上面的两点，在一般情况下，响应式布局是可以实现的。但是如果在布局的过程中需要改变交互，那么JavaScript久必须派上用场了。例如一个菜单栏，在十分小的屏幕下需要折叠，那么就需要用到JavaScript。</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><p>上面是我能够想到的响应式布局的一些要点，在实际学习过程中，我并没有在一些项目中使用相应式设计的方式(貌似很悲哀…)。在目前移动为先的时代，为移动端做更好的优化是不可避免的，无论是使用重新写一套移动端页面，还是使用响应式布局，或者使用其他的例如Flex Box来进行布局。作为一个工作在浏览器端的🐒，这都是我们必须具备的素质。</p>
<p>好了，写一个简单的小例子吧。如果你从未接触过响应式布局，那么希望接下来的code会帮助你更快地了解并应用它。</p>
<p>我们来写一个菜单栏，其HTML结构‍如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"nav"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"nav-list"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">id</span>=<span class="string">"home"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">id</span>=<span class="string">"topic"</span>&gt;</span>Topic<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">id</span>=<span class="string">"today"</span>&gt;</span>Today<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">id</span>=<span class="string">"about"</span>&gt;</span>About<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">id</span>=<span class="string">"concat"</span>&gt;</span>Concat<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>CSS如下：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">	<span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">padding</span>: <span class="number">0</span>;	</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#nav</span> &#123;</span><br><span class="line">	<span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#nav-list</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">	<span class="attribute">list-style</span>: none;</span><br><span class="line">	<span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">20%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#nav-list</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">	<span class="attribute">display</span>: block;</span><br><span class="line">	<span class="attribute">text-align</span>: center;</span><br><span class="line">	<span class="attribute">text-decoration</span>: none;</span><br><span class="line">	<span class="attribute">color</span>: <span class="number">#FFF</span>;</span><br><span class="line">	<span class="attribute">line-height</span>: <span class="number">4em</span>;</span><br><span class="line">	<span class="attribute">font-size</span>: <span class="number">1.4em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#nav-list</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child(1)</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">	<span class="attribute">background-color</span>: <span class="number">#bcbcbc</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#nav-list</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child(2)</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">	...</span><br><span class="line">	<span class="comment">/*添加背景色*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#nav-list</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child(1)</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">	<span class="attribute">background-color</span>: <span class="built_in">rgba</span>(188, 188, 188, .8);</span><br><span class="line">	<span class="comment">/*添加鼠标移上去的样式*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#nav-list</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child(1)</span> <span class="selector-tag">a</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">	<span class="attribute">content</span>: <span class="string">''</span></span><br><span class="line">	<span class="comment">/*使用伪类来添加图标字体等*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>现在，我们来为屏幕宽度小于768px写一个样式：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">media</span> screen and (max-width: <span class="number">768px</span>) &#123;</span><br><span class="line">	<span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">		<span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">		<span class="attribute">line-height</span>: <span class="number">60px</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">		<span class="attribute">font-size</span>: <span class="number">0</span>;</span><br><span class="line">		<span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">		上面的的样式指明了再768px宽度及以下，我们设置a标签的font-size为0，不显示字体。</span></span><br><span class="line"><span class="comment">		设置伪元素所在的图标字体的行高等于a标签的宽度，使其垂直居中。</span></span><br><span class="line"><span class="comment">		通过上面的简单设置，我们在小于768px跨度的屏幕下，对于该菜单就只能看到图标了。</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接着，我们可以为更窄的屏幕设置折叠菜单，我们通过css来绘制折菜单，使用JS来显示和隐藏。具体的实现这里就不贴出来了。</p>
<p>ok，到此为止，我们已经写好了一个响应式菜单栏了(虽然…)。</p>
]]></content>
      
        
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Demo--Canvas with React]]></title>
      <url>http://yoursite.com/2017/05/27/Demo-Canvas-with-React/</url>
      <content type="html"><![CDATA[<blockquote>
<p>一个使用Canvas处理图片的Demo，使用React + webpack + Redux 的技术栈，非常适合初学者，希望你喜欢！</p>
</blockquote>
<h3 id="为什么"><a href="#为什么" class="headerlink" title="为什么"></a>为什么</h3><p>学习canvas已经有一阵子了，忙完了计组课设，考完了数据挖掘，终于有时间来做一点小Demo来巩固自己所学的知识了。就像上面介绍的那样，这是一个使用Canvas进行图片处理的Demo，其可以选择本地图片，改变其R G B 以及透明度，然后可以选择保存到本地。并且为了重温很久没碰的React，前端使用了React，使用Redux进行数据的管理(虽然简单到没必要使用),并且使用了css modules 以便直接在组件中使用css。当然这一切都是在使用webpack进行编译打包的情况下。</p>
<p>这个Demo十分简单，特别适合React初学者食用，相信会对你的React学习有所帮助！</p>
<h3 id="如何运行"><a href="#如何运行" class="headerlink" title="如何运行"></a>如何运行</h3><ol>
<li>从我的<a href="https://github.com/xiaomoer/sample-canvas-with-react" target="_blank" rel="noopener">github</a>上clone到本地;</li>
<li>进入Demo根目录, 执行npm init 安装依赖;</li>
<li>安装完毕后，执行 npm run build 进行构建;</li>
<li>在Chrome浏览器(下载功能只能在Chrome中使用，所以…)中打开index.html。</li>
</ol>
<p>至此，你可以体验这个简单的Demo了。</p>
<h3 id="像什么"><a href="#像什么" class="headerlink" title="像什么"></a>像什么</h3><p>如果你觉得在你的机器上run很麻烦，或者你只是想看看长得怎么样。</p>
<p>在浏览器器中打开，是这个样子的：</p>
<p><img src="http://olro3ke8a.bkt.clouddn.com/init.png" alt="初始化效果"></p>
<p>我承认的确很简单，简单到显得简陋了！接下来你可以选左下角的选择文件按钮来选择任何一张图片，比如我选择了一张图片后:</p>
<p><img src="http://olro3ke8a.bkt.clouddn.com/init_pic.png" alt="初始化图片"></p>
<p>任何被选中的图片都会被居中显示，宽高都会适应600*400的图片操作区域。现在，可以对图片进行操作了：</p>
<p><img src="http://olro3ke8a.bkt.clouddn.com/after.png" alt="处理后"></p>
<p>我们选择对图片的R、G、B、以及透明度进行调整，实时调整的效果将会在左侧的图片区域实时显示出来。</p>
<p>第四步，点击图片区下的按钮，就可以吧处理过的图片下载到本地了，我们打开下载后的图片和处理的图片进行对比，就像这样：<br><img src="http://olro3ke8a.bkt.clouddn.com/save.png" alt="保存与对比"></p>
<p>至此，我已经演示完了所有的功能。</p>
<h3 id="不足"><a href="#不足" class="headerlink" title="不足"></a>不足</h3><p>如果你细心一点的话，你会发现这个Demo还有很多问题：</p>
<ol>
<li>我们导入任何宽高的图片，其都会被自适应到框中，所以处理后的图片品质会下降。</li>
<li>保存图片只能在Chrome浏览器中进行，已测试在Firfox中无法使用这个功能。</li>
<li>右侧的工具栏在选择新图片后不会被初始化。</li>
<li>功能单一。</li>
<li>界面简陋</li>
<li>…</li>
</ol>
<h3 id="你需要注意的是"><a href="#你需要注意的是" class="headerlink" title="你需要注意的是"></a>你需要注意的是</h3><p>如果你想学习React和canvas，那么我希望我的这个Demo会对你有所帮助，这里提几个需要注意的点，这些点也是我在开发过程中遇到的问题：</p>
<ol>
<li>如何使用input file来选择一张图片并绘制到canvas中。</li>
<li>如何保存图片。</li>
<li>图片在React中绘制的时机。</li>
<li>如何使用redux进行数据管理，特别是如何使用带参数的action。</li>
<li>你所关注的。</li>
</ol>
<h3 id="未来"><a href="#未来" class="headerlink" title="未来"></a>未来</h3><p>这虽然是一个很简单的Demo，但是我会在此基础上进行继续跟进，现在能想到的是解决上面提到的不足，比如设置两种模式，处理图片品质下降的问题；兼容主流浏览器；增添新功能；修改工具栏的状态初始化的bug；以及其它我以后能够想到并且我能够实现的。</p>
<p>以及…我目前有想法开发一个可交互的视频编辑器，有兴趣的同学可以关注下咯！</p>
<h3 id="写到后面"><a href="#写到后面" class="headerlink" title="写到后面"></a>写到后面</h3><p>还有不到3个小时我就21岁了，想想前面走过的20年，尤其是上大学的三年来，感慨颇多。谢天谢地，就算无论如何，我都完好无损的度过了。接下来的一岁中，我将面临人生中一个个重大的转折点，实习、毕业、工作、走向社会。从小到大，我对我所有的事情做出选择，接下来，也不例外。我做好准备了，并且一直在准备着！</p>
<p>共勉！</p>
<h3 id="新！"><a href="#新！" class="headerlink" title="新！"></a>新！</h3><p>5.28日 </p>
<ol>
<li>解决了再次选择图片工具栏初始化的问题；</li>
<li>工具栏的调节精度下沉到0.01；</li>
<li>修改页面细节。</li>
</ol>
<p>现在看起来长这样！<br><img src="http://olro3ke8a.bkt.clouddn.com/new.png" alt="新的页面"></p>
<p>6.3日</p>
<ol>
<li>同样的功能，不同的界面和实现方式，采用react但是去除redux使用state进行状态管理；</li>
<li>操作更加主流和人性化；</li>
<li>已知BUG，下载某些图片的时候可能会失败，暂不知原因。</li>
</ol>
<p>新版地址：<a href="https://github.com/xiaomoer/picture-editor-with-canvas" target="_blank" rel="noopener">https://github.com/xiaomoer/picture-editor-with-canvas</a></p>
<p>看起来是这样的：<br><img src="http://olro3ke8a.bkt.clouddn.com/%E5%88%9D%E5%A7%8B%E6%95%88%E6%9E%9C.png" alt=""><br>还有这样：<br><img src="http://olro3ke8a.bkt.clouddn.com/style.png" alt=""></p>
<p>加油！</p>
]]></content>
      
        
        <tags>
            
            <tag> React </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[初识 requestAnimationFrame]]></title>
      <url>http://yoursite.com/2017/05/12/%E5%88%9D%E8%AF%86-requestAnimationFrame/</url>
      <content type="html"><![CDATA[<blockquote>
<p>事情的起因是这样的，前段时间面试的时候面试官问我会canvas不，作为一名未来的前端猿，我只有过一点了解，后来居然收到了offer，当然在闲暇之余是要学习一下canvas，并且在学习过程中首次接触到了本文的主角<code>requestAnimationFrame</code>。</p>
</blockquote>
<h3 id="web中实现动画"><a href="#web中实现动画" class="headerlink" title="web中实现动画"></a>web中实现动画</h3><p>老实说，如果有人问我如何在web开发中实现动画，我第一时间想到的就是使用定时器<code>setTimeout()</code>或者<code>setTimeInterval()</code>来实现。其实实现的方式远远不止这一种，在CSS3的时代，我们实现动画有了更多的选择，比如使用关键帧动画，使用<code>transition</code>，我们也可以在<code>canvas</code>上绘图来实现动画；当然，还有<code>requestAnimationFrame</code>。</p>
<p>使用<code>setTimeout()/setInterval()</code>实现的方式很简单，我前面有一篇文章就简要介绍了JS中的定时器。使用这种方式实现动画其实是有其性能瓶颈的，例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animation</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">    setTimeout(animation, <span class="number">1000</span>/<span class="number">60</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>上面我们以60帧/秒的速度执行动画，但是如果浏览器不是60帧/秒，就会掉帧；并且由于JS单线程的特点，所有不能保证每一次执行回调都是<code>1000/60</code>毫秒；还有，当窗口处于非激活状态的时候，它同样可能会执行。</p>
<p>其实很好理解，作为定时器，<code>setTimeout/setInterval</code>并不是专门做动画的，存在各种各样的问题也是很好接受的，但是当我们认识到这种实现动画的方式的各种缺点时，我们也许会考虑另一种动画的实现方式，而<code>requestAnimationFrame</code>是一种更好的方案。</p>
<h3 id="初识-requestAnimationFrame"><a href="#初识-requestAnimationFrame" class="headerlink" title="初识 requestAnimationFrame"></a>初识 requestAnimationFrame</h3><blockquote>
<p>当我们执行window.requestAnimationFrame(callback)的时候，浏览器会在下次重绘的时候执行回调函数，它会告诉浏览器马上就要执行动画了，而callback则是用于更新动画。</p>
</blockquote>
<p><code>requestAnimationFrame</code>使用起来很简单，通过递归不断来执行回调来更新画面从而让画面动起来，我们甚至不需为其指定动画执行的时间和帧率。其优点是：1）从名字上就可以看出这是一个专门用于实现动画的API，优化是自然少不了的；2）其如果处于非激活状态，会自动暂停执行，有效节省了CPU资源。</p>
<h3 id="小实例"><a href="#小实例" class="headerlink" title="小实例"></a>小实例</h3><p>我们在做动画的时候，有时希望背景移动起来，结合目前正在学习的canvas，我们可以很轻易的做到这点.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> image = <span class="built_in">document</span>.querySelectorAll(<span class="string">'img'</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">moveBackground</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  ctx.clearRect(<span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height);</span><br><span class="line">  ctx.translate(<span class="number">10</span>, <span class="number">0</span>);</span><br><span class="line">  ctx.drawImage(image, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  j++;</span><br><span class="line">  <span class="keyword">if</span>(j &lt; <span class="number">20</span>)&#123;</span><br><span class="line">    requestAnimationFrame(moveBackground);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> moveBtn  = <span class="built_in">document</span>.getElementById(<span class="string">'move'</span>);</span><br><span class="line">moveBtn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">  e.preventDefault();</span><br><span class="line">  requestAnimationFrame(moveBackground);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面我们点击button的时候，开始执行动画，通过不断的坐标变换和清除重绘，达到背景图片向右移的效果。</p>
<p>最后，请注意，不是所有浏览器都支持该方法，所以你可能需要一个polyfill，关于如何实现这个polyfill，网络上的资源比较多了，这里就不在赘述。</p>
]]></content>
      
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[实用的JavaScript技巧、经验总结]]></title>
      <url>http://yoursite.com/2017/04/21/%E5%AE%9E%E7%94%A8%E7%9A%84JavaScript%E6%8A%80%E5%B7%A7%E3%80%81%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<ol>
<li><p>避免给一个未申明变量赋值，因为这会直接创建一个全局变量。</p>
</li>
<li><p>总是使用 ‘===’ 而不是 ‘==’，’===’会直接比较，而’==’必要时会进行类型转换等造成错误。</p>
</li>
<li><p>使用typeof instanceof 应当小心。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span> <span class="comment">// object</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="keyword">new</span> A() <span class="keyword">instanceof</span> A <span class="comment">// true</span></span><br><span class="line"><span class="keyword">new</span> A() <span class="keyword">instanceof</span> <span class="built_in">Object</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>arguments 对象转换成一个数组</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.ptototype.slice.call(<span class="built_in">arguments</span>);</span><br><span class="line"><span class="built_in">Array</span>.from(<span class="built_in">arguments</span>) <span class="comment">//ES6</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>验证一个参数是否是数组</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.toString.call(a) === <span class="string">'[object Array]'</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>取得一个数组中最大值与最小值</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Math</span>.max.apply(<span class="built_in">Math</span>, arr);</span><br><span class="line"><span class="built_in">Math</span>.min.apply(<span class="built_in">Math</span>, arr);</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用splice删除数组中某一个/一些元素，而不是使用delete，如果使用delete的话，相当于只是把原值变为undefined</p>
</li>
<li><p>使用for .. of来遍历数组，使用for .. in 要避免遍历到原型上面的可枚举属性，使用hasOwnProperty()来检测</p>
</li>
<li><p>不要扩展Object.prototype，因为这会给所有(?)对象增加属性/方法，从而产生很多意想不到的行为和错误！</p>
</li>
<li><p>对于一个构造函数，总是使用 new进行构造函数调用，否则默认返回空(对象)。</p>
</li>
<li><p>arguments.callee() 可执行当前函数，不推荐使用。</p>
</li>
<li><p>认识 ‘+’运算符， 对于对象而言，会转换成字符串，对于其他运算符则会尝试转成数字。</p>
</li>
<li><p>在使用if语句是，如果需要在条件中赋值，需要加上括号：<br><code>`</code>javascript<br>if((x = y)){<br>// do something<br>}<br>并且结果是否为真取决于y的真假。</p>
</li>
<li><p>判断一个数是否为NAN使用 x !== x,为true则该变量为NAN(NAN不等于自身)</p>
</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[在Express中使用Cookie]]></title>
      <url>http://yoursite.com/2017/03/16/%E5%9C%A8express%E4%B8%AD%E4%BD%BF%E7%94%A8cookie/</url>
      <content type="html"><![CDATA[<blockquote>
<p>文章来自于我在express框架上使用cookie引发的一些问题，但在具体介绍cookie以及如何正确的使用cookie之前，我觉得我有必要说一说<code>cookie</code>到底是什么。</p>
</blockquote>
<h3 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h3><p>Cookie是服务器保存在浏览器中的一段小(一般而言size&lt;4KB)的文本信息，而浏览器每次想服务器发出请求，就会携带上这段信息。Cookie一般包含了key、value、到期时间、所属域名、所属路径等信息。</p>
<p>在浏览器中我们只需要使用<code>document.cookie</code>来得到当前页面所属的cookie。请注意，返回的cookie是以字符串形式存在的，不同的key-value之间通过’;’来分割，所以如果你想对齐进行进一步操作，需要相应的处理。</p>
<p>这里需要注意的是，<code>document.cookie</code>属性是可写的，这就意味着你可以手动添加cookie，使用<code>document.cookie=&quot;name=value&quot;</code>的形式。注意，这里是添加，而不产生覆盖。</p>
<p>好了，关于cookie的属性的具体含义和用法，大家可以自行去了解。</p>
<h3 id="我的问题"><a href="#我的问题" class="headerlink" title="我的问题"></a>我的问题</h3><p>我在使用服务器端使用cookie的时候出现了问题，出现这样问题的原因很简单，首先我对cookie存在错误的理解，请务必注意，cookie是服务器发送给客户端，而客户端在发起请求的时候携带cookie而已。在正确认识cookie之后，并且成功的将cookie发送到浏览器过后，问题又来了，我在请求的时候，cookie却不能发送到服务端。我使用的是下面一段代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">'/login?'</span>+stringify_data, &#123;</span><br><span class="line">        method: <span class="string">'GET'</span></span><br><span class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> res.json();</span><br><span class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">json</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(json.status);</span><br><span class="line">    &#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'oh ! error!'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这里我使用了fetch API，在能够正确的发送请求的情况下，服务器无法读取到相应的cookie信息，同样在chrome开发者工具中查看请求头也发现请求并没有携带cookie信息。我想着一定是fetch API的问题，所以我赶快写了一个使用Ajax的请求，很显然，能够正确的发起携带cookie的请求。好吧，写到现在，我想的确是fetch API的问题了，阅读文档发现fetch API发送的请求默认是不带cookie的，必须手动设置(无论是出于什么样的考虑，但还是觉得坑)！好吧，问题迎刃而解，我们只需要在fetch函数第二个参数设置<code>credentials: &#39;include&#39;</code>就可以发送cookie了/无奈！</p>
<h3 id="在express中使用cookie"><a href="#在express中使用cookie" class="headerlink" title="在express中使用cookie"></a>在express中使用cookie</h3><p>在express中使用cookie是一件十分惬意的事情，因为如果你使用<code>cookie-parser</code>中间件的话，那么我们只需要使用<code>res.cookie(name, value[,options])</code>就可以设置cookie了，关于options相关的参数可以自行学习！</p>
<p>如果想删除cookie，也很简单，使用<code>res.clearCookie(name)</code>就可以啦。</p>
<p>当然如果想获取请求头发过来的cookie，我们只需要使用<code>req.cookies</code>就可以了，这里返回的是一个JS对象，我们直接可以使用<code>name</code>来读取值，从而做进一步的操作。</p>
<p>在使用了<code>cookie-parser</code>中间件过后，在服务端操作cookie已经足够简单，并且<code>cookie-parser</code>不但提供了非签名使用的方式，还提供了签名的使用方式，具体使用是在使用中间件的时候添加一个secret，<code>app.use(cookieParser(&#39;secret&#39;))</code>即可，当然，在获取cookie的时候使用 <code>req.signedCookies</code>属性就好了。</p>
<p>好了，如果你不想使用<code>cookie-parser</code>，我们也能够通过<code>req.headers.cookies</code>(感到罪恶所以不推荐/无奈)访问到cookie，如果想写cookie的话，使用<code>res.setHeader(name, value)</code>(再次感到罪恶)或者<code>res.writeHead(status[,options])</code>就可以了…</p>
<h3 id="尾巴"><a href="#尾巴" class="headerlink" title="尾巴"></a>尾巴</h3><p>一般情况下，文章末尾，我总会写一点鸡汤/无奈，这次也不例外。距离写上一篇博客已经过了很久了，起初有两篇想写的文章，一篇是在RN中使用Navigator，另外一篇则是介绍我自己正在学习的几种分类算法。可是当创建好文件准备开工时，我因为写一篇文章可能需要2-3个小时(我速度慢)或者是因为真的动笔写的时候反而觉得没什么要说的就放弃了。然后一段时间过后，或许是因为忙，或许是因为懒，或许是因为浮躁，就是没有去实践，没有去巩固，而把一切都抛之脑后，然后把前面学习到的忘得一干二净！</p>
<p>嗯，这的确的真实的！仅此而已！</p>
<p>END</p>
]]></content>
      
        
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Flex弹性布局]]></title>
      <url>http://yoursite.com/2017/02/22/Flex%E5%BC%B9%E6%80%A7%E5%B8%83%E5%B1%80/</url>
      <content type="html"><![CDATA[<blockquote>
<p>说起布局，我脑子里一下就想到了DIV+CSS布局，毕竟曾经被那么多写着DIV+CSS网页开发的书籍洗过脑，然后到现在还不怎么会用这种大众的布局方式。当然了，其实页面还有其它的一些布局方式，比如表格布局，框架布局这样已经逐渐被淘汰的布局方式，也有今天的主角–一颗冉冉上升的新星，弹性盒子布局。</p>
</blockquote>
<p>Flex是Flexible Box的简称，我们这里把其翻译为弹性布局，至于为什么不叫“灵活的盒子布局”。额，这个问题也许会在读完本篇文章找到答案。好吧，正式开始。</p>
<h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><p>flex是display的一个属性，当然对于行内元素还有一个叫做flex-inline的属性，这里我们不多说，但是要注意的是，一旦对一个元素的display属性设为flex，那么它的子元素就不能使用“浮动(float)”这个神奇的属性，而这个元素将会一跃成为容器(container)，而其的子元素将会成为项目。好吧，先从容器说起。</p>
<p>一旦把一个元素的display属性设置成为’flex’，这个元素就成为一个<code>容器</code>，<code>容器</code>有几个比较重要的属性，学习和掌握这几个属性是学习弹性布局的关键。它们分别是：</p>
<ol>
<li>flex-direction: 决定子元素(项目)的排列方向。</li>
<li>justify-content: 指定子元素在主轴上的对齐方式。</li>
<li>flex-wrap: 指定多行显示以及显示形式。</li>
<li>align-items: 决定项目在交叉轴上的对齐方式。</li>
<li>align-content: 定义项目在多轴线上的对齐方式。</li>
</ol>
<p>好吧，大概就是这几个了，我们注意到在上面解释的时候提到了<code>主轴</code>和<code>交叉轴</code>，这里我先简单解释一下：对于这个概念，我们可以很简单的在一个容器上画一个十字坐标轴，如果我们设置flex-direction为row(行)，那么横坐标就为主轴，纵坐标就是交叉轴，这里要注意坐标轴的指向，因为同样有一个属性为<code>row-reverse</code>，此时主轴的方向指向和设置为<code>row</code>的相反方向。</p>
<h3 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h3><p>作为容器的子元素，项目同样有几个重要的属性：</p>
<ol>
<li>order: 控制项目的排列，默认为0，值越小则越靠前。</li>
<li>flex-grow: 用于定义Flex项目的放大比例，默认为0，即使存在剩余空间，也不放大。</li>
<li>flex-shrink: 用于定义Flex项目的缩小比例，默认为1，即空间不足，Flex项目将等比缩小。</li>
<li>align-self: 允许单个Flex项目有不同于其他Flex项目的对齐方式。</li>
</ol>
<h3 id="然后"><a href="#然后" class="headerlink" title="然后"></a>然后</h3><p>我并不会把每一个属性具体来讲，因为这样的文章在网络上的确太多了。我正在学习RN，所以在这里就写一个界面，其中的布局将会采用弹性布局，中途我会对布局进行简单的分析，以加深理解。<br>当写到这里的时候我就开始布局这个简单的页面，然后到现在才布局好，时间用了那么长，感觉像是过了一年…好了，不多说了，最终的界面如下图所示。<br><img src="http://olro3ke8a.bkt.clouddn.com/images/hexoSimulator%20Screen%20Shot%2022%20Feb%202017,%209.38.36%20PM.png" width="300px" height="500px"><br>其实我也不知道自己写了啥，还是勉为其难的就叫其“登录页面”吧，现在我来分析一下这个页面哪些元素是容器和项目(当然都是项目啦)，又在什么地方使用了什么属性。</p>
<p>页面整体采用了弹性布局，所以从整体来看我们一定使用了flex-direction属性，并且其值是<code>column</code>，所以这里的主轴一定是Y轴并且是方向向上。并且我们能够观察到，页面上所有的元素都是居中的，我们于是想到了在交叉轴上的对齐方式是: align-items: ‘center’，而其主轴上的对齐方式则是默认的justify-content: ‘flex-start’。</p>
<p>接下来来看两个不明显的，页面上有两个输入框，每个输入框其实都是一个<code>View</code>组件包裹，那么在这个组件内部，我们仍然使用了弹性布局(竖轴为主轴)，为了让输入框上下居中，这里必须让justify-content: ‘center’；紧接着最后一行有两个按钮，这两个按钮同样在一个<code>View</code>组件中，并且这个<code>View</code>也是弹性布局，并且一定要设置flex-direction: ‘row’才能让这两个按钮排列在一行。我们同样可以给每个按钮赋予不同的order值，让其进行排序。</p>
<p>总结一下：<br>我们是用弹性布局完成了一个基本页面的布局(虽然这真的很丑陋)，在这个简单的布局中我们使用到的属性并不多，但是的确比使用css+div布局来得更快，尤其是垂直上的居中，css是比较难以实现的。这里我们一共有四个容器，分别是最外层容器，每一个输入框外层容器，按钮组外层容器，当然，这里面所有的元素都能称为项目，这里就不在多说。</p>
<h3 id="尾巴"><a href="#尾巴" class="headerlink" title="尾巴"></a>尾巴</h3><p>说了这么多，那么我对flex布局的态度到底是什么？一句话总结，学习它，了解它，使用它。弹性布局我在刚开始学习React的时候就有了解过，过了也快半年了吧，当时看着阮一峰老师的文章，感觉怎么都不明白，然后渐渐抛之脑后。直到学期开始，我开始学习RN，再一次接触到Flex布局，才想起来画一些时间去了解，然后试着使用，最后再让自己记忆下来。相比第一次我接触Flex布局，我做出了改变，而这种改变是在时间并不充裕的情况下，弥足珍贵的。希望自己能够加油，也希望和我有同样压力的同学加油！</p>
]]></content>
      
        
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[生成器]]></title>
      <url>http://yoursite.com/2017/02/11/%E7%94%9F%E6%88%90%E5%99%A8/</url>
      <content type="html"><![CDATA[<blockquote>
<p>大家对于<em>异步</em>这个词想必都不陌生，看到异步我可能最先想到的就是使用回调，再者我会使用Promise，可是使用回调处理异步控制流是有缺陷的：第一，基于回调的异步方式实在不适合大脑对于任务的思考(这点我深有体会)；第二，存在控制反转的问题。而Promise链提供了我们以顺序的方式处理和表达异步流。而这篇文章的主角生成器(generator)也是一种顺序和看似同步的处理异步的方式，并且它比Promise更加优秀。</p>
</blockquote>
<h3 id="有关函数"><a href="#有关函数" class="headerlink" title="有关函数"></a>有关函数</h3><p>不知道大家有没有这样思考过，一个函数一旦执行，其是否能够中断，我也没有仔细想这个问题，并且当看到这个问题，我会经验判断函数在执行过程中不会中断。到底是否中断，我们先写一个例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  a++;</span><br><span class="line">  bar();</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  a++;</span><br><span class="line">&#125;</span><br><span class="line">foo(); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure></p>
<p>运行上面这个例子，最终的结果是3，这就意味着，当函数执行完a++后，函数foo从表面上来看被中断了，然后执行了bar函数，最后执行权交给foo，函数返回已经被修改的变量a的值。虽然通过上面的小例子，并且因为JS单线程的特性，我们似乎能够肯定JS是抢占式的，但实际情况是JS并不是抢占式的，虽然函数bar的执行打断了函数foo的执行，但这其实是一种“关联”(参考原型继承)。</p>
<h3 id="初识生成器"><a href="#初识生成器" class="headerlink" title="初识生成器"></a>初识生成器</h3><p>现在让我们来认识生成器表达式，<br>同样是上面的例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  a++;</span><br><span class="line">  <span class="keyword">yield</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  a++;   </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> iter = foo();</span><br><span class="line">iter.next();</span><br><span class="line">bar();</span><br><span class="line">iter.next(); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure></p>
<p>分析一下：<br>首先我们创建了一个生成器foo(注意*)，该函数里面多了一个yield，有过python经验的大概知道这是干什么的。然后创建了一个函数bar；再来看执行，这里var iter = foo()并没有执行生成器foo，而是构建了一个迭代器，然后使用next方法启动了迭代器foo，并且在碰到yield停止执行，此时已经执行了x++，然后执行函数bar，执行完后，x经过两轮自增，此时x的值为3；最后我们调用next方法，从上一次中断处继续执行，并且没有碰到yield表达式，一直执行到函数结束，打印变量x的值为3。</p>
<p>现在我们来回答什么是生成器，其是一个特殊的函数，在函数声明的时候函数名前面包含一个”*“，并且能够多次启动和暂停。好了，我认为仅此而已。</p>
<h3 id="一些问题"><a href="#一些问题" class="headerlink" title="一些问题"></a>一些问题</h3><p>为了把生成器运用到异步流程控制中，我们还需要更深层次的了解生成器。</p>
<h4 id="生成器仍然是一种函数"><a href="#生成器仍然是一种函数" class="headerlink" title="生成器仍然是一种函数"></a>生成器仍然是一种函数</h4><p>既然说生成器其本质上还是一种函数，所以其仍然具备函数最基本的特性，能够传递参数，也能返回值。我们不妨写一个例子测试一下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">test</span>(<span class="params">a, b</span>)</span>&#123;</span><br><span class="line">  a++;</span><br><span class="line">  <span class="keyword">yield</span>;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> it = test(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">it.next();</span><br><span class="line"><span class="keyword">var</span> res = it.next();</span><br><span class="line"><span class="built_in">console</span>.log(res.value); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure></p>
<p>其实生成器和普通函数的一个很大区别是在运行期间，它不会直接运行，而是创建了一个迭代器，然后每调用迭代器的next方法，便向下执行直到到碰到yield或者执行完成暂停。而我们注意到调用next方法返回的其实是一个对象，其包含一个value属性，如果生成器返回值的话，那么该属性的值就为生成器返回的值。总的来说，生成器的运行到目前为止完全是依托迭代器。</p>
<p>好了，继续。</p>
<p>继续来看例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">foo</span>(<span class="params">a, b</span>)</span>&#123;</span><br><span class="line">  a++;</span><br><span class="line">  <span class="keyword">yield</span> a;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> it = foo(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">var</span> mid = it.next();</span><br><span class="line"><span class="built_in">console</span>.log(mid.value); <span class="comment">// 2</span></span><br><span class="line"><span class="keyword">var</span> res = it.next();</span><br><span class="line"><span class="built_in">console</span>.log(res.next); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure></p>
<p>这个例子想表达的就是对于生成器而言，yield表达式总会返回一个值，而我们可以通过迭代器next方法生成的对象来得到。</p>
<p>继续来看一个更复杂的例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">foo</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> b = a + (<span class="keyword">yield</span> <span class="string">'ok return!'</span>);</span><br><span class="line">  <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> it = foo(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">var</span> res = it.next();</span><br><span class="line"><span class="built_in">console</span>.log(res.value); <span class="comment">// ok return!</span></span><br><span class="line">res = it.next(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(res.value); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure></p>
<p>这个例子向我们展示了生成器是如何双向传递消息的，yield表达式可以发出消息响应next(…)的调用，而next(…)可以向暂停的yield表达式发送值。</p>
<h4 id="多个迭代器"><a href="#多个迭代器" class="headerlink" title="多个迭代器"></a>多个迭代器</h4><p>一个生成器的多个实例可以并发执行，并且可以彼此交互。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">gen</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> b = a + (<span class="keyword">yield</span>)</span><br><span class="line">  <span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> it1 = gen(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">var</span> it2 = gen(<span class="number">2</span>);</span><br><span class="line">it1.next();</span><br><span class="line"><span class="keyword">var</span> res = it1.next(<span class="number">3</span>).value;</span><br><span class="line">it2.next();</span><br><span class="line"><span class="built_in">console</span>.log(it2.next(res).value); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure></p>
<p>这个例子想说明的是一个生成器的多个实例可以并发执行，并且是互不干扰的。</p>
]]></content>
      
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Prototype]]></title>
      <url>http://yoursite.com/2017/02/03/Prototype/</url>
      <content type="html"><![CDATA[<blockquote>
<p>JS为了模拟面向对象“类”的实现，为了模拟类的复制行为，可能会使用一种叫做“混入”的方法，当然，这种方法和我们今天要说的<em>原型</em>并没有多大的关系。使用<em>mixin</em>的方式来模拟“类”的实现不常见，当然为了模拟”类“所付出的代价也会让我们得不偿失，JS中不并存在”类”，而是存在一种叫做<em>原型</em>的东西，请容我细细说来。</p>
</blockquote>
<h3 id="Prototype"><a href="#Prototype" class="headerlink" title="Prototype"></a>Prototype</h3><p>我们直接来讲文章的主角<em>Prototype</em>，其实JavaScript中每个对象都有一个叫做[[prototype]]的属性，这个属性就是对其他对象的一个引用。基本上所有的对象在初始化时[[prototype]]都会被赋予一个值，关于这个值是什么以及如何访问这个[[prototype]]属性，我会在后面提到。</p>
<p>还是先看一个例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  a: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = <span class="built_in">Object</span>.create(obj)</span><br><span class="line"><span class="built_in">console</span>.log(obj2.a); <span class="comment">//1</span></span><br></pre></td></tr></table></figure></p>
<p>上面的代码我们创建了一个对象obj，其包含一个属性a，我使用Object.create(obj)创建了一个新的对象，并把该对象的[[prototype]]属性赋值为obj，最后我们打印obj2中并没有显式声明的变量a，令人惊奇的是，我们成功的访问到了变量a，并且该变量的值为[[prototype]]属性引用对象obj的属性a的值！</p>
<p>我想解释下为什么要对这段代码写这么详细的解释，因为对于大多数接触过JS的童鞋而言，原型已经是见怪不怪了，可是当初我学习JS的时候，脑子里完全没有原型的概念，直到有一天我慢慢开始懂得原型，那个时刻，我的心情就像现在写这段解释的时候这么激动!</p>
<p>看完上面这段代码和冗长的解释，即使不了解JS的童鞋也对原型有了一定的认识。在这里我想再说一下，[[prototype]]到底有什么用，其实很简单，当我们试图引用某个对象的时候，在底层其实调用的是一个GET方法，而这个方法首先会查找对象本身存在这个属性与否，如果不存在则通过[[prototype]]访问其原型对象，如果还是不存在的话，则访问原型的原型对象(别忘了原型对象也是普通对象)，知道找到或者达到尽头(Object.prototype)。这个道理很简单，如果你使用for…in循环遍历一个数组的话，也许你得到的结果除了数组成员，还包含一些其它成员(不信你试试看)，这些成员就来自原型对象，并且是<em>可枚举</em>的，而对于in关键字，也会查找原型链上面属性。</p>
<h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><p>在说类的时候，也许更恰当的是给类打上一个引号，因为JS中根本就不存在”类”，JavaScript中只存在对象，我们不使用“类”创建对象，更多时候我们直接创建对象。可有些时候，我们使用<em>new</em>关键字来初始化一个对象，我们甚至在ES6后开始使用class，extend等属于类的关键字，这貌似和我前面说的矛盾了…<br>接着看一个例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(A.prototype);<span class="comment">// &#123;&#125;</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> A();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a); <span class="comment">// object</span></span><br></pre></td></tr></table></figure></p>
<p>我们创建了一个函数A，并且这个函数有一个属性prototype，如果没记错的话，这是本篇文章第一次访问原型，然后我们使用<em>new</em>初始化了一个对象，有传统面向对象语言基础的同学就知道，这简直像极了“类”！我再次强调，JS中不存在类，而且此<em>new</em>非彼<em>new</em>，这里函数A在<em>new</em>关键字的作用下，新建了一个空白对象，并让其prototype指向的对象赋值给新建对象a的[[prototype]]属性(关联)，当然这里面还会做一些其它的工作，不过大体上就这样了，很简单吧！</p>
<p>在JavaScript中，并不存在类的复制，我们不能创建一个类的多个实例，只能创建过个对象，只不过通过<em>new</em>这种方式创建的对象，其内部的[[prototype]]属性关联到同一个对象，这里所说的关联是建立一个联系，并不存在复制。</p>
<h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>既然不存在类了，这构造函数听着也很别扭，我们暂且给它打个引号吧。上面我们在说“类”的时候，我们就用到了”构造函数”，函数A就是所谓的“构造函数”，其本质上就是一普通函数，是JS的一等公民，要说真要有什么区别，函数名首字母大写算吗？也许是吧。</p>
<p>再来写一个例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(B.prototype);</span><br><span class="line"><span class="built_in">console</span>.log(B.prototype.constructor === B);</span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> B();</span><br><span class="line"><span class="built_in">console</span>.log(b.constructor === B);</span><br></pre></td></tr></table></figure></p>
<p>我感觉我放了一个大招，突然让自己迷惑起来，这里我要说明的是，B.prototype和对象b有一个叫做constructor的属性，并且默认指向函数B。这个属性的名字会让我们对JS的误解加深，四级没过的都知道，constructor翻译过来可叫做“构造器”啊，那么既然B.prototype.constructor指向了B，我们还有什么理由不说B不是“构造函数”？讲到这里，我很无奈…</p>
<p>其实呢，JS中根本不存在什么“构造函数”，其就是普普通通的函数，只不过一旦加上new关键字，这个函数调用再也不是普通的函数调用，我们把它叫做“构造函数调用”。</p>
<p>这里不想再说下去了，写个复杂点的例子先：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name, city</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.city = city;</span><br><span class="line">&#125;</span><br><span class="line">Student.prototype.showInfo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`name: <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>, from: <span class="subst">$&#123;<span class="keyword">this</span>.city&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> stu = <span class="keyword">new</span> Student(<span class="string">'limoer'</span>, <span class="string">'Chongqing'</span>);</span><br><span class="line">stu.showInfo(); <span class="comment">// name: limoer, from: Chongqing</span></span><br></pre></td></tr></table></figure></p>
<p>这里有两个值得注意的地方，每个通过”构造函数调用”而生成的对象都存在两个属性name和city；我们给Student.prototype上添加了一个“方法”，这样所有的新建对象都<strong><em>关联</em></strong>了这个对象，可以引用这个“方法”，关于<em>this</em>的使用，这里就不在提了。</p>
<p>在说了这么多过后，我想把“构造函数”称为“关联函数”，因为所谓的“构造函数”其实并不存在，或者说是，我们并不知道一个函数在创建好后是否是“构造函数”，而如果我们把它叫做“关联函数”，因为它本质上做的工作包含了建立对象和其原型对象的关联，当然，这个叫法是不恰当的。</p>
<p>再来看看constructor属性，一般情况下，任何一个普通对象都存在一个constructor属性，其实这个属性并不是其本身就有，而是当引用该属性的时候，其可以在该对象的原型链中找到。现在我急切的想写一个例子来表明一个问题：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">C</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">C.prototype = &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> c = <span class="keyword">new</span> C();</span><br><span class="line"><span class="built_in">console</span>.log(c.constructor === C); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></p>
<p>我不啰嗦了直接看问题，这里对象c的constructor属性竟然指向的不是创建它的那个函数C，这也侧面印证了我上面说的话，通过构造函数调用创建的对象不直接持有属性constructor而是从其原型链中“继承”而来，所以当我们想写一段包含继承的代码时，如果还想用constructor属性，需要做必要的修正。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Main</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sub</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  Main.call(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br><span class="line">Sub.prototype = <span class="built_in">Object</span>.create(Main);</span><br><span class="line">Sub.prototype.constructor = Sub;</span><br></pre></td></tr></table></figure></p>
<p>在结束“构造函数”讨论的时候，提醒一句，尽量不要使用constructor属性，要问原因？我想我已经不那么直观的在前面说出来了。</p>
<h3 id="如何关联"><a href="#如何关联" class="headerlink" title="如何关联"></a>如何关联</h3><p>我在上面提到把“构造函数”叫做“关联函数”，这虽然是不恰当的，但也不是一无是处，因为使用<em>new</em>关键字的“构造函数调用”，其在创建一个对象过后，也把该对象的[[prototype]]属性关联到该函数的prototype上。当然，如何关联不止这一种方法，这里介绍一种使用更为普遍的方法，Object.create(proto)。</p>
<p>还是例子为先吧：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  info: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'info'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj1 = <span class="built_in">Object</span>.create(obj)</span><br><span class="line">obj1.info(); <span class="comment">// info</span></span><br></pre></td></tr></table></figure></p>
<p>这里我们使用字面量的直接形式创建了一个对象obj，该对象包含一个方法<em>info</em>，然后使用Object.create()创建了一个新的对象，并且该对象内部的[[prototype]]属性指向obj，概括点来说，该方法创建了一个对象，并把其关联到指定的对象。</p>
<p>Object.create()是ES5才引进的，在这里我实现一个polyfill代码作为本篇的结束：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="built_in">Object</span>.create)&#123;</span><br><span class="line">  <span class="built_in">Object</span>.create = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">    Foo.prototype = obj;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Foo();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>当然，这个版本的polyfill代码无法做到更复杂的功能，而Object.create第二个参数可以指定要添加到新建属性的属性名、值等。</p>
<h3 id="尾巴"><a href="#尾巴" class="headerlink" title="尾巴"></a>尾巴</h3><p>我们如果要访问一个并不存在的属性，在内部将会使用[[GET]]方法，并且查找该对象[[prototype]]所关联的对象，该关联实际上定义了一条“原型链”，在查找属性的时候会遍历整个“原型链”。</p>
<p>关联两个对象的最常用的两种方法是：（1）使用new关键字进行“构造函数调用”，创建一个新对象并进行关联；(2)使用Object.create()，创建新的对象，并时期和传入对象关联。</p>
<p>最后再次强调，JavaScript并不存在类，所有继承的实现完全是基于原型链，不存在复制。</p>
<blockquote>
<p>注：到底前面所说的原型链的尽头到底在哪里呢？答案是Object.prototype，对于一般的原型链而言，其最终都指向了Object.prototype，这个对象包含了许多对象通用的方法，例如obj.toString()&amp;obj.valueOf()等。</p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[this]]></title>
      <url>http://yoursite.com/2017/02/01/this/</url>
      <content type="html"><![CDATA[<blockquote>
<p>JavaScript中的<em>this</em>关键字一直都是学习JS的一个难题，我们往往不能准确的理解this在上下文中的含义，往往导致一些问题的发生。对于<em>this</em>关键字，我们需要知道的是：this即不指向函数自身也不指向函数的词法作用域，this在函数调用时被绑定，也就是说，它指向什么完全取决于函数在哪里被调用。</p>
</blockquote>
<h3 id="绑定规则"><a href="#绑定规则" class="headerlink" title="绑定规则"></a>绑定规则</h3><p>在探讨具体的绑定规则时，我们先来看一个函数调用位置的例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'call foo'</span>);</span><br><span class="line">  bar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'call bar'</span>);</span><br><span class="line">  baz();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">baz</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'call baz'</span>);</span><br><span class="line">&#125;</span><br><span class="line">foo();</span><br></pre></td></tr></table></figure>
<p>我们声明了三个函数，相互嵌套。现在来寻找各个函数的调用位置，foo在全局作用域中被调用，bar的调用位置则是<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; 下面来看看几种一般性的绑定规则</span><br><span class="line"></span><br><span class="line">#### 默认绑定</span><br><span class="line">看一个例子：</span><br><span class="line">```javascript</span><br><span class="line">var name = &apos;limoer&apos;;</span><br><span class="line">function showName()&#123;</span><br><span class="line">  console.log(this.name);</span><br><span class="line">&#125;</span><br><span class="line">showName(); //limoer</span><br></pre></td></tr></table></figure></p>
<p>这里<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#### 隐式绑定</span><br><span class="line">隐式绑定的规则是调用位置是否有上下文对象，即是否被某个对象拥有或者包含。</span><br><span class="line"></span><br><span class="line">来看一个例子：</span><br><span class="line">```javascript</span><br><span class="line">function showName()&#123;</span><br><span class="line">  return this.name</span><br><span class="line">&#125;</span><br><span class="line">var obj = &#123;</span><br><span class="line">  name: &apos;limoer&apos;,</span><br><span class="line">  msg: showName</span><br><span class="line">&#125;</span><br><span class="line">obj.msg(); // limoer</span><br></pre></td></tr></table></figure></p>
<p>对于函数showName而言，其在obj对象中被引用，即函数此时引用有上下文的对象，此时使用隐式规则，this将被绑定到这个上下文对象，所以<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">两点注意：</span><br><span class="line">（1）属性引用链只有或则说是最后以层才会影响调用位置，修改下上面的例子：</span><br><span class="line">```javascript</span><br><span class="line">function showName()&#123;</span><br><span class="line">  return this.name</span><br><span class="line">&#125;</span><br><span class="line">var obj = &#123;</span><br><span class="line">  name: &apos;limoer&apos;,</span><br><span class="line">  msg: showName</span><br><span class="line">&#125;</span><br><span class="line">var obj2 = &#123;</span><br><span class="line">  name: &apos;lindo&apos;,</span><br><span class="line">  obj: obj</span><br><span class="line">&#125;</span><br><span class="line">obj2.obj.msg(); //limoer</span><br></pre></td></tr></table></figure></p>
<p>（2）this的绑定与函数的调用位置息息相关，一个常见的问题就是被隐式绑定的函数会丢失绑定对象，即应用了默认绑定规则。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">'lindo'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'limoer'</span>,</span><br><span class="line">  msg: showName</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> show = obj.msg;</span><br><span class="line">show(); <span class="comment">// lindo</span></span><br></pre></td></tr></table></figure></p>
<p> 函数show虽然函数showName的一个引用，但是由于其指向的是函数的本身，此时bar是一个不带任何修饰的函数调用，应用了默认绑定规则。</p>
<h4 id="显式绑定"><a href="#显式绑定" class="headerlink" title="显式绑定"></a>显式绑定</h4><p>和隐式绑定相反，显式绑定是一种“强制性”手段，把this绑定到某个对象上，JavaScript提供了这样的函数,call()&amp;apply()，这两个函数是如何使用的呢？它们的第一个参数是一个对象，它们会把这个对象绑定到 this，接着在调用函数时指定这个 this。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  msg: <span class="string">'inner'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showMsg</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.msg);</span><br><span class="line">&#125;</span><br><span class="line">showMsg.call(obj)</span><br></pre></td></tr></table></figure></p>
<p>call 和 apply方法的区别仅仅是参数上的问题，除了第一个参数外，apply可以使用数组来传入剩余参数，而call则是以多参数的形式写出来。除了call和apply以外，还有一个bind方法，它接收一个对象，返回绑定了该对象的这个函数，此种方法是硬绑定，也就意味着，绑定不可更改，这里不再多做介绍。</p>
<h4 id="new-绑定"><a href="#new-绑定" class="headerlink" title="new 绑定"></a>new 绑定</h4><p>这是最后一种绑定方式，即“构造函数绑定”。会在将new关键字的时候在阐述此种绑定。</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>如果要判断一个运行中函数的 this 绑定，就需要找到这个函数的直接调用位置。找到之后<br>就可以顺序应用下面这四条规则来判断 this 的绑定对象。</p>
<ol>
<li>由new调用?绑定到新创建的对象。</li>
<li>由call或者apply(或者bind)调用?绑定到指定的对象。</li>
<li>由上下文对象调用?绑定到那个上下文对象。</li>
<li>默认:在严格模式下绑定到undefined，否则绑定到全局对象。<br>一定要注意，有些调用可能在无意中使用默认绑定规则。如果想“更安全”地忽略 this 绑 定，你可以使用一个DMZ对象，比如ø = Object.create(null)，以保护全局对象。<br>ES6 中的箭头函数并不会使用四条标准的绑定规则，而是根据当前的词法作用域来决定 this，具体来说，箭头函数会继承外层函数调用的 this 绑定(无论 this 绑定到什么)。这 其实和ES6之前代码中的self = this机制一样。</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[提升]]></title>
      <url>http://yoursite.com/2017/01/30/%E6%8F%90%E5%8D%87/</url>
      <content type="html"><![CDATA[<blockquote>
<p>我们都知道<em>对于任何声明在某个作用域内的变量，都将属于某个作用域</em>。但是对于JS而言，变量的声明与作用域还存在一种微妙的联系，这种联系我们叫做<strong>提升</strong>。</p>
</blockquote>
<p>首先来看一个例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(name); <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'limoer'</span>;</span><br><span class="line">age = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> age;</span><br><span class="line"><span class="built_in">console</span>.log(age); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure></p>
<p>这个例子很好的体现了<em>提升</em>，输出name的时候，由于变量的声明在输出语句之后，想当然的使用RHS查找，查找失败抛出错误。但实际情况却输出了undefined，这是因为对于变量name，其声明被提升了，但是赋值语句却没提前，所以输出undefined。而对于age变量，赋值在输出前，我们理所应当的认为前面的赋值会被覆盖，但是程序却出乎意料的输出了2，这同样是因为变量age的声明提升到了首部，然后再进行赋值，最后输出了结果2。</p>
<p>上面的例子可以改写成这样：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name;</span><br><span class="line"><span class="built_in">console</span>.log(name);</span><br><span class="line">name = <span class="string">'limoer'</span>;</span><br><span class="line"><span class="keyword">var</span> age;</span><br><span class="line">age = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(age);</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>其实，对于提升的讨论就是“先有蛋还是先有鸡”的讨论，通过上面的分析，显然我们可以得出“先有蛋（声明），后有鸡（赋值）”的结论。</p>
</blockquote>
<p>继续看一个例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">foo(); <span class="comment">// call foo</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'call foo'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">bar(); <span class="comment">// TypeError</span></span><br><span class="line"><span class="keyword">var</span> bar = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'call bar'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这个例子说明了三个问题：<br>（1）函数声明存在提升；<br>（2）函数表达式不存在提升；<br>（3）每个作用域都会存在提升。<br>这里我只想解释一下为什么上面运行<em>bar()</em> 抛出类型错误，由于变量声明存在提升，所以实际执行的是下面的代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bar;</span><br><span class="line">bar();</span><br><span class="line">bar = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;...&#125;</span><br></pre></td></tr></table></figure></p>
<p>由于<em>bar</em>的提升，调用bar()的时候并没有发生赋值操作，此时bar为undefined，所以对undefined进行函数调用会抛出一个TypeError而不是ReferenceError。</p>
<blockquote>
<p>那么问题来了，既然变量和函数声明都存在提升，那么当这两个同时出现的时候，谁的优先级更高呢？</p>
</blockquote>
<p>同样，写一个例子如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">foo(); <span class="comment">// call foo function</span></span><br><span class="line"><span class="keyword">var</span> foo;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'call foo function'</span>);</span><br><span class="line">&#125;</span><br><span class="line">foo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'call foo expressions'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>好了，我们得出的结论是：函数声明提升的优先级更高。</p>
<p>注意：这里尽管foo的声明在函数foo声明之前，但是由于存在这样的规则所以被当做重复声明被忽略了，但是如果是函数声明，照样可以覆盖前面的声明。</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>ES6引入的const和let关键字的一大特点就是使用这两个关键字声明的标识符<strong>不存在提升</strong>，这就意味着无法引用未声明的标识符，从而可以避免由提升带来的一些列问题。</p>
<p>对于<code>var a = 1;</code>这样常见的变量声明方式，我们应该把它想象成两个步骤：首先是在预编译阶段对变量a进行声明，接下来是执行阶段，对a进行赋值，而提升则是将所有的声明“移动”到作用域顶部的过程。加油！</p>
]]></content>
      
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JS作用域浅析]]></title>
      <url>http://yoursite.com/2017/01/28/JS%E4%BD%9C%E7%94%A8%E5%9F%9F%E6%B5%85%E6%9E%90/</url>
      <content type="html"><![CDATA[<blockquote>
<p>我们都知道，JS的作用域其实包含了一系列的<strong>气泡</strong>，这些<strong>气泡</strong>包含了标识符(函数和变量)的定义,而这些气泡相互嵌套并且整齐排列。而在JavaScript中，这种气泡指的是<strong>函数作用域</strong>和<strong>块级作用域</strong>。</p>
</blockquote>
<h3 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h3><p>函数作用域是JS中最基本也是最常见的一种作用域。所谓函数作用域，指的是在函数声明的过程中产生的一个“气泡”，这个“气泡”可以包含标识符。</p>
<p>来看一个例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 失败</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 失败</span></span><br><span class="line">bar(); <span class="comment">//失败</span></span><br></pre></td></tr></table></figure></p>
<p>在上面的这段代码中，函数foo所形成的作用域包含了标识符变量<em>a</em>以及函数<em>bar</em>,而函数<em>bar</em>所形成的作用域包含了变量<em>b</em>。当然，全局作用域中也包含标识符<em>函数foo</em>。</p>
<p>当然，就像上面程序的运行结果一样，直接访问变量a，b，函数bar都将失败。因为在函数作用域中，其声明的变量和函数中能在其内部(包含嵌套的作用域)使用。</p>
<p>由于函数作用域的特性，将会带来很多优点，譬如函数作用域可以隐藏函数内部的实现(非常重要)，也可以避免变量在声明过程中产生的冲突以及覆盖。</p>
<h3 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h3><p>有Java学习经验的童鞋对<em>块级作用域可谓是了解</em>，然而在JS中，块级作用域可不是那么常见(至少是在ES6出现以前)。</p>
<p>在let和const关键字出现以前，如果想找到块作用域的影子，那么只有with和try…catch语句了。</p>
<p>with关键字是JS块作用域的一个典型，在该作用域的范围内声明的变量都只在with语句块中有效。</p>
<p>而块作用域的另一个应用则是在try…catch中，相信即使对JS不够了解的童鞋都知道异常处理，对于JS中的try…catch语句，在catch块中将会产生一个err对象，而这一个对象只能在catch块中才能使用。看下面一个例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showName</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  showName()</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'end'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(e);</span><br></pre></td></tr></table></figure></p>
<p>上面的这个例子showName函数内部试图打印一个并不存在的变量name，这里将使用一个RHS查找，并且在失败后抛出一个引用错误，我们可以在catch捕获到这个错误对象，但是我们没法在全局作用域上使用这个错误对象。</p>
<p>好了，除了这两个使用<em>块作用域</em>的典型，在ES6标准中，还新增了let和const关键字来实现块作用域。这里简单介绍一下，对ES6感兴趣的的童鞋们可以点<a href="http://es6.ruanyifeng.com/" target="_blank" rel="noopener">这里</a>来进一步了解ES6。</p>
<p>let和const都是有别于var的另外两种声明方式，let用于声明变量，该变量将会被绑定在{…}中，也就是说使用let声明的变量具有块级作用域。使用let声明的变量不但具有块级作用域，同时变量也不会提升。而const则用于声明常量，同样具有块级作用域，并且也不存在提升。let可以很好的用于循环，防止变量对于环境的污染。</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>函数是JS中最常见的作用域，声明在函数内部的变量和函数将会被很好的隐藏起来，这是一种良好的设计原则。而在ES6中，块级作用域再次被人们所日常使用。块作用域到底是不是函数作用域的替代方案，我认为到目前为止，不是！我们应该自己选择使用何种作用域，如何结合使用这两种作用域，来创造更加可读和健壮的程序。</p>
]]></content>
      
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[词法作用域]]></title>
      <url>http://yoursite.com/2017/01/27/%E8%AF%8D%E6%B3%95%E4%BD%9C%E7%94%A8%E5%9F%9F/</url>
      <content type="html"><![CDATA[<blockquote>
<p>作用域模式有两种，一种是词法作用域，另一种是动态作用域，JavaScript采用的是词法作用域。</p>
</blockquote>
<p>大部分的编译器会在编译阶段把程序进行词法化，也就是会对源代码中的字符进行解析，并且赋予词语语义。简单来讲，词法作用域就是词法阶段的作用域，词法作用域是由你在写代码时讲变量和块写在哪里决定的，当词法分析器在处理代码时会保持作用域不变。</p>
<p>考虑下面的代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">'limoer'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showNameAPI</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> city = <span class="string">'Chongqing'</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">showCity</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> cid = <span class="string">'CN'</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(city + cid);</span><br><span class="line">  &#125;</span><br><span class="line">  showCity();</span><br><span class="line">  <span class="built_in">console</span>.log(name);</span><br><span class="line">&#125;</span><br><span class="line">showNameAPI(name)</span><br></pre></td></tr></table></figure></p>
<p>这个代码一共包含三个逐级嵌套的作用域，全局作用域中声明了变量name，全局函数showNameAPI,函数作用域中showNameAPI所创建的作用域，包含标识符city以及showCity，最后是showCity创建的作用域,包含了标识符cid。</p>
<p>作用域查找会在找到第一个匹配的标识符时停止。这里的查找是由内而外的，并且在多级嵌套的作用域内可以定义同名的标识符，但是会产生覆盖。因为<strong>作用域查找的规则就是找到第一个匹配的标识符后停止</strong>。</p>
<p>无论函数在哪里被调用，也无论其是怎么被调用的，其词法作用域只与其被声明的位置有关。</p>
<h3 id="欺骗词法"><a href="#欺骗词法" class="headerlink" title="欺骗词法"></a>欺骗词法</h3><p>上面说到词法作用域是在是完全在书写代码是就已经决定，但是也可以通过下面的两种方式在运行时来改变词法作用域。</p>
<p>当然，不出意外的，这两种方式会是不那么讨人喜欢的eval()和with。</p>
<p>我们首先来回顾一下eval()，这个函数接收一个字符串作为参数，这个字符串好像是运行时写在这里的代码一样。这明显是一种词法欺骗，其假装是在书写期间就在那里，而在运行时修改词法作用域。但是引擎对此并不知情，所以其依旧照常按照词法作用域进行查找。<br>看一个例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">'limoer'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showName</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">eval</span>(str);</span><br><span class="line">  <span class="built_in">console</span>.log(name);</span><br><span class="line">&#125;</span><br><span class="line">showName(<span class="string">"var name = 'lindo'"</span>) <span class="comment">// lindo</span></span><br></pre></td></tr></table></figure></p>
<p>eval(‘name=”lindo”‘)会被引擎误认为在书写时就在那里，由于执行了上面的语句，此时name的值已经被修改了，并且产生了覆盖，遮蔽了外部同名的变量name。</p>
<p>在默认的情况下，如果eval中所执行代码中存在一个或者多个申明，其就会对eval()所处的作用域进行修改。无论何情况，eval(..) 都可以在运行期修改书写期的词法作用域。</p>
<p>再来谈with关键字，我们都知道with关键字用于重复引用一个对象的多个属性的快捷方式，而不需要重复引用对象本身。<br>看下面的代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'limoer'</span>,</span><br><span class="line">  age: <span class="number">20</span>,</span><br><span class="line">  city: <span class="string">'Chongqing'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(obj.name)</span><br><span class="line"><span class="built_in">console</span>.log(obj.age)</span><br><span class="line"><span class="built_in">console</span>.log(obj.city)</span><br><span class="line"><span class="comment">// 重复</span></span><br><span class="line"><span class="keyword">with</span>(obj)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(name);</span><br><span class="line">  <span class="built_in">console</span>.log(age);</span><br><span class="line">  <span class="built_in">console</span>.log(city);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>上面的这段代码突出了with关键字优点，它可以简化我们的代码，但是我们这里谈的是with关键字的词法欺骗，看下面一个例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">info</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">with</span>(obj)&#123;</span><br><span class="line">    name = <span class="string">'lindo'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p1 = &#123;</span><br><span class="line">  name: <span class="string">'limoer'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p2 = &#123;</span><br><span class="line">  city: <span class="string">'Jinan'</span></span><br><span class="line">&#125;</span><br><span class="line">info(p1)</span><br><span class="line"><span class="built_in">console</span>.log(p1.name) <span class="comment">// 'lindo'</span></span><br><span class="line">info(p2)</span><br><span class="line"><span class="built_in">console</span>.log(p2.name) <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(name) <span class="comment">//lindo!</span></span><br></pre></td></tr></table></figure></p>
<p>上面的这个例子很好的展示了with关键字的词法欺骗，这里创建了两个对象p1和p2，并通过info函数执行with(obj){…}，这里进行了简单的LHS查找，并将新值赋给name属性。但是请注意，这里p2对象并不存在name属性，也不会创建name属性，所以p2.name为undefined；这里很好理解，但是为什么神奇的是竟然多出了一个全局变量name呢!？</p>
<p>这里执行with(obj){…}的时候，执行的LHS查找，所以当查找不成功时自动隐式创建一个全局变量，如果这样考虑，那么出乎意料的name属性就不难理解了。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>JavaScript拥有的是词法作用域，所谓的词法作用域就是在进行词法分析时的作用域，也就是说，JS的作用域在代码一旦书写完成就能确定(靠书写位置来确定)。词法作用域的理解很简单，但是我们还是需要注意使用eval()和with语句带来的词法欺骗的原因。也许有人会说，在运行时修改词法作用域有利于实现复杂的功能，又利于扩展，何乐而不为呢？可我们在前面提到，在进行编译的时候，JS引擎会对代码进行优化，而这个优化则是根据代码的词法作用域，预先确定变量和函数的位置，才能在执行过程中快速找到标识符。而eval()和with的出现则有可能打破这样的格局，因为引擎在词法分析阶段并不能知道传入的代码到底是什么，会对词法作用域造成怎样的影响。所以，一切优化都是徒劳的，因为在运行时谁都不能确定此时此法作用域到底是怎么样的，所以JS引擎并不会进行优化，导致代码运行缓慢，性能并不好。所以，尽量不要使用它们。</p>
]]></content>
      
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[理解作用域]]></title>
      <url>http://yoursite.com/2017/01/27/%E7%90%86%E8%A7%A3%E4%BD%9C%E7%94%A8%E5%9F%9F/</url>
      <content type="html"><![CDATA[<blockquote>
<p>JS作用域的问题是老生常谈的问题了，我们都知道JS是不存在块级作用域的(ES6以前，try…catch是一个例外)，可是仍然实际编程过程中由于对作用域的理解不够深刻，踩坑无数，苦不堪言，恰逢寒假，又到了充(wan)电(shuai)的时间，所以把学习的重点放在认识JS语言本身上面。参考了资料《你不知道的JavaScript》。</p>
</blockquote>
<h3 id="实例为先"><a href="#实例为先" class="headerlink" title="实例为先"></a>实例为先</h3><p>首先，我们以var a = 1;这一个语句为例，看看这个过程JS到底干了什么。</p>
<p>毫无疑问JS是一门编译型的语言，但它的编译不是提前编译的，编译过程一般发生在语句执行前几个微秒。并且其和其它典型的编译语言一样，编译的步骤是相似的。首先编译器会把语句进行分词，分成单个的代码块，这些代码块被称为词法单元；接下来编译器会把词法单元流转换成一个由元素逐级嵌套所组成的代表了程序语法结构的树，这棵树被称为”抽象语法树AST”；最后一步，代码生成，该过程会把AST转换成可执行代码(机器指令)。</p>
<p>当然，JS的编译过程不会如此简单，其也会包含性能优化等。但这些所有的工作都在执行前几个微秒的时间内完成，并且立即执行它。</p>
<p>在正式的开始了解作用域之前，我们首先认识一下代码在执行时所需要的工具。</p>
<ol>
<li>引擎：负责代码编译到执行过程</li>
<li>编译器：负责词法分析和可执行代码的生成等</li>
<li>作用域：负责收集并维护由所有声明的标识符(变量)组成的一列查询，并实施一套非常严格的规则，确定当前执行的代码对这些标识符的访问权限</li>
</ol>
<p>现在开始对var a = 1的执行进行分解：</p>
<p>首先编译器会把这段程序分成词法单元，并且构建AST，当遇到var a的时候，首选编译器会询问作用域，是否已经已经有一个同名的变量存在于这个作用域集合中，如果存在则忽略该语句，否则在该作用域申明一个变量，命名为a；接下来，编译器会为引擎生成可执行代码，用于处理a=1这个赋值操作，引擎会询问当前的作用域是否存在一个名字为a的变量，如果存在，则使用这个变量，否则继续操作。最终，如果找到变量a，则给其赋值为1，否则将抛出错误。</p>
<p>总结：在对变量赋值时会存在两个步骤：首先编译器会在作用域中生成一个变量；然后引擎在运行时查找该变量，如果存在就赋值，否则抛出错误。</p>
<h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>1.嵌套作用域：作用域嵌套这个概念是很好理解的，当一个块嵌套在另一个块或函数中的时候，就会发生作用域的嵌套。当在当前作用域无法找到某个变量的时候，引擎就会在外层的嵌套作用域中寻找，知道抵达到最外层作用域或者找到了该变量为止。</p>
<p>考虑以下代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">b</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a + b)</span><br><span class="line">&#125;</span><br><span class="line">add(<span class="number">2</span>) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure></p>
<p>对变量a的查找是无法在add函数内部完成的，所以引擎会向上层作用域中查找，并且在外层作用域中找到。</p>
<h3 id="LHS-amp-amp-RHS"><a href="#LHS-amp-amp-RHS" class="headerlink" title="LHS &amp;&amp; RHS"></a>LHS &amp;&amp; RHS</h3><p>引擎查找变量时常用的两种查找方式，这里需要注意的，如果执行右侧查找，无法找到该变量则会抛出引用错误。而进行左侧查找的时候，如果不成功，则会<strong>自动</strong>的隐式创建一个全局变量(都是在非严格模式下)</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>简单来说，作用域就是一系列的规则，这套规则用于管理引擎如何在当前作用域以及嵌套的<strong>子域</strong>中根据标识(zhi)符名称进行变量的查找。</p>
<p>下一篇，将深入的学习<em>词法作用域</em></p>
]]></content>
      
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[我们的世界]]></title>
      <url>http://yoursite.com/2017/01/26/%E6%88%91%E4%BB%AC%E7%9A%84%E4%B8%96%E7%95%8C/</url>
      <content type="html"><![CDATA[<p>最近看了一部叫做《我们的世界》的韩国剧情片，讲的是这样一个故事：</p>
<blockquote>
<p>主人公李善被人孤立，没人愿意和她组队玩集体游戏，她总是最后一个被无奈选中，也不出意料的第一个被淘汰，然后孤苦伶仃的站在一旁，不知道是不是要离开。她在学期末结识了转校生韩智雅，不知道这是不是她结交的第一个朋友，但的确度过了一个快乐的假期。智雅父母离异，却在李善家中看到了温诺的家，于是心生情愫，逐渐远离李善，结交了新的朋友。从好朋友到最熟悉的陌生人，李善就这样在新学期开始，再次被孤立。而韩智雅为了不被大家孤立，不但选择装作不认识李善，反而和班上同学一起排挤她，这让李善儿感到很苦恼。父母的不知情以及后面的一系列的事，让她们两个的关系越来越糟糕。韩智雅成为班上的学霸，而李善也成为了以宝拉为首的小团体利用攻击智雅的工具。最终两人走上了互相伤害的道路，智雅说善儿的父亲是酒鬼，而李善儿反击，把自己知道的智雅撒谎的真相公之于众。最后的最后，一直被孤立的李善还是继续被孤立，而韩智雅也成为那个被孤立的人。故事的最后，班上又开始玩丢球游戏，这次大家不想和两个人玩游戏，李善率先被淘汰，站在一边，韩智雅被诬蔑，李善主动站出来为她说话，避免了僵持不下的尴尬和无助。最后两人站在场边，不时偷望对方。我不禁有这般假设，假如没有选择离开，如今又会怎样？可惜小孩子的思想太过复杂，捉摸不透。电影戛然而止，关于她们两个最终和好的画面留给观众去想。</p>
</blockquote>
<p>好了，故事讲完了。李善儿和韩智雅最终还是被孤立，成为了校园冷暴力的受害者。回到现实，我也像她们俩一样，成了受害者，并且顺利的长大了。</p>
<h2 id="故事是这样的"><a href="#故事是这样的" class="headerlink" title="故事是这样的"></a>故事是这样的</h2><p>过了这么多年，对小学和初中那段时光的记忆很微弱了。直到前些日子，小学群里面，有人发了一张毕业照照片，照片中的我站在人群的中央，探出一个脑袋，不注意真还发现不了这个瘦小的孩子。而到了快过年的时间，这个群就特别活跃，我却发现，我根本插不上一句话，好不容易找到一个机会发了一条消息，却被无视了，我开始回想，那段小学的日子里，我也经常这样被忽视，也许到现在，他们根本不记得了我了。</p>
<p>我开始回想上小学的那段时光。低年级的时候，我是班上再平常不过的，个子矮小，学习成绩一般，零花钱少，还特别闷。在我的印象中，那个时候我经常中午要去外婆家吃饭，来回的路上会有很多的孩子，但是没人愿意和我一起走，如果我走过去主动和他们说话他们就跑，或者打我。直到后来，我来回的路上终于有了一个伴，那是外婆村子里读小学的一个半傻子(我也不知道该怎么形容)，我们一起在小河沟捉鱼，玩弹珠，可也因为这样，其他孩子更不愿与我玩。那时候的我，却没有如电影里两个女孩子那样琢磨不透的小心思，只好选择沉默。</p>
<p>好吧，最终我还是有了第二个(第一个是外婆村子里的傻子)好朋友，在我三年级的时候，我和安静的同桌成为了好朋友，我们很多时候会在放学时候一起回家(貌似还不顺路)，开始的时候，我们都不怎么说话，可我发现一个人的字可以写得那么工整，一个人的画可以画得那么漂亮，我开始主动找她说话，后来我们两个人之间似乎有说不完的话，每到下课，我们才不会去和其他同学一样，逛零食店，打乒乓球，玩跳绳。可这段时间没过多久，我的第二个朋友一年后转校离开了。我又开始了被孤立的时光，知道逐渐的适应这样的生活。</p>
<p>这种情况直到小学六年级才得到转机，我的学习成绩也越来越好，我的一个亲戚成了我的班主任，他也很关照我。我虽然依然很闷，但是还是想逃离被孤立。为了融入坏孩子团体，我也开始变‘坏’，我开始在学校小卖店赊账，大部分都是请同学吃了零食；我开始和他们放学不回家跑到网吧去玩，这也是我最开始接触到网络的时候。可即便是这样，我仍然无法摆脱不了被孤立，我能够打很好的乒乓球但是没人愿意加我一个，我也能玩弹珠，但是又有人和我玩？</p>
<p>后来，大家都升入了初中，整个初中我都是在极力的融入这个环境，总在坏孩子和好学生的角色切换，这样的生活我过了三年。初中毕业后，我只身一人去了一个陌生的学校读书，也就和当初的坏孩子军团失去了联系，也许他们也不记得了，那个曾经总是在帮他们跑腿和揽责(背锅？)的我，这个坏孩子。</p>
<p>我的那段故事讲到这个就要画上一个句号了，因为我在高中结识了最要好的几个朋友，我再也是那个被孤立的对象。虽然在不熟识我的人眼里，我仍然很闷，就像刺猬一样，让人不得接近，可现实中的我，不是这样😂</p>
<h2 id="那么，我到底想说什么"><a href="#那么，我到底想说什么" class="headerlink" title="那么，我到底想说什么"></a>那么，我到底想说什么</h2><p>我相信在小时候的学生时代，被迫承受孤独的还有很多人。他们是多么渴望有个人成为他们的朋友，玩伴。可奈何无论怎么努力，却还是一再的被孤立。大概是因为差异，微小的差异让我们成为了受伤害的对象。也许是因为我矮小，抑或是我长得丑，家庭条件不好，甚至因为我成绩好…这些都成为了我们被排挤的理由。我们在任何时间段都会受到这样的伤害，成人学会了忍耐，而对于小孩子，他们很多就像李善和韩智雅一样，最终互相伤害。当我们还小时，因该是我们率真的时候，我们的小心思却伤害了我们。当然，这一切的一切，学校和家长并不知情，这样的伤害也许就会持续下去，伴我们成长。</p>
<h2 id="小尾巴"><a href="#小尾巴" class="headerlink" title="小尾巴"></a>小尾巴</h2><p>我是先看完简介的时候再看电影的，整个过程我心情很失落，我看到了我的小时候，我并没有被无尽的孤立的所吞噬，我也没有反抗去伤害他人，反而我适应了这样的生活，逐渐的我习惯了过一个人的生活。直到现在，当独处的时候，我会回想，如果如曾经厌倦了无尽的孤立选择伤害反抗，抑或是我本身就是孤立别人的’坏孩子’，如今我又怎样。奈何时间没有倒带，人生不会从头再来。</p>
]]></content>
      
        
        <tags>
            
            <tag> 心灵记事 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[React全家桶网络学习资源汇总]]></title>
      <url>http://yoursite.com/2016/12/12/React%E5%85%A8%E5%AE%B6%E6%A1%B6%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>不知不觉，学习React时间已经超过三个月了。虽然这几个月断断续续，也算把我所了解的React全家桶学习了一遍，虽然我现在还是什么都不会😂<br>好了，接下来，我会把我学习过程中用到的一些网络资源都整理在这篇文章里面，分享给大家。</p>
<h2 id="学习react之前"><a href="#学习react之前" class="headerlink" title="学习react之前"></a>学习react之前</h2><p>学习react之前，你最好有js(ES6)的基础，下面是JS学习资料搜集汇总。<br>两本来自于阮一峰大神的开源书籍：<br>JavaScript标准参考教程<a href="http://javascript.ruanyifeng.com/" target="_blank" rel="noopener">这里</a><br>ES6入门指南<a href="http://es6.ruanyifeng.com/" target="_blank" rel="noopener">强烈推荐，看过实体书，ES6入门很实用</a><br>来自廖雪峰的官方网站的JS教程<a href="http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000" target="_blank" rel="noopener">特别适合快速入门和新手回顾</a></p>
<p>JavaScript Promise迷你书<a href="http://liubin.org/promises-book/#introduction" target="_blank" rel="noopener">全面了解Promise的书籍</a><br>深入理解JavaScript系列<a href="http://www.cnblogs.com/TomXu/archive/2011/12/15/2288411.html" target="_blank" rel="noopener">汤姆大叔翻译，比较全面，值得推荐</a></p>
<h2 id="react学习"><a href="#react学习" class="headerlink" title="react学习"></a>react学习</h2><p>需要明确的一点的是，学习react最好的方式是阅读官方文档，这里列出一些资源，可作为学习的参考和补充：<br>react入门实例教程<a href="http://www.ruanyifeng.com/blog/2015/03/react.html" target="_blank" rel="noopener">没错，还是来自于阮一峰大神</a><br>Learn React &amp; Webpack by building the Hacker News front page<a href="https://github.com/theJian/build-a-hn-front-page" target="_blank" rel="noopener">强烈推荐，手把手教你构建一个前端页面</a><br>react-组件生命周期详解<a href="http://blog.csdn.net/slandove/article/details/50748473" target="_blank" rel="noopener">当我很混淆的时候，就是看这篇博文弄懂的</a><br>React入门：关于JSX语法<a href="http://www.css88.com/archives/5632" target="_blank" rel="noopener">虽然JSX很好理解，但是还是推荐一篇吧，比较详细了</a><br>React入门<a href="http://zexeo.com/home" target="_blank" rel="noopener">来自则修网的视频教程，一共有两门教程，这一门非常适合入门</a><br>react文档<a href="https://hulufei.gitbooks.io/react-tutorial/content/introduction.html" target="_blank" rel="noopener">中文翻译版本，推荐结合英文文档使用</a></p>
<h2 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h2><p>webpack作为一个打包工具，如今已经十分出色。<br>一小时包教会 —— webpack 入门指南<a href="一小时包教会 —— webpack 入门指南">不敢保证一小时能不能教会，但是写得还是很详细，值得一看</a><br>webpack中文文档(类似于官方文档，比较详细的介绍了webpack的方方面面)(<a href="http://webpackdoc.com/" target="_blank" rel="noopener">http://webpackdoc.com/</a>)</p>
<h2 id="flux-amp-redux"><a href="#flux-amp-redux" class="headerlink" title="flux &amp; redux"></a>flux &amp; redux</h2><p>Flux 架构入门教程<a href="http://www.ruanyifeng.com/blog/2016/01/flux.html" target="_blank" rel="noopener">阮一峰大神目前专注于react啊，什么都有他</a><br>Redux 入门教程<a href="http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_one_basic_usages.html" target="_blank" rel="noopener">还是阮一峰的</a><br>Redux Tutorial 中文翻译<a href="https://github.com/xiaomoer/redux-tutorial-cn" target="_blank" rel="noopener">适合没有耐性看完官方文档的同学</a><br>Redux中文文档<a href="http://www.redux.org.cn/" target="_blank" rel="noopener">英文翻译版，适合英语基础较薄弱的同学观看,貌似还可以下载下来</a><br>redux其他学习资源<a href="https://github.com/xiaomoer/awesome-redux" target="_blank" rel="noopener">我fork的</a></p>
<h2 id="mocha-amp-chai"><a href="#mocha-amp-chai" class="headerlink" title="mocha &amp; chai"></a>mocha &amp; chai</h2><p>测试框架Mocha 实例教程<a href="http://www.ruanyifeng.com/blog/2015/12/a-mocha-tutorial-of-examples.html" target="_blank" rel="noopener">不用我说来自哪里了吧</a><br>官方文档<a href="http://mochajs.org/" target="_blank" rel="noopener">最好的学习教程</a><br>chai<a href="http://chaijs.com/api/" target="_blank" rel="noopener">强大的断言库，学习途径目前只有中文文档</a></p>
<h2 id="react单元测试-amp-enzyme"><a href="#react单元测试-amp-enzyme" class="headerlink" title="react单元测试 &amp; enzyme"></a>react单元测试 &amp; enzyme</h2><p>React 测试入门教程<a href="http://www.ruanyifeng.com/blog/2016/02/react-testing-tutorial.html" target="_blank" rel="noopener">点这里</a><br>enzyme <a href="https://www.gitbook.com/book/imbubble/enzyme-docs/details" target="_blank" rel="noopener">是用于react单元测试的一个库，类jquery的风格，比官方那一套写起来顺手多了，推荐.</a></p>
<h2 id="react-router-amp-其他"><a href="#react-router-amp-其他" class="headerlink" title="react-router &amp; 其他"></a>react-router &amp; 其他</h2><p>React Router 是完整的 React 路由解决方案<br>React-Router中文文档<a href="http://react-guide.github.io/react-router-cn/" target="_blank" rel="noopener">看这个就够了</a></p>
<p>immutable.js是一个数据不可变的一个库，据说结合React可以让性能提升十倍,学习的时候有了解过.<br><a href="https://www.w3ctech.com/topic/1595" target="_blank" rel="noopener">Immutable 详解及 React 中实践</a><br><a href="http://facebook.github.io/immutable-js/docs/" target="_blank" rel="noopener">官方文档</a></p>
<p>lodash 其实不属于react全家桶成员(虽然我觉得inmutable也不是),但是作为一个高性能和模块化的JS工具库，值得大家去了解和使用<br><a href="http://lodashjs.com/docs/" target="_blank" rel="noopener">中文文档,未翻译完全版本</a></p>
<h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>上面的资料和文档也许可以很容易就能通过baidu或者其他什么的得到，我算是列举了我学习时候参考的资料吧，不一定适合大家，也许有更适合入门的资料只是我没找到而已。上面列举的也并不是react全家桶的所有技术，包括css-module，覆盖率测试这些我也是刚刚才了解，并没有深入的使用，所以我这里就不列出了。在我看来，react发展到现在，已经不能说其只是一个前端框架的view层了，它是一个技术栈，一种解决方案，并且只有使用其全家桶才能发挥出其威力，作为一个前端初学者而言，这个过程并不会太痛苦，因为我们并没有对传统的web开发思维根深蒂固，所以如果你想学习react，不妨放下心中的顾虑，现在就开始。</p>
<p>学习react不难，但是真的想写好react太难了，angular也是，vue也是，所以不要轻易说你学会了它们。我们仅仅是轮子的使用者而已，可我真想哪天我也能成为造轮子的人，加油！</p>
]]></content>
      
        
        <tags>
            
            <tag> React </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用webpack+npm进行React开发]]></title>
      <url>http://yoursite.com/2016/11/19/%E4%BD%BF%E7%94%A8webpack-npm%E8%BF%9B%E8%A1%8CReact%E5%BC%80%E5%8F%91/</url>
      <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>这一期的知识我早就想写了，因为在学习React之初，心里面就有很多疑问，当然其中一个就是：我能不能不把所有的Component写在一个文件中，当然后面没有关注这样的问题，直到前些日子学习Flux才重视起来，恰逢周六，在这里写一篇，关于如何使用webpack+npm进行React开发。</p>
<h2 id="webpack–脚手架工具而已"><a href="#webpack–脚手架工具而已" class="headerlink" title="webpack–脚手架工具而已"></a>webpack–脚手架工具而已</h2><p>在这里我并不打算详细介绍webpack如何使用，webpack只是一个前端脚手架工具而已，在进行React开发的时候，我们只是使用babel转换ES6的代码而已，但是webpack也是一个好用而简单的打包工具，想了解更多关于webpack的知识，点击<a href="http://webpackdoc.com/index.html" target="_blank" rel="noopener">这里</a>。<br>好吧，正式开始吧！<br>首先我们需要安装node 和 npm, 因为webpack也是依赖node的，安装好node和npm后我们就可以开始安装webpack了，首先安装webpack：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g webpack</span><br></pre></td></tr></table></figure></p>
<p>当然这里你也可以不全局安装，使用<code>npm init</code>初始化一个package.json文件，使用<code>npm install --save webpack</code>安装。</p>
<p>这里我将会跳过使用命令进行打包，直接进到使用配置管理文件就好了，如果想更深层次的了解webpack，点击上面的介绍咯(真的很详细)。</p>
<p>首先介绍一下这个配置文件，默认命名为webpack.config.js，其是一个node的文件，就像如下的这个样子。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">	</span><br><span class="line">	<span class="built_in">module</span>.exports = &#123;</span><br><span class="line">		entry: <span class="string">'./base.jsx'</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: <span class="string">'./output.js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">    	loaders:[</span><br><span class="line">    		&#123;</span><br><span class="line">            test: <span class="regexp">/\.jsx?$/</span>,</span><br><span class="line">            exclude: <span class="regexp">/(node_modules|bower_components)/</span>,</span><br><span class="line">            loader: <span class="string">'babel'</span>,</span><br><span class="line">            query: &#123;</span><br><span class="line">                presets: [<span class="string">'es2015'</span>,<span class="string">'react'</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    	]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>好吧，介绍一下上面的这个文件到底描述了些什么，首先我们输出了一个配置对象，<code>entry</code>定义了要引入的文件，当然如果需要引入多个文件的话可以使用一个数组。<code>output</code>顾名思义定义要输出的文件名，这里可以把它理解为打包好存放的文件。<br>最后，下面的这个<code>module</code>属性用于定义加载器，比如我们需要使用babel来吧jsx转为普通的js代码，test属性表示给所有匹配的jsx执行解析，<br>exclude表示将会不解析node模块和通过bower安装的模块。loader表示使用解析工具，query则表示的扩展参数，这里表示应用es6和react的解析规则。<br>好了，对示例文件的简单介绍就告一段路，当然还有一个属性plugins，用于使用插件，有关插件的使用请移至官方文档。</p>
<h2 id="搭建react的开发环境"><a href="#搭建react的开发环境" class="headerlink" title="搭建react的开发环境"></a>搭建react的开发环境</h2><p>细心的童鞋可以发现了，上面我演示的配置文件就是一个用于开发react的基本配置文件。好吧，直接开始，首先安装react，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install --save react</span><br><span class="line">npm install --save react-dom</span><br></pre></td></tr></table></figure></p>
<p>接着安装babel用于解析jsx和es6，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save babel-loader</span><br></pre></td></tr></table></figure></p>
<p>最后安装一些解析规则<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install babel-plugin-transform-es2015-arrow-functions --save-dev</span><br><span class="line">npm install babel-preset-es2015 --save-dev</span><br><span class="line">npm install babel-preset-react</span><br></pre></td></tr></table></figure></p>
<p>到这里，我们就安装完了开发react所需要的模块了，好吧，直接进入最后一步，在这里我将写一个和小很小的例子</p>
<h2 id="一个栗子"><a href="#一个栗子" class="headerlink" title="一个栗子"></a>一个栗子</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;render&#125; <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InputComp</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">	<span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">		<span class="keyword">super</span>(props);</span><br><span class="line">		<span class="keyword">this</span>.handleChange = <span class="keyword">this</span>.handleChange.bind(<span class="keyword">this</span>);</span><br><span class="line">		<span class="keyword">this</span>.state = &#123;</span><br><span class="line">			value: <span class="string">''</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	handleChange(e)&#123;</span><br><span class="line">		<span class="keyword">var</span> newvalue = e.target.value.trim();</span><br><span class="line">		<span class="keyword">this</span>.setState(&#123;<span class="attr">value</span>: newvalue&#125;)</span><br><span class="line">	&#125;</span><br><span class="line">	render() &#123;</span><br><span class="line">		<span class="keyword">return</span> (</span><br><span class="line">			&lt;div&gt;</span><br><span class="line">				&lt;input ref=<span class="string">"name"</span> type=<span class="string">"text"</span> defaultValue=&#123;<span class="keyword">this</span>.props.tag&#125; onChange=&#123;<span class="keyword">this</span>.handleChange&#125;/&gt;</span><br><span class="line">				&lt;p&gt;&#123;<span class="keyword">this</span>.state.value&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">			&lt;/</span>div&gt;</span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">InputComp.propTypes = &#123;</span><br><span class="line">	tag: React.PropTypes.string.isRequired</span><br><span class="line">&#125;</span><br><span class="line">InputComp.defaultProps = &#123;</span><br><span class="line">	tag: <span class="string">'输入点什么东西吧！'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> tag = <span class="string">'请输入'</span>;</span><br><span class="line">render(<span class="xml"><span class="tag">&lt;<span class="name">InputComp</span> /&gt;</span>,document.getElementById('app'));</span></span><br></pre></td></tr></table></figure>
<p>上面的小例子来源于react首页上面的一个例子，这里使用react的写法，对es6不是很了解的童鞋可以点<a href="http://es6.ruanyifeng.com/" target="_blank" rel="noopener">这里</a>,关于适用ES5开发react和使用es6开发有什么区别，可以看我的上一篇博客，这里就不做过多的介绍，<br>接下来，使用webpack进行打包就好了，使用上面举例的config文件，运行命令<code>webpack</code>就可以了，然后将输出文件引入到html文件中就可以看到效果了，当然如果你不想每一次修改都运行一遍命令的话那就使用监听更新模式，运行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack --progress --watch</span><br></pre></td></tr></table></figure></p>
<p>当你修改完文件后，其会监听到文件的改变而做出增量的修改打包（当然第一次还是得手动打包）</p>
<h2 id="尾巴"><a href="#尾巴" class="headerlink" title="尾巴"></a>尾巴</h2><p>写到这里，这篇文章就算完了，当你一步步完成上面的步骤，你就搭建了一个十分简陋的React开发环境，这里所说的的是简陋，我并没有加载对css文件的打包，这里大家可以根据自己的需求添加不同的loader来完成。作为一个React的初学者，感觉React这一个体系是十分庞大的，庞大到学习React一个多月仍然觉得力不从心，作为一个大三孩纸，每天被上不完的专业课实验课所压着，抽出来学习的时间并不多，再有自身比较懒惰所以…<br>好吧，不多说了，好好努力吧，毕竟路都是自己选的。</p>
]]></content>
      
        
        <tags>
            
            <tag> React </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用ES6语法写React]]></title>
      <url>http://yoursite.com/2016/11/15/%E4%BD%BF%E7%94%A8ES6%E8%AF%AD%E6%B3%95%E5%86%99React/</url>
      <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><blockquote>
<p>最近在学习Redux，不可避免使用npm + webpack的方式来写React Component，由于不是很熟悉ES6踩了很多坑，在这里作为笔记写下来，供以后回顾。 </p>
</blockquote>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>惯例，先写一个例子吧<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">	<span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line">	<span class="keyword">import</span> &#123; PropTypes &#125; <span class="keyword">from</span> <span class="string">'prop-types'</span>;</span><br><span class="line"></span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">InputComp</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">	<span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">		<span class="keyword">super</span>(props);</span><br><span class="line">		<span class="keyword">this</span>.state = &#123;</span><br><span class="line">			name: <span class="string">''</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	handleChange = <span class="function">(<span class="params">e</span>) =&gt;</span>&#123;</span><br><span class="line">		<span class="keyword">var</span> newvalue = e.target.value.trim();</span><br><span class="line">		<span class="keyword">this</span>.setState(&#123;[e.target.name]: newvalue&#125;)</span><br><span class="line">	&#125;</span><br><span class="line">	render() &#123;</span><br><span class="line">		<span class="keyword">const</span> &#123; value &#125; = <span class="keyword">this</span>.state; </span><br><span class="line">		<span class="keyword">return</span> (</span><br><span class="line">			&lt;div&gt;</span><br><span class="line">				&lt;input name=<span class="string">"name"</span> type=<span class="string">"text"</span> value=&#123;value&#125; defaultValue=&#123;<span class="keyword">this</span>.props.tag&#125; onChange=&#123;<span class="keyword">this</span>.handleChange&#125;/&gt;</span><br><span class="line">				&lt;p&gt;&#123;value&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">			&lt;/</span>div&gt;</span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">InputComp.propTypes = &#123;</span><br><span class="line">	tag: PropTypes.string.isRequired</span><br><span class="line">&#125;</span><br><span class="line">InputComp.defaultProps = &#123;</span><br><span class="line">	tag: <span class="string">'输入点什么东西吧！'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>上面是使用ES6语法写的一个简单的Component，有过ES6基础的同学对<code>class</code>, ‘extends’关键字等不会陌生，简单来说，这算是js的语法糖了吧。<br>组件是一个自定义的js对象，在es5中使用React.createClass();在es6中必须继承React.component。</p>
<p>上面的小例子没什么特别的，我们只需要注意两点就好了：<br>对于props,我们不能使用getDefaultProps()来添加默认的props，在ES6中有一个属性defalutProps,同理属性校验器propTypes,我们也必须写在外面，内容都和以前一样。也可以把这两个属性都写在’类’里面，使用static关键字申明.<br>对于state,我们不能使用getInitialState()来设置state的初始值，转而在构造器中使用state属性设置值即可。<br>对于事件而言，this指向的是当前创建的Component对象，所以需要手动绑定。<br>还有一些其他的差别，比如es6支持解构等<br>好吧，简单的就写在这里了</p>
<blockquote>
<p>好忙好忙，语言都没办法组织了!<br>加油！</p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> React </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JS定时器知多少]]></title>
      <url>http://yoursite.com/2016/11/06/JS%E5%AE%9A%E6%97%B6%E5%99%A8%E7%9F%A5%E5%A4%9A%E5%B0%91/</url>
      <content type="html"><![CDATA[<p>在JavaScript中，定时器是一个经常被误用且不被大家所熟识的特性。但在构建应用时其却非常有用。<br>定时器提供了一种让一段代码在一定的时间之后运行的能力。由于JS的单线程特性，其同一时间只能执行一处代码，而定时器跳出了这一性质，以其特有的方式来执行代码。</p>
<p>在浏览器环境当中，window对象下有两组方法，setTimeOut()/clearTimeOut()以及setInterval()/clearInterval()分别用于设置定时器让其在一段时间后执行/让其停止和每隔一段时间就会执行一次/清除该定时器。<br>比如下面的代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">setTimeOut(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="comment">// do somethign</span></span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line">setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="comment">// do this code every 1s</span></span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure></p>
<p>上面的代码分别创建了一个一次执行定时器和循环执行的定时器，每隔一秒钟，function就会被执行一遍</p>
<p>咋一看，setInterval就像周期性执行setTimeout一样，但是他们有很多不同之处。<br>举个栗子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">setTimeOut(<span class="function"><span class="keyword">function</span> <span class="title">repect</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	setTimeOut(repect, <span class="number">100</span>);</span><br><span class="line">&#125;, <span class="number">100</span>);</span><br><span class="line">setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="comment">// do some thing</span></span><br><span class="line">&#125;, <span class="number">100</span>)</span><br></pre></td></tr></table></figure></p>
<p>上面两段代码的功能几乎是一样的，但是实际上却不是。setTimeOut()代码中执行前一个回调结束后100毫秒甚至更多，才会执行下一个回调<br>而setInterval()不一样，每隔100毫秒就会尝试执行，不会受到前面回调的影响。那为什么执行一个setTimeOut()执行回调的时间会更长呢？因为js单线程的特性，当计时时间到，回调函数会被放入执行队列排队，并且执行回调是需要时间的，所以执行时间只会大于设置的时间。setInterval()也一样，但有一点，由于其不关注前一个回调执行的情况，如果一直被延迟，那么setInterval()在可用后会无延迟执行。</p>
<p>好吧，写个栗子证明一下上面的结论：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">'测试setTimeOut执行的时间'</span>)</span><br><span class="line">setTimeOut(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.timeEnd(<span class="string">'测试setTimeOut执行的时间'</span>);</span><br><span class="line">&#125;,<span class="number">1000</span>);</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>执行结果为：<br>测试setTimeOut执行的时间: 1004.673ms</p>
</blockquote>
<p>关于setInterval()的演示和清除定时器的演示这里就不做了。</p>
]]></content>
      
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[浅谈JS闭包]]></title>
      <url>http://yoursite.com/2016/10/21/%E6%B5%85%E8%B0%88JS%E9%97%AD%E5%8C%85/</url>
      <content type="html"><![CDATA[<h2 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h2><p>了解JS的人都知道，在ES6之前JavaScript中只有函数作用域和全局作用域，而没有块级作用域(try…catch是一个例外)。该怎么理解这句话呢？我们先来看一个例子:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++)&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">`i=<span class="subst">$&#123;i&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(i) <span class="comment">// 4</span></span><br></pre></td></tr></table></figure>
<p>当运行完一个for循环后，i=4。由于JS中不存在块级作用域，所以这里在for循环中申明的变量i是一个全局变量，因此可以在外部访问到。<br>现在我们来看下一个例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> name = <span class="string">'limoer'</span>;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">`hello <span class="subst">$&#123;name&#125;</span>`</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	sayHello();</span><br><span class="line">&#125;</span><br><span class="line">init(); <span class="comment">// hello limoer</span></span><br><span class="line"><span class="built_in">console</span>.log(name); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure></p>
<p>这里我们定义了一个函数，函数中申明了一个局部变量<code>name</code>，并且在函数内部定义了一个内部函数<code>sayHello</code>，这个函数只能在函数init内使用，然而<code>sayHello</code>并没有自己的局部变量，但是其可以访问到函数外部的变量，即其父级函数的name变量</p>
<p>通过上面的两个例子可以清楚的知道，变量的作用域完全是由它在源代码中的位置决定的，并且嵌套的函数也可以访问其外层作用域中的变量。</p>
<h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>闭包和变量的作用域息息相关。现在我们来修改上面的这个例子</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> name = <span class="string">'limoer'</span>;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">`hello <span class="subst">$&#123;name&#125;</span>`</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> sayHello</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> sayHelloFunc = init();</span><br><span class="line">sayHello(); <span class="comment">// hello limoer</span></span><br></pre></td></tr></table></figure>
<p>注意修改的地方，我们这次是直接返回这个内部函数，然后在外部执行这个函数。<br>但是，通常来说，当函数一旦运行完成，其局部变量就不可用了，在这里是当执行了<code>var sayHelloFunc = init();</code>后name应该不可用了。但是实际运行情况是成功访问到了<code>name</code>这个属性。</p>
<p>原因是因为这里sayHelloFunc已经成为了一个闭包。它由两部分组成，返回的函数本身以及创建该函数的环境。<br>而所谓的环境是由闭包在创建时其作用域内的变量组成的。对于上面的这个例子，这里的变量就是指的<code>name</code></p>
<p>再看一个闭包的例子<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addSome</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">y</span>)</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(num + y)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> add10 = addSome(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">var</span> add1 = addSome(<span class="number">1</span>);</span><br><span class="line">add10(<span class="number">1</span>); <span class="comment">// 11</span></span><br><span class="line">add1(<span class="number">10</span>); <span class="comment">// 11</span></span><br></pre></td></tr></table></figure></p>
<p>对于上面的这个例子，addSome()做为一个函数工厂产生了两个闭包，它们共享了函数的定义，但是却又保存了不同的环境。</p>
<h2 id="闭包的应用"><a href="#闭包的应用" class="headerlink" title="闭包的应用"></a>闭包的应用</h2><p>通过上面的描述，知道闭包其实就是将函数和其作用环境相互关联起来，达到保存变量的目的。</p>
<p>把上面的例子稍微改一下，我们可以把它用到实践中<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">	&lt;title&gt;<span class="xml"><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp">	&lt;button id="toBlue"&gt;切换背景为蓝色&lt;/</span>button&gt;</span><br><span class="line">	&lt;button id=<span class="string">"toYello"</span>&gt;切换背景为黄色&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">	&lt;button id="toGreen"&gt;切换背景成绿色&lt;/</span>button&gt;</span><br><span class="line">	&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">		<span class="function"><span class="keyword">function</span> <span class="title">changeBgColorTo</span>(<span class="params">type</span>)</span>&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">				<span class="built_in">document</span>.body.style.backgroundColor = type;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;;</span><br><span class="line">		<span class="keyword">var</span> toBlue = changeBgColorTo(<span class="string">'blue'</span>);</span><br><span class="line">		<span class="keyword">var</span> toYellow = changeBgColorTo(<span class="string">'yellow'</span>);</span><br><span class="line">		<span class="keyword">var</span> toGreen = changeBgColorTo(<span class="string">'green'</span>);</span><br><span class="line">		<span class="built_in">document</span>.getElementsById(<span class="string">'toBlue'</span>).addEventListener(<span class="string">'click'</span>, toBlue);</span><br><span class="line">		<span class="built_in">document</span>.getElementsById(<span class="string">'toYellow'</span>).addEventListener(<span class="string">'click'</span>, toYello);</span><br><span class="line">		<span class="built_in">document</span>.getElementsById(<span class="string">'toGreen'</span>).addEventListener(<span class="string">'click'</span>, toGreen);</span><br><span class="line">	&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>上面的例子展示了如何使用闭包来定义公共函数，来减少代码的冗余。</p>
<h2 id="一个常见的错误，使用闭包来解决"><a href="#一个常见的错误，使用闭包来解决" class="headerlink" title="一个常见的错误，使用闭包来解决"></a>一个常见的错误，使用闭包来解决</h2><p>直接贴代码吧：<br>html:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;p id=<span class="string">"help"</span>&gt;Helpful notes will appear here&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;p&gt;E-mail: &lt;input type="text" id="email" name="email"&gt;&lt;/</span>p&gt;</span><br><span class="line">&lt;p&gt;Name: <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"name"</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&lt;p&gt;Age: <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"age"</span> <span class="attr">name</span>=<span class="string">"age"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>js:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showHelp</span>(<span class="params">help</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'help'</span>).innerHTML = help;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setupHelp</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> helpText = [</span><br><span class="line">      &#123;<span class="string">'id'</span>: <span class="string">'email'</span>, <span class="string">'help'</span>: <span class="string">'Your e-mail address'</span>&#125;,</span><br><span class="line">      &#123;<span class="string">'id'</span>: <span class="string">'name'</span>, <span class="string">'help'</span>: <span class="string">'Your full name'</span>&#125;,</span><br><span class="line">      &#123;<span class="string">'id'</span>: <span class="string">'age'</span>, <span class="string">'help'</span>: <span class="string">'Your age (you must be over 16)'</span>&#125;</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; helpText.length; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> item = helpText[i];</span><br><span class="line">    <span class="built_in">document</span>.getElementById(item.id).onfocus = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      showHelp(item.help);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">setupHelp();</span><br></pre></td></tr></table></figure>
<p>上面的代码是我们实际开发过程中非常常见的错误。我们使用循环来给每一个输入框绑定一个事件，从而实现当聚焦到不同的输入框是产生不同的输出。<br>但是，上面的代码显然不能完成这样的工作，因为当循环完成后，此时item已经指向了helpText的最后一项，而给onfocus绑定的是一个匿名函数，当聚焦到某一个输入框时，执行<code>showHelp(item.help)</code>而item早已是<code>helpText</code>中的最后一项了，所以造成了错误.</p>
<p>知道错误后，我们就知道改怎样修改了。我们需要保存运行时的环境，返回一个闭包。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setupHelp</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> 		<span class="keyword">var</span> helpText = [</span><br><span class="line">     		&#123;<span class="string">'id'</span>: <span class="string">'email'</span>, <span class="string">'help'</span>: <span class="string">'Your e-mail address'</span>&#125;,</span><br><span class="line">     		&#123;<span class="string">'id'</span>: <span class="string">'name'</span>, <span class="string">'help'</span>: <span class="string">'Your full name'</span>&#125;,</span><br><span class="line">     		&#123;<span class="string">'id'</span>: <span class="string">'age'</span>, <span class="string">'help'</span>: <span class="string">'Your age (you must be over 16)'</span>&#125;</span><br><span class="line">   	];</span><br><span class="line"></span><br><span class="line"> 		<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; helpText.length; i++) &#123;</span><br><span class="line">   		<span class="keyword">var</span> item = helpText[i];</span><br><span class="line">   		<span class="built_in">document</span>.getElementById(item.id).onfocus = (<span class="function"><span class="keyword">function</span>(<span class="params">help</span>) </span>&#123;</span><br><span class="line">     			<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     				showHelp(help)</span><br><span class="line">     			&#125;</span><br><span class="line">   		&#125;)(item.help);</span><br><span class="line"> 		&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>好了，简单的对于闭包的介绍就到这里了！<br>想更系统的学习JS点击<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript" target="_blank" rel="noopener">这里</a></p>
]]></content>
      
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[踩过React表单的坑后有感]]></title>
      <url>http://yoursite.com/2016/10/13/%E8%B8%A9%E8%BF%87React%E8%A1%A8%E5%8D%95%E7%9A%84%E5%9D%91%E5%90%8E%E6%9C%89%E6%84%9F/</url>
      <content type="html"><![CDATA[<blockquote>
<p>如题所示，最近捣鼓React表单踩坑了，才捣鼓没多少时日，心就变浮躁了，开始看不下去文档，也不谷歌百度直接开码，然后就是各种报错，越报错心越急越得不到解决心情越差，好不容易静下心来搜集资料准备搞定表单，这里先记下来，以备不时只需！</p>
</blockquote>
<h2 id="踩过的坑…"><a href="#踩过的坑…" class="headerlink" title="踩过的坑…"></a>踩过的坑…</h2><p>直接开写吧：</p>
<p>input标签忘记闭合导致报错</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> SimpleComp = React.createClass(&#123;</span><br><span class="line">	render()&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"随便输入点什么吧！"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	&#125;</span></span><br><span class="line"><span class="xml">&#125;);</span></span><br><span class="line"><span class="xml">ReactDOM.render(<span class="tag">&lt;<span class="name">SimpleComp</span> /&gt;</span>, document.body)</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>运行上面的这段代码，发现并页面渲染异常，打开浏览器console一看，下面的出现了错误，并且是下面这样的:</p>
</blockquote>
<p><img src="https://d17oy1vhnax1f7.cloudfront.net/items/2v0Y33291e1E240k0k0J/Image%202016-10-13%20at%207.35.27%20%E4%B8%8B%E5%8D%88.png?v=0ba59abc" alt="报错图片"></p>
<blockquote>
<p>清清楚楚明明白白，标签并没有闭合，并且直指9行行最后渲染出了问题，然后我就一直找一直找，没错误啊，可始终还是报错<br>最后经过各种尝试才知道，input标签要强制闭合的，不然就会转换错误<br>知道真相的我眼泪掉下来，原来是这么回事啊，平时html写得飞起，细节这些什么的，都没注意哎！<br>再有，控制台上打印的异常和错误可千万别轻信，以前已经在这个被坑过了</p>
</blockquote>
<h2 id="受控与不受控"><a href="#受控与不受控" class="headerlink" title="受控与不受控"></a>受控与不受控</h2><blockquote>
<p>有过React基础的童鞋都知道，React内部通过props和state来传递属性和状态，其中属性经由组件外属性传入，作用于组件后无法改变<br>state 产生于组件内部， 通过setState()来改变状态，每一次改变状态，组件将会被重绘<br>对于表单来说，props和state用得都很频繁，所以在这里提及一下</p>
</blockquote>
<p>先来看非受控组件吧，顾名思义就是组件的状态不受控制，从代码上体现出来的就是，一个input不含有value属性<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> NotControlComp = React.createClass(&#123;</span><br><span class="line">	render() &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">defaultValue</span>=<span class="string">&#123;this.props.placeholder&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">	&#125;</span></span><br><span class="line"><span class="xml">&#125;);</span></span><br><span class="line">ReactDOM.render(&lt;NotControlComp placeholder='随便输入点什么吧！' /&gt;, document.body)</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>上面的一段代码定义了一个非受控的input，接受用户的输入而改变状态<br>注意：这里使用到的defaultValue属性作用类似于placeholder属性</p>
</blockquote>
<p>好吧，事实上我们使用非受控组件的情况比较多，我们会监听input的onChange时间，通过state来更新状态<br>下面是一个简单的获取用户输入的例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ExampleComp = React.createClass(&#123;</span><br><span class="line">	getDefaultProps()&#123;</span><br><span class="line">		<span class="keyword">return</span>&#123;<span class="attr">placeholder</span>: <span class="string">'输入吧'</span>&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">	getInitialState()&#123;</span><br><span class="line">		<span class="keyword">return</span>&#123;</span><br><span class="line">			val: <span class="string">''</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">	handleChange(e)&#123;</span><br><span class="line">		<span class="keyword">this</span>.setState(&#123;<span class="attr">val</span>: e.target.value&#125;)</span><br><span class="line">	&#125;,</span><br><span class="line">	render()&#123;</span><br><span class="line">		<span class="keyword">return</span>(</span><br><span class="line">			&lt;div&gt;</span><br><span class="line">				&lt;input type=<span class="string">"text"</span> defaultValue=&#123;<span class="keyword">this</span>.props.val&#125; onChange=&#123;<span class="keyword">this</span>.handleChange&#125;/&gt;</span><br><span class="line">				&lt;p&gt;你输入了：&#123;<span class="keyword">this</span>.state.val&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">			&lt;/</span>div&gt;</span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">ExampleComp</span> <span class="attr">placeholder</span>=<span class="string">'随便输入点什么吧!'</span> /&gt;</span>, document.body)</span></span><br></pre></td></tr></table></figure></p>
<p>那么受控组件就很显而易见了，受控的input定义了一个value属性，并且value部位null<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ControlComp = React.createClass(&#123;</span><br><span class="line">	render()&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">"不要尝试修改这个值啦！"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">	&#125;</span></span><br><span class="line"><span class="xml">&#125;);</span></span><br><span class="line"><span class="xml">ReactDOM.render(<span class="tag">&lt;<span class="name">ControlComp</span> /&gt;</span>, document.getElementById('app'))</span></span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>好了，最简单的受控组件就写好了，当你尝试去修改表单中的值的时候，发现根本无法修改<br>这点明显和我们平时写html不一样，同样的input标签在html中就可以修改但是到了react中就没办法修改了，想过原因吗？<br>官方文档中给出了答案： 不比HTML，React组件必须在任何时间点呈现视图的状态而不仅仅是在初始化的时候， 好好理解！</p>
</blockquote>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ol>
<li><p>不要通过添加子节点的方式给<code>&lt;textarea&gt;</code>添加内容，应该使用defaultValue或者value属性,避免产生歧义，因为JSX本身就是javascript</p>
</li>
<li><p>你可以通过selected属性来选中一个下拉栏， 但是为了组件的可操作性，请使用value 或者 defaultValue来代替就像这样：</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> SelectComp = React.createClass(&#123;</span><br><span class="line">	render()&#123;</span><br><span class="line">		<span class="keyword">return</span>(</span><br><span class="line">			&lt;select value=<span class="string">'B'</span>&gt;</span><br><span class="line">				&lt;option value=<span class="string">'A'</span>&gt;A&lt;<span class="regexp">/option&gt;</span></span><br><span class="line"><span class="regexp">				&lt;option value='B'&gt;A&lt;/</span>option&gt;</span><br><span class="line">				&lt;option value=<span class="string">'C'</span>&gt;A&lt;<span class="regexp">/option&gt;</span></span><br><span class="line"><span class="regexp">			&lt;/</span>select&gt;</span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">SelectComp</span> /&gt;</span>, document.body)</span></span><br></pre></td></tr></table></figure>
<p> 想要非受控组件的话，就使用defaultValue属性好了<br> 当然了，可以通过传入一个数组来达到多选的目的, 前提是给select添加<code>multiple={true}</code>就可以了</p>
</li>
</ol>
<p>看到这里，也许有人心里还有疑问，受控的组件既然不能修改那到底该怎么用？<br>对于这个问题，请看下面：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ControlComp = React.createClass(&#123;</span><br><span class="line">	getInitialState()&#123;</span><br><span class="line">		<span class="keyword">return</span>&#123;<span class="attr">value</span>: <span class="number">0</span>&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">	handleClick(e)&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">this</span>.setState(&#123;<span class="attr">value</span>: <span class="keyword">this</span>.state.value + <span class="number">1</span>&#125;)</span><br><span class="line">	&#125;,</span><br><span class="line">	render()&#123;</span><br><span class="line">		<span class="keyword">return</span> (</span><br><span class="line">			&lt;div&gt;</span><br><span class="line">				&lt;input type=<span class="string">"text"</span> value=&#123;<span class="keyword">this</span>.state.value&#125; /&gt;</span><br><span class="line">				&lt;button onClick=&#123;<span class="keyword">this</span>.handleClick&#125;&gt;+<span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span> </span><br><span class="line">			&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">		)</span></span><br><span class="line"><span class="regexp">	&#125;</span></span><br><span class="line"><span class="regexp">&#125;);</span></span><br><span class="line"><span class="regexp">ReactDOM.render(&lt;ControlComp /</span>&gt;, <span class="built_in">document</span>.body)</span><br></pre></td></tr></table></figure></p>
<p>好了，我们添加了一个button来控制受控组件的值，当然还有很多方式，比如我们可以给受控组件添加一个onChange事件监听</p>
<blockquote>
<p>好了，React表单的基本知识就说到这里，感谢那些曾经让我烦躁无比的坑！</p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> React </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[在React中使用mixin]]></title>
      <url>http://yoursite.com/2016/10/12/%E5%9C%A8React%E4%B8%AD%E4%BD%BF%E7%94%A8mixin/</url>
      <content type="html"><![CDATA[<h2 id="mixin到底为何方神圣？"><a href="#mixin到底为何方神圣？" class="headerlink" title="mixin到底为何方神圣？"></a>mixin到底为何方神圣？</h2><p>mixin被理解为‘混入’的意思，<br>我们知道，如果你经常使用某一段相同的代码的时候，你会把它进行抽象，封装成类或者function，<br>‘混入’也一样，它可以解决代码段重复的问题。</p>
<h2 id="jade中的Mixins"><a href="#jade中的Mixins" class="headerlink" title="jade中的Mixins"></a>jade中的Mixins</h2><blockquote>
<p>jade(pug)是一个高性能的模版引擎，它使用javascript实现，并提供给Node使用.<br>我在使用Jade模版引擎接触到了Mixin, 下面给出一个例子理解下</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mixin box(styles)</span><br><span class="line">           .conponent</span><br><span class="line">               -each style <span class="keyword">in</span> styles</span><br><span class="line">                   .squire</span><br><span class="line">                       -<span class="keyword">var</span> x = styles.indexOf(style) + <span class="number">1</span>;</span><br><span class="line">                       a(href='/users/' + x + '/list') #&#123;style&#125;</span><br><span class="line">   .container</span><br><span class="line">   	mixin([<span class="string">'lin'</span>, <span class="string">'limoer'</span>])</span><br><span class="line">   .links</span><br><span class="line">   	mixin([<span class="string">'parents'</span>, <span class="string">'classmates'</span>, <span class="string">'others'</span>])</span><br></pre></td></tr></table></figure>
<p>你可以无视jade的语法，如果你想学习jade，点<a href="https://segmentfault.com/a/1190000000357534#articleHeader0" target="_blank" rel="noopener">这里</a></p>
<blockquote>
<p>首先我使用mixin 关键字申明了一个带参数mixin结构，然后依据传入的参数生成了很多url<br>这个mixin 结构可以在这个模版文件中使用，通过不同的参数来生成url<br>从上面可以看出，mixin的确可以解决代码重复的问题</p>
</blockquote>
<h2 id="React中的Mixin"><a href="#React中的Mixin" class="headerlink" title="React中的Mixin"></a>React中的Mixin</h2><blockquote>
<p>首先来写一个例子</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> TimerComp = React.createClass(&#123;</span><br><span class="line">	getInitialState: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> &#123;<span class="attr">secondsElapsed</span>: <span class="number">0</span>&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">	tick: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.stateState(&#123;<span class="attr">secondsElapsed</span>: <span class="keyword">this</span>.state.secondsElapsed + <span class="number">1</span>&#125;)</span><br><span class="line">	&#125;,</span><br><span class="line">	componentDidMount: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.interval = setInterval(<span class="keyword">this</span>.tick, <span class="number">1000</span>)</span><br><span class="line">	&#125;,</span><br><span class="line">	componentWillUnmount: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		clearInterval(<span class="keyword">this</span>.interval)</span><br><span class="line">	&#125;,</span><br><span class="line">	render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (</span><br><span class="line">			&lt;div&gt;</span><br><span class="line">				&lt;p&gt;Seconds Elapse &#123;<span class="keyword">this</span>.state.secondsElapsed&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">			&lt;/</span>div&gt;</span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>简单的说一下，这里定义了一个定时器组件，会随着时间的增加来自动计时<br>但是一个应用需要多个计时器呢？我们第一时间想到了组件的嵌套，但是组件的嵌套不但会增加组件的复杂程度<br>而且，想要修改计时器也是比较困难的<br>好了，解决代码复用的问题，我们可以使用Mixin， 让其混入进其他组件就好了</p>
</blockquote>
<blockquote>
<p>码起，还是计时器的例子！</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> MixinTimerComp = React.createClass(&#123;</span><br><span class="line">	mixins: [MixinInterval(<span class="number">1000</span>)],</span><br><span class="line">	getInitialState: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> &#123;<span class="attr">secondsElapsed</span>: <span class="number">0</span>&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">	onTick: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.setState(&#123;<span class="attr">secondsElapsed</span>: <span class="keyword">this</span>.state.secondsElapsed + <span class="number">1</span>&#125;)</span><br><span class="line">	&#125;,</span><br><span class="line">	render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (</span><br><span class="line">			&lt;div&gt;</span><br><span class="line">				&lt;p&gt;Seconds Elapse &#123;<span class="keyword">this</span>.state.secondsElapsed&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">			&lt;/</span>div&gt;</span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这里我们使用了mixins属性，把自定义的MixinInterval对象混入了Timer组件</p>
</blockquote>
<p>来看看MixinInterval的实现：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> MixinInterval: <span class="function"><span class="keyword">function</span>(<span class="params">interval</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> &#123;</span><br><span class="line">		componentDidMount() &#123;</span><br><span class="line">			<span class="keyword">this</span>.__interval = setInterval(<span class="keyword">this</span>.onTick, interval)</span><br><span class="line">		&#125;,</span><br><span class="line">		componentWillUnmount() &#123;</span><br><span class="line">			clearInterval(<span class="keyword">this</span>.__interval)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>就这样实现了一个最简单的问题，和最前面的例子做对比，我们发现，只是把组件中一些代码独立出来成为一个mixin对象<br>但这样做无疑是解决了代码重用的问题，当我们想定义另一个计时器时候，我们只需混入这个mixin代码<br>而不必关心混入的计时处理对象是怎么实现的</p>
</blockquote>
<blockquote>
<p>mixin 实现起来非常简单，React也支持多个mixin的混入(在mixins赋值为一个mixin对象数组)<br>但有一个问题需要注意，在mixin中尝试覆盖state中定义的键的话，React会抛出错误</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">React.createClass(&#123;</span><br><span class="line">	mixins: [&#123;</span><br><span class="line">		getInitialState()&#123;</span><br><span class="line">			<span class="keyword">return</span> &#123;<span class="attr">cover</span>: <span class="number">1</span>&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;],</span><br><span class="line">	getInitialState()&#123;</span><br><span class="line">		<span class="keyword">return</span> &#123;<span class="attr">cover</span>: <span class="number">2</span>&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 错误，尝试覆盖cover属性</span></span><br></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> React </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[React学习之JSX]]></title>
      <url>http://yoursite.com/2016/10/11/React%E5%AD%A6%E4%B9%A0%E4%B9%8BJSX/</url>
      <content type="html"><![CDATA[<h2 id="什么是JSX？"><a href="#什么是JSX？" class="headerlink" title="什么是JSX？"></a>什么是JSX？</h2><blockquote>
<p>简单点说，JSX是对javascript的扩展，语法类似于XML，但JSX不是一门新的语言，<br>确切来说只是语法糖，每一个XML都会被响应的转换工具转换成纯的javascript代码。<br>在使用React时，你没有必要使用JSX来构建组件，但是推荐使用JSX，因为这样可以让组件的结构<br>和组件之间的关系看起来更清晰。</p>
</blockquote>
<p>好了，开始使用JSX吧！</p>
<blockquote>
<p>首先我们分别使用JSX和纯js来渲染一个组件</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 使用JSX</span></span><br><span class="line">ReactDOM.render(</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;使用了JSX语法糖&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;,</span><br><span class="line">    <span class="built_in">document</span>.body</span><br><span class="line">)</span><br><span class="line"><span class="comment">// 不使用jsx</span></span><br><span class="line">ReactDOM.render(</span><br><span class="line">    React.createElement(<span class="string">'div'</span>, <span class="literal">null</span>,</span><br><span class="line">        React.createElement(<span class="string">'h1'</span>, <span class="literal">null</span>, <span class="string">'不使用jsx'</span>)</span><br><span class="line">    ),</span><br><span class="line">    <span class="built_in">document</span>.body</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h2 id="html标签和React组件"><a href="#html标签和React组件" class="headerlink" title="html标签和React组件"></a>html标签和React组件</h2><blockquote>
<p>ReactDOM.render()可以渲染html标签，也可以渲染React组件，但是这里有一些命名上的规范</p>
</blockquote>
<p>html标签使用<em>首字母小写</em>的方式，但使用首字母大写也能够正常加载</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> renderDiv = &lt;div&gt;这是一个标签&lt;/div&gt;</span><br><span class="line">ReactDOM.render(renderDiv, <span class="built_in">document</span>.body)</span><br></pre></td></tr></table></figure>
<p>React组件使用首字母大写的方式</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> RenderComp = React.createClass(&#123;</span><br><span class="line">    render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>: &lt;div&gt;这是一个组件&lt;/div&gt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">ReactDOM.render(&lt;RenderComp /&gt;, document.body)</span><br></pre></td></tr></table></figure>
<p>经过测试，发现如果使用首字母小写的方式，将不会正常渲染组件，也不会报错, 当然你也可以这样写:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> RenderComp = React.createClass(&#123;</span><br><span class="line">    render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>: &lt;div&gt;这是一个组件&lt;/div&gt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> renderComp = &lt;RenderComp /&gt;</span><br><span class="line">ReactDOM.render(renderComp, document.body)</span><br></pre></td></tr></table></figure>
<h2 id="js表达式"><a href="#js表达式" class="headerlink" title="js表达式"></a>js表达式</h2><blockquote>
<p>当我们想要在React中使用js变量或者是表达式时候,使用{}来进行包裹，不能够出现””,否则会被当作字符串。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> SampleComp = React.createClass(&#123;</span><br><span class="line">    getInitialState: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            iscls: <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="comment">// 表达式</span></span><br><span class="line">            &lt;div className=&#123;<span class="keyword">this</span>.state.iscls ? <span class="string">'cls'</span> : <span class="string">'no_cls'</span>&#125;&gt;</span><br><span class="line">            <span class="comment">// 变量</span></span><br><span class="line">            &lt;h2&gt;&#123;<span class="keyword">this</span>.props.msg&#125;&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">ReactDOM.render(&lt;SampleComp msg='学习搬砖中...' /&gt;, document.body)</span><br></pre></td></tr></table></figure>
<p>这里提示一下，在JSX中，标签的class和for属性分别使用className和htmlFor代替了</p>
<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><blockquote>
<p>在给标签添加style属性的时候，应该这样写:</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">style=&#123;&#123;<span class="attr">display</span>: <span class="string">'none'</span>&#125;&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>也可以把要应用的样式赋值给一个变量，再使用变量</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> style = &#123;</span><br><span class="line">    color: red,</span><br><span class="line">    display: none</span><br><span class="line">&#125;;</span><br><span class="line">&lt;div style=&#123;style&#125;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>HTML转义，为了防止XSS攻击，React默认是使用转义的,所以当你想使用一些富文本这里就必须注意<br>为了不让其转义，我们可以这样写：</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mesg = <span class="string">'&lt;h2&gt;这里的字体大小是多少?&lt;/h2&gt;'</span></span><br><span class="line">ReactDOM.render(</span><br><span class="line">    &lt;div dangerouslySetInnerHTML=&#123;&#123;<span class="attr">__html</span>: mesg&#125;&#125;&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;,</span></span><br><span class="line"><span class="regexp">    document.body</span></span><br><span class="line"><span class="regexp">)</span></span><br></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>刚开始学习React的时候对JSX是生畏的，以为会很难理解。当慢慢的接触React，踩过一些小坑，<br>发现使用JSX是那么好掌握, 它仅仅是语法糖而已，并且转换的规则也很简单</p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> React </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[写在正式学习React之前]]></title>
      <url>http://yoursite.com/2016/10/10/%E5%86%99%E5%9C%A8%E6%AD%A3%E5%BC%8F%E5%AD%A6%E4%B9%A0React%E4%B9%8B%E5%89%8D/</url>
      <content type="html"><![CDATA[<p>如果你还不知道大名鼎鼎的ReactJS, 先去<a href="https://facebook.github.io/react/" target="_blank" rel="noopener">这里</a>看看吧</p>
<blockquote>
<p>在使用过了诸如BootStrap, Foundation这类的前端框架后，在初识React就被其虚拟DOM和组件化的开发深深的吸引。<br>然后在接下来的几天，我慢慢的对React产生的恐惧，模式转变得太快，让我很不舒服。<br>然后又经过几天玩坏了，我才返现React简直是一股清流，开始爱上它了！</p>
</blockquote>
<p>好了，开始使用React吧！</p>
<h2 id="安装React"><a href="#安装React" class="headerlink" title="安装React"></a>安装React</h2><p>请先安装<a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node</a>和npm</p>
<p>使用React之前，先来安装一下<a href="https://segmentfault.com/a/1190000000349555" target="_blank" rel="noopener">bower</a>吧</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g bower</span><br></pre></td></tr></table></figure>
<blockquote>
<p>安装bower后我们来正式的进入React的学习中来</p>
</blockquote>
<p>新建一个目录</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir proj</span><br></pre></td></tr></table></figure>
<p>使用以下命令来安装React</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bower install react</span><br></pre></td></tr></table></figure>
<p>安装完后我们在proj目录下会看见一个bower_components目录,目录里面有一个React目录，ok！</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ touch index.html</span><br></pre></td></tr></table></figure>
<p>使用文本编辑器打开index.html, 开始码起！</p>
<h2 id="第一个React-helloworld"><a href="#第一个React-helloworld" class="headerlink" title="第一个React helloworld"></a>第一个React helloworld</h2><blockquote>
<p>引入react.js和react-dom.js（在head,或者body中引入都可以，但是必须在我们开写地方的上面）</p>
</blockquote>
<p>就像这样<br><img src="https://d17oy1vhnax1f7.cloudfront.net/items/3x0G1z2L1J3S3O2k1V1l/Image%202016-10-10%20at%209.34.45%20%E4%B8%8B%E5%8D%88.png?v=a8b26e20" alt="引入图片"></p>
<blockquote>
<p>接着申明一个script标签</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/babel"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注意这里的type是<code>text/babel</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> HelloWorldComponent = React.createClass(&#123;</span><br><span class="line">	render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (</span><br><span class="line">			&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">				&lt;h1&gt;开始学习使用工具搬砖啦！&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">			&lt;/</span>div&gt;</span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">HelloWorldComponent</span> /&gt;</span>, document.body)</span></span><br></pre></td></tr></table></figure>
<p>好了，不出意外的话，我们将会在浏览器中看到<br><img src="https://d17oy1vhnax1f7.cloudfront.net/items/320E0g0c3B2s2P2z1N2l/Image%202016-10-10%20at%2010.14.14%20%E4%B8%8B%E5%8D%88.png?v=b564cf5d" alt="结果图"></p>
<blockquote>
<p>好啦，我们的第一个react组件算是开发完成了，这里讲一讲我们到底做了什么<br>首先我们使用了JSX语法，有关JSX的知识会单独的加深了解,但是最基本的规则就是，遇到{}解析成js，遇到‘&lt;’解析成html<br>然后使用了React提供的createClass来创建一个组件类，类名一定要大写，实现了其中一个必须要实现的render方法，返回一个h1标签<br>最后使用ReactDOM.render()渲染到body中去<br>搞定</p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> React </tag>
            
        </tags>
        
    </entry>
    
  
  
    
    <entry>
      <title></title>
      <url>http://yoursite.com/googlee22a7e1de18f983c.html</url>
      <content type="html"><![CDATA[google-site-verification: googlee22a7e1de18f983c.html]]></content>
    </entry>
    
    <entry>
      <title></title>
      <url>http://yoursite.com/about/index.html</url>
      <content type="html"><![CDATA[<p>Nickname: Limoer <a href="/chat/index.html">CHAT WITH ME!</a></p>
<p>Profession: software engineering</p>
<p>Profile: I’m a student from SDU. I’m focusing on browser side developing. I like the amazing and ridiculous language - JavaScript!</p>
]]></content>
    </entry>
    
  
</search>
